<blueData version='0.99.8'>
  <projectProperties>
    <author>author</author>
    <title></title>
    <sampleRate>44100</sampleRate>
    <ksmps>2</ksmps>
    <channels>2</channels>
    <commandLine>csound -odac1</commandLine>
    <diskSampleRate>44100</diskSampleRate>
    <diskKsmps>2</diskKsmps>
    <diskChannels>2</diskChannels>
    <diskCommandLine>csound -W -otest.wav</diskCommandLine>
    <CsOptions></CsOptions>
    <notes> -W -o D:\Nuendo\Urban\mel1.wav

consound -W -oD:\Nuendo\Urban\bass_1_ctof.wav</notes>
  </projectProperties>
  <arrangement>
    <instrumentAssignment arrangementId='1' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>sine</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 16000
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp  	linen 	iamp, .001, idur, .001
;kamp    linen   iamp, .02, idur, idur*.5
;amod    oscili  1000, ipitch, 1
;acar    oscili  kamp, ipitch+amod, 1
;acar    oscili  kamp, ipitch+amod, 1
acar	oscili  kamp, ipitch, 1

a1, a2	locsig  acar, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2

</instrumentText>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='2' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>saw</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 32768
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .02, idur, idur*.5
asig    oscili  kamp, ipitch, 2

a1, a2	locsig  asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='3' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>snare</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 32768
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig, asig2 soundin &quot;
a1, a2	locsig  asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='99' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>reverb</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>a1	reverb	ga1, 5
a2	reverb	ga2, 5
	outs	a1,a2

ga1 = 0
ga2 = 0</instrumentText>
      </instrument>
    </instrumentAssignment>
  </arrangement>
  <tables>;sine
f 1 0 16384 10 1

;saw
f 2 0 256 7 0 128 1 0 -1 128 0
;pulse?
f 3 0 256 7 1 128 1 0 -1 128 -1
</tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc>ga1 init 0
ga2 init 0
</globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <opcodeList/>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
  </liveData>
  <soundObject type='blue.soundObject.PolyObject'>
    <subjectiveDuration>2.0</subjectiveDuration>
    <startTime>0.0</startTime>
    <name>root</name>
    <backgroundColor>-10066279</backgroundColor>
    <timeBehavior>0</timeBehavior>
    <noteProcessorChain/>
    <isRoot>true</isRoot>
    <pixelSecond>64</pixelSecond>
    <heightIndex>2</heightIndex>
    <snapEnabled>false</snapEnabled>
    <snapValue>1.0</snapValue>
    <timeDisplay>0</timeDisplay>
    <timeUnit>5</timeUnit>
    <soundLayer name='' muted='false' solo='false'>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>15.296875</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>external</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>;**************************************************************
; Continuum.blue
;
;	Simple Common Music program to demonstrate use of 
;		print-stream function in conjunction with blue.
;
;	Note: This was built on Win2k.  The command line used 
;		above implies that the directory containing lisp.exe 
;		(or correlate lisp executable for mac/linux) 
;		is accessible by the shell running blue. -M param 
;		points to compiled common music binary.
;	
;	Questions/comments - Ben McAllister, benmca_at_listenfaster.com
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i99&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))

;
; Function: line1
; 	simple function to produce growing pitch collection ala Ligeti&apos;s Continuum
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun line1(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item 
		(rhythms s s s s s  in random tempo(tempo tem)))
	)
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur .1)
	(setf pitch (item (items 
		(pitches c4 c c c c ef for 16)
	)))
	(setf amp (item 
		(items 1 in random)	
	))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .2)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)
(defun line2(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item 
		(rhythms e e s s q  in random tempo(tempo tem)))
	)
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur .008)
	(if (= rhythm (rhythm &apos;q tem))
	(setf pitch (item (items 
		(pitches c6 for 16)
	)))
	(setf pitch (item (items 
		(pitches c4  for 16)
	)))
	)
	(setf amp (item 
		(items 2 in random)	
	))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 10)
	(setf pct .1)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

(defun line3(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item 
		(rhythms e e s s  in heap tempo(tempo tem)))
	)
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur (* rhythm .25))
	(if (= rhythm (rhythm &apos;q tem))
	(setf pitch (item (items 
		(pitches c6 for 16)
	)))
	(setf pitch (item (items 
		(pitches c6 e g b  for 16)
		(pitches f6 a c7 e  for 16)
	)))
	)
	(setf amp (item 
		(items 2 in random)	
	))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 100)
	(setf pct .1)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)


;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
;	   	(line1 0 320 0 (* 32 10) 1)
;		(line1 0 120 45 (* 32 10) 1)
		(line2 0 120 40 (* 32 10) 1)
		(line3 0 120 50 (* 32 10) 1)
;		(line1 0 320 90 (* 32 10) 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>lisp.exe -M c:\Archive\csound\bin\cm-1.3\clisp\cm.mem</commandLine>
      </soundObject>
    </soundLayer>
  </soundObject>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
  <renderEndTime>-1.0</renderEndTime>
  <markersList/>
  <loopRendering>false</loopRendering>
</blueData>