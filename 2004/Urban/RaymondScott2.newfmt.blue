<blueData version='0.94.0 beta 9a'>
  <projectProperties>
    <author>author</author>
    <title></title>
    <channels>2</channels>
    <commandLine>csoundav_con  -+Q4 -+Y</commandLine>
    <controlRate>44100</controlRate>
    <sampleRate>44100</sampleRate>
    <CsOptions></CsOptions>
    <notes>csoundav_win -+Q4 -+P21
consound -odac1</notes>
  </projectProperties>
  <instrumentLibrary>
    <instrumentCategory categoryName='Instrument Library' isRoot='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>miditranslator</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>; convert incoming freq to midinote
;int n = (int) ( ( 12 * log(f / 220.0) / log(2.0) ) + 57.01 );
ifreq = p5
if_over_220 = ifreq/220
i1 = log(if_over_220)
i2 = log(2.0)
isolution = ( ( 12 * i1 / i2 ) + 57.01 )
inotenum = int(isolution)

;convert scalar 0 &gt; 1 to velocity value 0 &gt; 127
iamp = p4

;ivelocity = int(256*iamp)
ivelocity = 127

noteondur  1, inotenum, ivelocity, p3-.1</instrumentText>
      </instrument>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>miditranslator</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>; convert incoming freq to midinote
;int n = (int) ( ( 12 * log(f / 220.0) / log(2.0) ) + 57.01 );
ifreq = p5
if_over_220 = ifreq/220
i1 = log(if_over_220)
i2 = log(2.0)
isolution = ( ( 12 * i1 / i2 ) + 57.01 )
inotenum = int(isolution)

;convert scalar 0 &gt; 1 to velocity value 0 &gt; 127
iamp = p4
ivelocity = int(127*iamp)

noteondur   3, inotenum, ivelocity, p3-.1</instrumentText>
      </instrument>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>untitled</name>
        <comment/>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText></instrumentText>
      </instrument>
    </instrumentCategory>
  </instrumentLibrary>
  <arrangement>
    <instrumentAssignment arrangementId='1' instrumentId='0' isEnabled='true'/>
    <instrumentAssignment arrangementId='2' instrumentId='1' isEnabled='true'/>
    <instrumentAssignment arrangementId='3' instrumentId='1' isEnabled='true'/>
    <instrumentAssignment arrangementId='99' instrumentId='2' isEnabled='true'/>
  </arrangement>
  <tables></tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc></globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <udo></udo>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
  </liveData>
  <soundObject type='blue.soundObject.PolyObject'>
    <subjectiveDuration>2.0</subjectiveDuration>
    <startTime>0.0</startTime>
    <name>root</name>
    <timeBehavior>0</timeBehavior>
    <noteProcessorChain/>
    <isRoot>true</isRoot>
    <pixelSecond>8</pixelSecond>
    <heightIndex>2</heightIndex>
    <snapEnabled>false</snapEnabled>
    <snapValue>1.0</snapValue>
    <timeDisplay>0</timeDisplay>
    <timeUnit>5</timeUnit>
    <soundLayer name='' muted='false' solo='false'>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>23.875</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>perc</name>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>(in-package :stella)
(defparameter *BUFLEN* 0)
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))


(defun rhythmline3(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
    (setf inst instrnum)
    (setf mytime time)
    (setf rhythm 
        (item 
         (items
            (rhythms s s s s s s e. s s s s s s s in heap tempo(tempo tem)) 
            )
        ) 
    )

    (setf dur (* 1.2 rhythm))
    (setf pitch 
        (item
            (items 
		        (pitches c5 e g  c6  e g in heap)
    		)
        )
    )
    (setf amp (item 
        (items 1 .9 .9 1 .9 .9 1)
	))
    (setf pan pn)
    (setf dist 2)
    (setf pct .075)
))

(defun rhythmline4(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
    (setf inst instrnum)
    (setf mytime time)
    (setf rhythm 
        (item 
         (items
            (rhythms e e e e e q. s s in heap for 24 tempo(tempo tem)) 
	 (rhythms w+w w w+h in random for 1 tempo(tempo tem))
            )
        ) 
    )

    (setf dur rhythm)
    (setf pitch 
        (item
            (items 
		        (pitches c5 e g b d6 f a c7 in heap for 24)
			(pitches r)
    		)
        )
    )
    (setf amp (item 
        (items 1)
	))
    (setf pan pn)
    (setf dist 2)
    (setf pct .075)
))


(defun print-stream (filename)
  (let ((buffer (make-array *buflen*
                            
                            )))
   (with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
     (do ((j 0))((= j (file-length f)))
        (setf myline (read-line f t &quot;eofeof&quot;))
        (if (string-equal myline &quot;eofeof&quot;)(return))
        (princ myline)
        (write-char #\Newline)
        (setf j (+ j ))
        )
   ))
)

	
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))
    (fheader my-scorefile myheader)
    (merge all ()
;        (rhythmline1 0 120 0 48 1)
;        (rhythmline2 0 120 0 64 2)
;        (rhythmline3 0 120 0 56 3)
        (rhythmline4 0 120 0 56 3)
        (rhythmline4 0 120 0 56 3)
        (rhythmline4 0 120 0 56 3)
;        (rhythmline3 0 240 0 56 3)
;        (pulse 0 60 0 100 1)
            )
	(setf mystream (make-string-output-stream))
	    (open-cmd my-scorefile)
	        (mix-cmd &quot;all 0 play nil&quot;)
))
(ms)
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>C:\CSOUND\cm-1.3\clisp\lisp.exe -M c:\Csound\cm-1.3\clisp\cm.mem</commandLine>
      </soundObject>
    </soundLayer>
    <soundLayer name='' muted='true' solo='false'>
      <soundObject type='blue.soundObject.GenericScore'>
        <subjectiveDuration>18.625</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>Chords</name>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <score>s
i 1 0 0.15 1 130.812 0 2 0.075
i 1 0.749 0.15 1 195.997 0 2 0.075
i 1 1.499 0.15 1 261.625 0 2 0.075
i 1 1.499 0.15 1 329.627 0 2 0.075
i 1 1.999 0.15 1 130.812 0 2 0.075
i 1 2.749 0.15 1 195.997 0 2 0.075
i 1 3.499 0.15 1 261.625 0 2 0.075
i 1 3.499 0.15 1 329.627 0 2 0.075
i 1 3.999 0.15 1 130.812 0 2 0.075
i 1 4.75 0.15 1 195.997 0 2 0.075
i 1 5.499 0.15 1 261.625 0 2 0.075
i 1 5.499 0.15 1 329.627 0 2 0.075
i 1 5.999 0.15 1 130.812 0 2 0.075
i 1 6.749 0.15 1 195.997 0 2 0.075
i 1 7.499 0.15 1 261.625 0 2 0.075
i 1 7.499 0.15 1 329.627 0 2 0.075
i 1 7.999 0.15 1 174.614 0 2 0.075
i 1 8.75 0.15 1 220.0 0 2 0.075
i 1 9.5 0.15 1 261.625 0 2 0.075
i 1 9.5 0.15 1 349.228 0 2 0.075
i 1 10.0 0.15 1 174.614 0 2 0.075
i 1 10.749 0.15 1 220.0 0 2 0.075
i 1 11.499 0.15 1 261.625 0 2 0.075
i 1 11.499 0.15 1 349.228 0 2 0.075
i 1 11.999 0.15 1 130.812 0 2 0.075
i 1 12.749 0.15 1 195.997 0 2 0.075
i 1 13.499 0.15 1 261.625 0 2 0.075
i 1 13.499 0.15 1 329.627 0 2 0.075
i 1 13.999 0.15 1 130.812 0 2 0.075
i 1 14.749 0.15 1 195.997 0 2 0.075
i 1 15.499 0.15 1 261.625 0 2 0.075
i 1 15.499 0.15 1 329.627 0 2 0.075
i 1 15.999 0.15 1 130.812 0 2 0.075
i 1 16.75 0.15 1 195.997 0 2 0.075
i 1 17.5 0.15 1 261.625 0 2 0.075
i 1 17.5 0.15 1 329.627 0 2 0.075
i 1 18.0 0.15 1 130.812 0 2 0.075
i 1 18.75 0.15 1 195.997 0 2 0.075
i 1 19.5 0.15 1 261.625 0 2 0.075
i 1 19.5 0.15 1 329.627 0 2 0.075
i 1 20.0 0.15 1 130.812 0 2 0.075
i 1 20.749 0.15 1 195.997 0 2 0.075
i 1 21.499 0.15 1 261.625 0 2 0.075
i 1 21.499 0.15 1 329.627 0 2 0.075
i 1 21.999 0.15 1 130.812 0 2 0.075
i 1 22.749 0.15 1 195.997 0 2 0.075
i 1 23.499 0.15 1 261.625 0 2 0.075
i 1 23.499 0.15 1 329.627 0 2 0.075
i 1 23.999 0.15 1 174.614 0 2 0.075
i 1 24.749 0.15 1 220.0 0 2 0.075
i 1 25.499 0.15 1 261.625 0 2 0.075
i 1 25.499 0.15 1 349.228 0 2 0.075
i 1 25.999 0.15 1 174.614 0 2 0.075
i 1 26.749 0.15 1 220.0 0 2 0.075
i 1 27.499 0.15 1 261.625 0 2 0.075
i 1 27.499 0.15 1 349.228 0 2 0.075
i 1 27.999 0.15 1 130.812 0 2 0.075
i 1 28.749 0.15 1 195.997 0 2 0.075
i 1 29.499 0.15 1 261.625 0 2 0.075
i 1 29.499 0.15 1 329.627 0 2 0.075
i 1 29.999 0.15 1 130.812 0 2 0.075
i 1 30.749 0.15 1 195.997 0 2 0.075
i 1 31.499 0.15 1 261.625 0 2 0.075
i 1 31.499 0.15 1 329.627 0 2 0.075
e</score>
      </soundObject>
    </soundLayer>
    <soundLayer name='' muted='true' solo='false'>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>22.0</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>counterline</name>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>(in-package :stella)
(defparameter *BUFLEN* 0)
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))


(defun rhythmline1(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
    (setf inst instrnum)
    (setf mytime time)
    (setf rhythm 
        (item 
            (rhythms q. q. q q tempo(tempo tem)) 
        ) 
    )

    (setf dur .15)
;    (setf pitch (item (pitches g)))
    (setf pitch 
        (item
            (items 
		        (pitches c3 g [c4 e] for 12)
		        (pitches f3 a [c4 f] for 6)
		        (pitches c3 g [c4 e] for 6)
    		)
        )
    )
    (setf amp (item 
        (items 1)
	))
    (setf pan pn)
    (setf dist 2)
    (setf pct .075)
))


(defun rhythmline2(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
    (setf inst instrnum)
    (setf mytime time)
    (setf rhythm 
        (item 
         (items
            (rhythms q. e q q for 12 tempo(tempo tem)) 
            (rhythms q q q q tempo(tempo tem)) 
            )
        ) 
    )

    (setf dur .15)
    (setf pitch 
        (item
            (items 
		        (pitches e6 g6 b7 d7 for 12)
		        (pitches e7 d7 c7 b7 )
    		)
        )
    )
    (setf amp (item 
        (items 1)
	))
    (setf pan pn)
    (setf dist 2)
    (setf pct .075)
))

(defun rhythmline3(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
    (setf inst instrnum)
    (setf mytime time)
    (setf rhythm 
        (item 
         (items
            (rhythms e e e e e q. s s in heap for 24 tempo(tempo tem)) 
	 (rhythms w+w w w+h in random for 1 tempo(tempo tem))
            )
        ) 
    )

    (setf dur rhythm)
    (setf pitch 
        (item
            (items 
		        (pitches c2 e g b d3 f a c4 in heap for 24)
			(pitches r)
    		)
        )
    )
    (setf amp (item 
        (items 1)
	))
    (setf pan pn)
    (setf dist 2)
    (setf pct .075)
))


(defun print-stream (filename)
  (let ((buffer (make-array *buflen*
                            
                            )))
   (with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
     (do ((j 0))((= j (file-length f)))
        (setf myline (read-line f t &quot;eofeof&quot;))
        (if (string-equal myline &quot;eofeof&quot;)(return))
        (princ myline)
        (write-char #\Newline)
        (setf j (+ j ))
        )
   ))
)

	
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))
    (fheader my-scorefile myheader)
    (merge all ()
;        (rhythmline1 0 120 0 48 1)
        (rhythmline2 0 120 0 64 2)
;        (rhythmline3 0 120 0 (* 8 7) 2)
;        (pulse 0 60 0 100 1)
            )
	(setf mystream (make-string-output-stream))
	    (open-cmd my-scorefile)
	        (mix-cmd &quot;all 0 play nil&quot;)
))
(ms)
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>C:\CSOUND\cm-1.3\clisp\lisp.exe -M c:\Csound\cm-1.3\clisp\cm.mem</commandLine>
      </soundObject>
    </soundLayer>
  </soundObject>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
</blueData>