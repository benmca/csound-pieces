(in-package :stella)(defun test (start-time len)		(algorithm nil midi-note (start start-time length len)		(setf	amplitude (between 0.0 1.0))		(setf rhythm (item (rhythms q in random tempo 60)))		(setf	duration rhythm)		(setf note (item (items (pitches e6 b fs in random for 8)(pitches e6 b fs e5 b fs in random for 8)(pitches e6 f fs a as b e5 f fs a as b in random for 16)in palindrome)))		(setf channel 1)))(defun test1 (start-time len)		(algorithm nil midi-note (start start-time length len)		(setf	amplitude (between 0.0 1.0))		(setf rhythm (item (rhythms q in random tempo 60)))		(setf	duration rhythm)		(setf note (item (items (pitches e5 b fs in random for 8)(pitches e4 b fs e5 b fs in random for 8)(pitches e4 f fs a as b e5 f fs a as b in random for 16)in palindrome)))		(setf channel 2)))(defun test2 (start-time len)		(algorithm nil midi-note (start start-time length len)		(setf	amplitude (between 0.0 1.0))		(setf rhythm (item (rhythms  q in random tempo 60)))		(setf	duration rhythm)		(setf note (item (items (pitches e3 b fs in random for 8)(pitches e4 b fs e3 b fs in random for 8)(pitches e3 f fs a as b e4 f fs a as b in random for 16)in palindrome)))		(setf channel 3)))(defun ms (&key (start-time 1.)(my-scorefile "midi.mid"))	(let* ((myheader (header "")))	(fheader my-scorefile myheader)	(merge all ()		(test 0 128)		(test1 0 128)		(test2 0 128)	)	(open-cmd my-scorefile)	(mix-cmd "all")))