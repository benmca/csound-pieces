(in-package :stella)(defobject i1 (csound-note)	((instr :initform "i1") dur amp pitch partial)	(:parameters instr time dur amp pitch partial))(defobject i2 (csound-note)	((instr :initform "i") inst dur amp pitch index)	(:parameters instr inst time dur amp pitch index))(defobject inter (csound-note)	((instr :initform "i") inst dur amp pitch angle)	(:parameters instr inst time dur amp pitch angle))(defun alpha (start-time len)	(algorithm nil i1 (start start-time length len)		(vars (half (* len .5)))		(setf rhythm (item (rhythms s q e s s q ts tq te in random tempo 1000)))		(setf dur (* rhythm 3))		(setf amp (interpl count 0 0 half 25 len 0))		(setf pitch (item (items #e(between 80 83) #e(between 160 170) #e(between 160 170) #e(between 160 170)  in palindrome))) 		(setf partial (interpl count 0 0.0 len 7.0))		))(defun gong (start-time)	(algorithm nil i2 (start start-time length 2)		(setf rhythm 0)		(setf time start-time)		(setf dur 6)		(setf amp (item (items 5000 5000 3500 3500 3500 3000)))		(setf pitch (item (items [57 112][55 110 165 220])))		(setf inst (item (items 2 2 3 3 3 3)))		(setf index (item (items 6 6 5 5 5 5)))			))(defun a (start-time len)	(algorithm nil inter (start start-time length len)		(setf inst 4)		(setf rhythm (item (rhythms q tempo 300)))		(setf dur rhythm)		(setf pitch (notes (pitches e2 fs gs r fs r for 5)(pitches e2 f gs r fs r for 5)(pitches e2 f gs r fs r g for 5)))		(setf amp 1000)		(setf angle 0)		))(defun b (start-time len)	(algorithm nil inter (start start-time length len)		(setf inst 4)		(setf rhythm (item (rhythms q tempo 300)))		(setf dur rhythm)		(setf pitch (notes (pitches fs2 gs e r gs for 5)(pitches f2 gs e r gs for 5)(pitches fs2 gs f r g for 5)))		(setf amp 1000)		(setf angle 45)		))(defun c (start-time len)	(algorithm nil inter (start start-time length len)		(setf inst 4)		(setf rhythm (item (rhythms q tempo 300)))		(setf dur rhythm)		(setf pitch (notes (pitches e2 r gs e r for 5)(pitches e2 r gs f e r for 5)(pitches g2 r gs e r f for 5)))		(setf amp 1000)		(setf angle 90)		))(defun c (start-time len)	(algorithm nil inter (start start-time length len)		(setf inst (item (items [1 2][2 3][3 4][1 3][1 4][2 4] 1 2 3 4 [1 2 3][2 3 4][1 3 4][1 2 4] in random)))		(setf rhythm (item 		))(defun ms (&key (start-time 1.)(my-scorefile "pace1_1.sco"))	(let* ((myheader (header "f 1 0 16384 10 1"					"f2 0 16385 5 1 16384 .0001"					"f3 0 8193 5 1 8192 .0001")))	(fheader my-scorefile myheader)	(merge all ()		(a 1 100)		(b 1.01 100)		(c 1.03 100)	)	(open-cmd my-scorefile)	(mix-cmd "all")))