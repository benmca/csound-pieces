;This file creates a notelist that can be used with either;jcvoi.orc (3 carrier FM voice) or jcvoi-filt.orc (a reson filter;version using three filters.(defvar fnc nil)  ;; fnc[sex,vowel,formant number,formant freq,amp or fm index](defvar vibfreqfun nil)(defvar i3fun1 nil)(defvar i3fun2 nil)(defun flipxy (env)  (loop for y in env by #'cddr and            x in (cdr env) by #'cddr    collect x    collect y))(defun fillfnc ()  (when (null fnc)    (setf fnc (make-array '(3 6 4 4) :initial-element nil))    (setf vibfreqfun (make-array 3 :initial-element nil))    (setf i3fun1 (make-array 3 :initial-element nil))    (setf i3fun2 (make-array 3 :initial-element nil))    (setf (aref fnc 1 1 1 1) (flipxy '(350  130.8 524  261.6 392  392 523 523.2 784 784 1046 1064 1568 1568)))    (setf (aref fnc 1 1 1 2) (flipxy '(.3   130.8   .8 261.6   .9 392  .9 523.2  .7 784   .86 1064 .86  1568)))    (setf (aref fnc 1 1 1 3) (flipxy '(1.4  130.8  1.4 261.6  1.0 392  .8 523.2  .5 784   .3 1064 .2 1568)))    (setf (aref fnc 1 1 2 1) (flipxy '(1100 130.8 1100 261.6 1100 392 1200 523.2 1500 784 1800 1064 2200 1568)))    (setf (aref fnc 1 1 2 2) (flipxy '(.1   130.8   .2 261.6   .3 392   .3 523.2   .1 784  .05 1064 .05  1568)))    (setf (aref fnc 1 1 2 3) (flipxy '(1.0  130.8  1.0 261.6   .4 392   .4 523.2   .2 784   .2 1064 .1 1568)))    (setf (aref fnc 1 1 3 1) (flipxy '(3450 130.8 3400 261.6 3400 392 3600 523.2 4500 784 5000 1064 5800 1568)))    (setf (aref fnc 1 1 3 2) (flipxy '(.04  130.8  .04 261.6  .04 392 .045 523.2  .03 784  .02 1064 .02  1568)))    (setf (aref fnc 1 1 3 3) (flipxy '(3.5  130.8  2.0 261.6  1.5 392  1.2 523.2   .8 784   .8 1064 1.0  1568)))    (setf (aref fnc 1 2 1 1) (flipxy '(175  130.8 262  261.6 392  392 523 523.2 784 784 1046 1064 1568 1568)))    (setf (aref fnc 1 2 1 2) (flipxy '(.25  130.8   .6 261.6   .6 392  .6 523.2  .7 784   .86 1064 .86  1568)))    (setf (aref fnc 1 2 1 3) (flipxy '(0.5  130.8  0.3 261.6  0.1 392 .05 523.2 .04 784  .03 1064 .02 1568)))    (setf (aref fnc 1 2 2 1) (flipxy '(2900 130.8 2700 261.6 2600 392 2400 523.2 2300 784 2200 1064 2100 1568)))    (setf (aref fnc 1 2 2 2) (flipxy '(.01  130.8  .05 261.6  .08 392   .1 523.2   .1 784  .1  1064 .05  1568)))    (setf (aref fnc 1 2 2 3) (flipxy '(1.5  130.8  1.0 261.6  1.0 392  1.0 523.2  1.0 784  1.0 1064 .5 1568)))    (setf (aref fnc 1 2 3 1) (flipxy '(4200 130.8 3900 261.6 3900 392 3900 523.2 3800 784 3700 1064 3600 1568)))    (setf (aref fnc 1 2 3 2) (flipxy '(.01  130.8  .04 261.6  .03 392 .03  523.2  .03 784  .03 1064 .02  1568)))    (setf (aref fnc 1 2 3 3) (flipxy '(1.2  130.8   .8 261.6   .8 392   .8 523.2   .8 784   .8 1064 .5  1568)))    (setf (aref fnc 1 3 1 1) (flipxy '(175  130.8 262  261.6 392  392 523 523.2 784 784 1046 1064 1568 1568)))    (setf (aref fnc 1 3 1 2) (flipxy '(.3   130.8   .7 261.6   .8 392  .6 523.2  .7 784   .86 1064 .86  1568)))    (setf (aref fnc 1 3 1 3) (flipxy '(0.4  130.8  0.2 261.6  0.4 392 .4  523.2 .7  784  .5  1064 .2  1568)))    (setf (aref fnc 1 3 2 1) (flipxy '(1000 130.8 1000 261.6 1100 392 1200 523.2 1400 784 1800 1064 2200 1568)))    (setf (aref fnc 1 3 2 2) (flipxy '(.055 130.8  .1  261.6  .15 392  .13 523.2   .1 784  .1  1064 .05  1568)))    (setf (aref fnc 1 3 2 3) (flipxy '(0.3  130.8  0.4 261.6  0.4 392  0.4 523.2  0.3 784  0.2 1064 0.1  1568)))    (setf (aref fnc 1 3 3 1) (flipxy '(2600 130.8 2600 261.6 3000 392 3400 523.2 4500 784 5000 1064 5800 1568)))    (setf (aref fnc 1 3 3 2) (flipxy '(.005 130.8  .03 261.6  .04 392  .04 523.2  .02 784  .02 1064 .02  1568)))    (setf (aref fnc 1 3 3 3) (flipxy '(1.1  130.8  1.0 261.6  1.2 392 1.2  523.2  0.8 784  0.8 1064 1.0  1568)))    (setf (aref fnc 1 4 1 1) (flipxy '(353  130.8 530  261.6 530  392 523 523.2 784 784 1046 1064 1568 1568)))    (setf (aref fnc 1 4 1 2) (flipxy '(.5   130.8   .8 261.6   .8 392  .6 523.2  .7 784   .86 1064 .86  1568)))    (setf (aref fnc 1 4 1 3) (flipxy '(0.6  130.8  0.7 261.6  1.0 392 0.8 523.2  .7 784  .5  1064 .2  1568)))    (setf (aref fnc 1 4 2 1) (flipxy '(1040 130.8 1040 261.6 1040 392 1200 523.2 1400 784 1800 1064 2200 1568)))    (setf (aref fnc 1 4 2 2) (flipxy '(.050 130.8  .05 261.6  .1  392  .2  523.2   .1 784  .1  1064 .05  1568)))    (setf (aref fnc 1 4 2 3) (flipxy '(0.1  130.8  0.1 261.6  0.1 392  0.4 523.2  0.3 784  0.2 1064 0.1  1568)))    (setf (aref fnc 1 4 3 1) (flipxy '(2695 130.8 2695 261.6 2695 392 3400 523.2 4500 784 5000 1064 5800 1568)))    (setf (aref fnc 1 4 3 2) (flipxy '( .05 130.8  .05 261.6  .04 392  .04 523.2  .02 784  .02 1064 .02  1568)))    (setf (aref fnc 1 4 3 3) (flipxy '(1.2  130.8  1.2 261.6  1.2 392 1.2  523.2  0.8 784  0.8 1064 1.0  1568)))    (setf (aref fnc 1 5 1 1) (flipxy '(175  130.8 262  261.6 392  392 523 523.2 784 784 1046 1064 1568 1568)))    (setf (aref fnc 1 5 1 2) (flipxy '(.4   130.8   .4 261.6   .8 392  .8 523.2  .8 784   .8 1064 .8   1568)))    (setf (aref fnc 1 5 1 3) (flipxy '(0.1  130.8  0.1 261.6  0.1 392 0.1 523.2  .0 784  .0  1064 .0  1568)))    (setf (aref fnc 1 5 2 1) (flipxy '( 350 130.8  524 261.6  784 392  950 523.2 1568 784 2092 1064 3136 1568)))    (setf (aref fnc 1 5 2 2) (flipxy '(.8   130.8  .8  261.6  .4  392  .2  523.2   .1 784  .1  1064 .0   1568)))    (setf (aref fnc 1 5 2 3) (flipxy '(0.5  130.8  0.1 261.6  0.1 392  0.1 523.2  0.0 784  0.0 1064 0.0  1568)))    (setf (aref fnc 1 5 3 1) (flipxy '(2700 130.8 2700 261.6 2500 392 2450 523.2 2400 784 2350 1064 4500 1568)))    (setf (aref fnc 1 5 3 2) (flipxy '( .1  130.8  .15 261.6  .15 392  .15 523.2  .15 784  .1  1064 .1   1568)))    (setf (aref fnc 1 5 3 3) (flipxy '(2.0  130.8  1.6 261.6  1.6 392 1.6  523.2  1.6 784  1.6 1064 1.0  1568)))    (setf (aref fnc 2 1 1 1) (flipxy '( 33   16.5  33   24.5  33 32.7  49  49.0  65 65.41    98   98 131 130.8)))    (setf (aref fnc 2 1 1 2) (flipxy '( .3   16.5  .5   24.5  .6 32.7  .5  49.0  .47 65.41   .135 98 .2  130.8)))    (setf (aref fnc 2 1 1 3) (flipxy '(2.4   16.5  2.0  24.5 1.8 32.7 1.6  49.0  1.5 65.41    1.2 98 .8  130.8)))    (setf (aref fnc 2 1 2 1) (flipxy '(400   16.5  400  24.5 400 32.7  400 49.0 400 65.41    400  98 400 130.8)))    (setf (aref fnc 2 1 2 2) (flipxy '( .2   16.5  .2   24.5 .35 32.7  .37 49.0  .4  65.41   .6   98 .8  130.8)))    (setf (aref fnc 2 1 2 3) (flipxy '(6.0   16.5  5.0  24.5 4.0 32.7 3.0  49.0  2.7 65.41    2.2 98 1.8  130.8)))    (setf (aref fnc 2 1 3 1) (flipxy '(2142  16.5  2142 24.5 2142 32.7 2142 49.0 2142 65.41 2142 98 2142 130.8)))    (setf (aref fnc 2 1 3 2) (flipxy '(.02   16.5  .025 24.5 .05  32.7  .09 49.0  .13 65.41  .29 98 .4  130.8)))    (setf (aref fnc 2 1 3 3) (flipxy '(9.0   16.5  8.0  24.5 7.2  32.7 5.5  49.0  3.9 65.41   3.0 98 1.8  130.8)))    (setf (aref fnc 2 2 1 1) (flipxy '( 33   16.5  33   24.5  33 32.7  49  49.0  65  65.41    98  98 131 130.8)))    (setf (aref fnc 2 2 1 2) (flipxy '( .75  16.5  .83  24.5 .91 32.7 .91  49.0  .91 65.41   .79  98 .67 130.8)))    (setf (aref fnc 2 2 1 3) (flipxy '(2.5   16.5  2.5  24.5 2.5 32.7 2.1  49.0  1.8 65.41    1.4 98 1.0  130.8)))    (setf (aref fnc 2 2 2 1) (flipxy '(1500  16.5 1500 24.5 1500 32.7 1500 49.0 1500 65.41   1500 98 1500 130.8)))    (setf (aref fnc 2 2 2 2) (flipxy '( .01  16.5  .02  24.5 .02 32.7  .02 49.0  .02 65.41   .08  98 .08 130.8)))    (setf (aref fnc 2 2 2 3) (flipxy '(1.5   16.5  1.37 24.5 1.25 32.7 1.07 49.0 0.9 65.41    0.7 98 0.5  130.8)))    (setf (aref fnc 2 2 3 1) (flipxy '(2300  16.5  2300 24.5 2300 32.7 2325 49.0 2350 65.41 2375 98 2400 130.8)))    (setf (aref fnc 2 2 3 2) (flipxy '(.05   16.5  .065 24.5 .70  32.7  .07 49.0  .07 65.41  .16 98 .2  130.8)))    (setf (aref fnc 2 2 3 3) (flipxy '(11.0  16.5  10.0 24.5 10.0 32.7 7.7  49.0  5.4 65.41   3.7 98 2.0  130.8)))    (setf (aref fnc 2 3 1 1) (flipxy '( 33   16.5  33   24.5  33 32.7  49  49.0  65  65.41    98  98 131 130.8)))    (setf (aref fnc 2 3 1 2) (flipxy '( .75  16.5  .83  24.5 .87 32.7 .88  49.0  .90 65.41   .87  98 .85 130.8)))    (setf (aref fnc 2 3 1 3) (flipxy '(1.4   16.5  1.4  24.5 1.4 32.7 1.4  49.0  1.4 65.41    1.4 98 1.4  130.8)))    (setf (aref fnc 2 3 2 1) (flipxy '( 450  16.5  450 24.5  450 32.7  450 49.0  450 65.41    450 98 450 130.8)))    (setf (aref fnc 2 3 2 2) (flipxy '( .01  16.5  .02  24.5 .08 32.7 .065 49.0  .05 65.41   .05  98 .05 130.8)))    (setf (aref fnc 2 3 2 3) (flipxy '(3.0   16.5  2.6  24.5 2.1  32.7 1.75 49.0 1.4 65.41   1.05 98 0.7  130.8)))    (setf (aref fnc 2 3 3 1) (flipxy '(2100  16.5  2100 24.5 2100 32.7 2125 49.0 2150 65.41 2175 98 2100 130.8)))    (setf (aref fnc 2 3 3 2) (flipxy '(.05   16.5  .05  24.5 .05  32.7  .05 49.0  .05 65.41 .075 98 .1  130.8)))    (setf (aref fnc 2 3 3 3) (flipxy '( 9.0  16.5   8.0 24.5  7.0 32.7 4.5  49.0  2.1 65.41  1.75 98 1.4  130.8)))    (setf (aref fnc 2 4 1 1) (flipxy '( 33   16.5  33   24.5  33 32.7  49  49.0  65  65.41    98  98 131 130.8)))    (setf (aref fnc 2 4 1 2) (flipxy '( .35  16.5  .40  24.5 .43 32.7 .47  49.0  .50 65.41   .57  98 .45 130.8)))    (setf (aref fnc 2 4 1 3) (flipxy '(1.4   16.5  1.4  24.5 1.0 32.7 1.0  49.0  1.0 65.41    1.1 98 1.0  130.8)))    (setf (aref fnc 2 4 2 1) (flipxy '( 300  16.5  300 24.5  300 32.7  300 49.0  300 65.41    300 98 300 130.8)))    (setf (aref fnc 2 4 2 2) (flipxy '( .75  16.5  .80  24.5 .85 32.7 .90  49.0  .95 65.41   .99  98 .99 130.8)))    (setf (aref fnc 2 4 2 3) (flipxy '(3.0   16.5  2.5  24.5 2.0  32.7 1.9  49.0 1.8 65.41   1.65 98 0.25 130.8)))    (setf (aref fnc 2 4 3 1) (flipxy '(2200  16.5  2200 24.5 2200 32.7 2225 49.0 2250 65.41 2275 98 2300 130.8)))    (setf (aref fnc 2 4 3 2) (flipxy '(.02   16.5  .02  24.5 .02  32.7 .035 49.0  .05 65.41 .07  98 .05  130.8)))    (setf (aref fnc 2 4 3 3) (flipxy '( 5.0  16.5   4.0 24.5  3.0 32.7 2.8  49.0  2.6 65.41  1.9  98 1.2  130.8)))    (setf (aref fnc 2 5 1 1) (flipxy '(175   16.5  262  24.5 392 32.7  523 49.0  784 65.41  1046  98 1568 130.8)))    (setf (aref fnc 2 5 1 2) (flipxy '( .40  16.5  .40  24.5 .80 32.7 .80  49.0  .80 65.41   .80  98 .80 130.8)))    (setf (aref fnc 2 5 1 3) (flipxy '(0.1   16.5  0.1  24.5 0.1 32.7 0.1  49.0  0.0 65.41    0.0 98 0.0  130.8)))    (setf (aref fnc 2 5 2 1) (flipxy '( 350  16.5  524 24.5  784 32.7  950 49.0 1568 65.41   2092 98 3136 130.8)))    (setf (aref fnc 2 5 2 2) (flipxy '( .80  16.5  .80  24.5 .40 32.7 .20  49.0  .10 65.41   .10  98 .00 130.8)))    (setf (aref fnc 2 5 2 3) (flipxy '(0.5   16.5  0.1  24.5 0.1  32.7 0.1  49.0 0.0 65.41   0.0  98 0.0  130.8)))    (setf (aref fnc 2 5 3 1) (flipxy '(2700  16.5  2700 24.5 2500 32.7 2450 49.0 2400 65.41 2350 98 4500 130.8)))    (setf (aref fnc 2 5 3 2) (flipxy '(.10   16.5  .15  24.5 .15  32.7 .15  49.0  .15 65.41 .10  98 .10  130.8)))    (setf (aref fnc 2 5 3 3) (flipxy '( 2.0  16.5   1.6 24.5  1.6 32.7 1.6  49.0  1.6 65.41  1.5  98 1.0  130.8)))    ;; these are vibrato frequencies functions (pitch dependent);    (setf (aref vibfreqfun 1) (flipxy '(4.5 138.8 5 1568)))    (setf (aref vibfreqfun 2) (flipxy '(4.5  16.5 5 130.8)))    ;; these are index functions for cascade modulater (pitch dependent);    (setf (aref i3fun1 1) (flipxy '(4 138.8 4 784 1 1568)))    (setf (aref i3fun1 2) (flipxy '(4  16.5 4 65.41 1 130.8)))    (setf (aref i3fun2 1) (flipxy '(.4 138.8 .1 1568)))    (setf (aref i3fun2 2) (flipxy '(.4  16.5 .1 130.8)))))(defun fncval (ptr pitch)  (interp pitch ptr))(defobject fm-voice (csound-note)  ((name :initform "i11")  dur pitch amp idev idev0 idev1 iform1freq iform2freq iform3freq   iform1dev iform2dev iform3dev iform1amp iform2amp iform3amp ivibfreq skewpc glissfun glissamnt loc revamnt)  (:parameters name time dur pitch amp idev idev0 idev1 iform1freq iform2freq iform3freq   iform1dev iform2dev iform3dev iform1amp iform2amp iform3amp ivibfreq skewpc glissfun glissamnt loc revamnt))(defparameter *totaldur* 0)(defun testvoi (startingtime)  (fillfnc)  (algorithm nil fm-voice (start startingtime)    (vars  (c 261.62)          vowel sex ampref vibfreq (skewscl .01)          form1 form2 form3 fmntfreq1 fmntfreq2 fmntfreq3          amp1 amp2 amp3 formscl1 formscl2 formscl3          caramp1sc caramp2sc caramp3sc          scdev1 scdev2 scdev3 indx0 (indx1 1)          i3 dev dev0 dev1)    (setf rhythm (item (items (items .25 for 8) (items 1))))    (setf pitch (item (pitches (intervals 0 2 4 5 7 5 4 2 0 from                                          (pitches f4 fs g gs a as b c5 cs d ds e f))                               for 13)  :kill t))    (setf vowel (item (items (items 1 for 9) (items 2 for 9) (items 3 for 9) (items 4 for 9) (items 5 for 9))))    (setf sex 1)    (setf amp 1)    (setf ampref (expt amp .8))    (setf vibfreq (fncval (aref vibfreqfun sex) pitch))    (setf skewpc (if (= sex 1)                 (* (sqrt (+ .1 (* .05 ampref (- 1568 130.8)))) skewscl)                 (* (sqrt (+ .1 (* .05 ampref (- 130.8 16.5)))) skewscl)))    (setf glissfun 2)    (setf glissamnt .01)    (setf form1 (/ (fncval (aref fnc sex vowel 1 1) pitch) pitch))    (setf form2 (/ (fncval (aref fnc sex vowel 2 1) pitch) pitch))    (setf form3 (/ (fncval (aref fnc sex vowel 3 1) pitch) pitch))    (setf fmntfreq1 (round form1))    (setf fmntfreq2 (round form2))    (setf fmntfreq3 (round form3))    (setf amp1 (sqrt amp))    (setf amp2 (expt amp 1.5))    (setf amp3 (* amp amp))    (setf formscl1 (abs (- form1 fmntfreq1)))    (setf formscl2 (abs (- form2 fmntfreq2)))    (setf formscl3 (abs (- form3 fmntfreq3)))    (setf caramp1sc (* (fncval (aref fnc sex vowel 1 2) pitch) (- 1 formscl1) amp1))    (setf caramp2sc (* (fncval (aref fnc sex vowel 2 2) pitch) (- 1 formscl2) amp2))    (setf caramp3sc (* (fncval (aref fnc sex vowel 3 2) pitch) (- 1 formscl3) amp3))    (setf scdev1 (fncval (aref fnc sex vowel 1 3) pitch))    (setf scdev2 (fncval (aref fnc sex vowel 2 3) pitch))    (setf scdev3 (fncval (aref fnc sex vowel 3 3) pitch))    (setf indx0 (if (or (= vowel 3) (= vowel 4)) 0 1.5))    (setf i3 (if (< pitch (/ c 2)) (fncval (aref i3fun1 sex) pitch) (fncval (aref i3fun2 sex) pitch)))    (setf dev (* i3 pitch))    (setf dev0 (* indx0 pitch))    (setf dev1 (* (- indx1 indx0) pitch))    (setf dur rhythm)    (setf idev dev) (setf idev0 dev0) (setf idev1 dev1)    (setf iform1freq fmntfreq1) (setf iform2freq fmntfreq2) (setf iform3freq fmntfreq3)    (setf iform1dev scdev1) (setf iform2dev scdev2) (setf iform3dev scdev3)    (setf iform1amp caramp1sc) (setf iform2amp caramp2sc) (setf iform3amp caramp3sc)    (setf ivibfreq vibfreq)    (setf loc (item (items .1 .2 .3 .4 .5 .6 .7 .8 .9 in palindrome)))    (setf revamnt .07)    (setf *totaldur* (max (+ time dur) *totaldur*))))(defobject reverb (csound-note)  ((name :initform "i99") mystart dur revtime)  (:parameters name mystart dur revtime))(defun make-rev-note (&key (revtime 2.))  (algorithm nil reverb (start 10000 length 1 revtime revtime rhythm 0)    (setf mystart 0)    (setf dur (+ revtime *totaldur* 1))    ))(defun ms (&key (starting-time 1.)                        (filename "jcvoi.sco"))  (let* ((header (header                  "f1 0 16384 10 1"                  "f11 0 16384 9 1 1 90"                  "f2 0 17 -7 0 16 .1"                  "f3 0 17 -7 0 16 -.1")))    (fheader filename header)    (setf *totaldur* 0)    (merge all ()           (testvoi starting-time)           (make-rev-note))    (write-cs "all" :filename filename)))