(in-package :stella)(defparameter *totaldur* 0);(defobject quick (csound-note)  ((instr :initform "i") inst dur amp)  (:parameters instr inst time dur amp));;(defobject revnote (csound-note);  ((name :initform "i99") mystart dur revtime);  (:parameters name mystart dur revtime));(defun bass (st len)  (algorithm nil quick (start st length len)	(in-tempo 320) 	(setf inst 1)	(setf rhythm (item (rhythms q q q e e e e s s s (rhythms 256 for 32) in heap)))	(setf dur rhythm)	(setf amp 1);	(if (= rhythm (rhythm 256));		(setf amp 1);		(setf amp (item (items 1  in heap)));		)));(defun snare (st len)  (algorithm nil quick (start st length len)	(in-tempo 320) 	(setf inst 2)	(setf rhythm (item (rhythms e e e e e s s s s s s 12 12 24 24 24 (rhythms 128 for 16) in heap)))	(setf dur rhythm)	(if (= rhythm (rhythm 256))		(setf amp 1)		(setf amp (item (items 1 .7 .4 in heap)))		)));(defun hat (st len)  (algorithm nil quick (start st length len)	(in-tempo 140) 	(setf inst 3)	(setf rhythm (item (rhythms q)))	(setf dur rhythm)	(setf amp 1)));;(defun mrn (&key (revtime 10.));  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0);	     (setf mystart 0);	     (setf dur (+ revtime *totaldur* 1));	     ));(defun ms (&key (start-time 1.)(my-scorefile "c:/Ben/dnb2.sco"))  (let* ((myheader (header "f 1 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)    (merge all ()	    (bass 1 200)		(snare 1 200)		(hat 1 60)            )    (open-cmd my-scorefile)	(mix-cmd "all")))