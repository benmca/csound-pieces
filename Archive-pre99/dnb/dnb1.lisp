(in-package :stella)(defparameter *totaldur* 0);(defobject quick (csound-note)  ((instr :initform "i") inst dur)  (:parameters instr inst time dur));;(defobject revnote (csound-note);  ((name :initform "i99") mystart dur revtime);  (:parameters name mystart dur revtime));(defun test1 (st len)  (algorithm nil quick (start st length len)	(in-tempo 220) ;    (setf inst (item (items 1 2 3 in random)));    (setf rhythm (item (rhythms q q q e (rhythms 128 for 24) in heap tempo (tempo 220))))	(setf inst 2)	(setf rhythm (item (rhythms (rhythms 128 for 64))))    (setf dur rhythm);    (setf pitch (item (pitches e2 b e3 a in heap)));    (setf amp (between 1000 5000));    (setf begtim (between 0 10));    (setf *totaldur* (max (+ time dur) *totaldur*))));;(defun mrn (&key (revtime 10.));  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0);	     (setf mystart 0);	     (setf dur (+ revtime *totaldur* 1));	     ));(defun ms (&key (start-time 1.)(my-scorefile "c:/Ben/dnb1.sco"))  (let* ((myheader (header "f 1 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)    (merge all ()	    (test1 1 64)            )    (open-cmd my-scorefile)	(mix-cmd "all")))