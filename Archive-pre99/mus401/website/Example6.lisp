(in-package :stella);The "defscale" function in Common Music makes it easy to;define your own scales and then use them with "pitches";in an item-stream.;Just Intonation Scale(defscale just-tone          (:lowest-pitch 16.351597  :octave-ratio (cents 1200)           :number-of-octaves 10           :suboctave-enharmonic 'bs :superoctave-enharmonic 'cf)  ((c cn bs) :scaler (cents 0))  ((cs df) :scaler (cents 92))  ((d cn) :scaler (cents 182))  ((ds ef) :scaler (cents 294))  ((e en ff) :scaler (cents 386))  ((f fn es) :scaler (cents 498))  ((fs gf) :scaler (cents 590))  ((g gn) :scaler (cents 702))  ((gs af) :scaler (cents 792))  ((a an) :scaler (cents 884))  ((as bf) :scaler (cents 996))  ((b bn cf) :scaler (cents 1088)));Thirteen Tone Equal Temperament Scale(defscale thirteen-equal          (:lowest-pitch 16.351597 :octave-ratio (cents 1200)           :number-of-octaves 10           )  (c cn bs)  (cs df)  (d cn)  (ds ef)  (e en ff)  (f fn es)  (fs gf)  (g gn)  (gs af)  (a an)  (as bf)  (bx)  (b bn cf))(defobject trumpet (csound-note)        ((instr :initform "i8") dur amp pitch modindex)        (:parameters instr time dur amp pitch modindex));Make three chromatic scales using standard 12-tone,;just-intonation, and 13-tone scales.(defun trump1 (mystart)   (algorithm nil trumpet (start mystart)     (setf rhythm .4)     (setf dur rhythm)     (setf pitch (item (items        (pitches a4 as b c5 cs d ds e f fs g gs a r)        (pitches  a4 as b c5 cs d ds e f fs g gs a r of (find-scale 'just-tone))        (pitches a4 as bx b c5 cs d ds e f fs g gs a                                of (find-scale 'thirteen-equal))) :kill t))     (setf amp (between .3 .7))     (setf modindex (max 1.0 (* amp 2.5)))));Make "major" triads using the three different scales.;Notice the use of "vars" below to define local variables;within the algorithm.(defun trump2 (mystart)   (algorithm nil trumpet (start mystart)     (vars (thirt (find-scale 'thirteen-equal))           (just (find-scale 'just-tone)))     (unless-chording       (setf rhythm (item (items 1 .5)))       (setf dur rhythm))     (setf pitch (item (items         (pitches [a4 cs5 e] r)         (pitches  [a4 cs5 e] r of just)         (pitches [a4 cs5 e] of thirt)) :kill t))     (setf amp .3)     (setf modindex 1.5)))(defun make-score (&key (start-time 1.)                        (filename "trumpet.sco"))  (let* ((header (header "f 1 0 16384 10 1"                         "f 2 0 4097 9 .5 1 0"                         "f 3 0 4097 7 0 2048 1 2048 .8")))    (fheader filename header)    (merge all (start start-time)      (trump1 0)      (trump2 21))    (write-cs "all" :filename filename)))