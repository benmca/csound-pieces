Release Notes for 4.06
======================

These are the release notes for version 4.06.  A lot has changed, and
in places my notes are less than explicit.  Major change is in
multiple channel audio.  The maximum number of channels is increased
to 256, and there are opcodes for reading and writing many channels.
Related there are the VBAP family of opcodes which allow for
positioning and moving of sound between members of an array of
speakers.

I have been playing with Tcl/Tk having had to teach it this last term,
and I have a set of on-screen sliders which can control an instrument,
not through MIDI.  As this is a first attempt there may be
opportunities for better versions.  The interface is such that any
Python fans, or indeed any other system could be used instead.  At
present it assumes the existence of wish and the TK sources are
hardwired.  This will change when i have thought about it.

Bug Fixes
---------

In reading scores it was possible to get an overflow condition which
gave really odd errors.


Language Changes
----------------

In scansys opcodes it is now possible to select the interpolation
order with a new optional i-rate argument.  The default is 4 (as it
was previously) but there are reports that cubic (3) or quadratic (2)
sounds better, and is certainly faster.

Maximum number of audio channels in now 256

File names in FGENS 23 and 28 are now expanded relative to a number of
directories.


Opcode Fixes
------------

Bug in ADSR fixed.

vpvoc now checks things more carefully

schedule now behaves with negative triggers


New Opcodes 
-----------

outx, out32 and outch, outz for multi-channel output

inx, in32 and inc, inz similar for input

vbap family of opcodes added (vbap4, vbap8, vbap16, vbapz, vbaplsinit,
vbap4move, vbap8move, vbap16move, vbapzmove) 

control, setcntrl now available for UNIX, and any operating system
with Tcl/Tk (perhaps)

pinkish to generate pink noise

seqtime, trigseq -- Handle timed-sequences of groups of values stored
into tables. 


Other Changes:
-------------

OS2 code now incorporated into sources

Soundfont code reworked

There is a small Tcl/Tk program to build matrices for the scanned
synthesis opcodes -- matrix.tk

GUI Changes
-----------

In Windows, Heartbeat option 3 writes information to title bar

In Unix implementations there are now on-screen sliders for real-time
control of Csound, using the control opcode.

------------------------------------------------------------------------
==John ff
  2000 March 
========================================================================
    ar  pinkish  xin[, imethod, inumbands, iseed, iskip]

Generates approximately pink noise (-3dB/oct response) by two
different methods: A multirate noise generator due to Moore, coded by
Martin Gardner, or a filter bank designed by Paul Kellet. 

PERFORMANCE
ar - pink noise. 
xin - For Gardner method: k- or a-rate amplitude.
        For Kellet filters: normally a-rate uniform random noise from
        rand (31-bit) or unirand, but can be any a-rate signal.
        The output peak value varies widely (15%) even over long runs,
        and will usually be well below the input amplitude. Peak
        values may also occasionally overshoot input amp/noise. 
imethod - (optional) selects filter method. 
        =0 Gardner method (default).
        =1 Kellet filter bank.
        =2 A somewhat faster filter bank by Kellet, with less accurate
        response.
inumbands - (optional) only effective with Gardner method. The number
        of noise bands to generate. Maximum is 32, minimum is
        4. Higher levels give smoother spectrum, but above 20 bands
        there will be almost DC-like slow fluctuations.  Default value
        is 20. 
iseed - (optional) only effective with Gardner method. If non-zero,
        seeds the random generator. If zero, the generator will be
        seeded from current time. Default is 0. 
iskip - (optional) if non-zero, skip (re)initialisation of internal
        state (useful for tied notes).  Default is 0.

pinkish attempts to generates pink noise (ie noise with equal energy
in each octave),  by either of two different methods.

The first method, by Moore/Gardner, adds several (up to 32) signals of
white noise, generated at octave rates (sr, sr/2, sr/4 etc). It gets
pseudo-random values from an internal 32-bit generator, which is local
to each opcode instance and seedable (similarly to rand).

The second method is a lowpass filter with hardcoded response
approximating -3dB/oct. If input is uniform white noise, it outputs
pink noise. Any signal may be used as input for this method.  The high
quality filter is slower, but has less ripple and slightly wider
operating frequency range than the "economy" version. With the Kellet
filters, seeding is not used.

The Gardner method output has some bumps and dips in the low-mid and
mid-high frequency ranges. It can be set to generate more
low-frequency energy by increasing the number of bands. It is also a
bit faster.  The Kellet filter (refined) has very smooth spectrum, but
a more limited effective range, and the level increases slightly at
the high end of the spectrum.

EXAMPLE
Kellet-filtered noise for a tied note (iskip is non-zero).

    awhite unirand 2.0
    awhite = awhite - 1.0         ; Normalize to +/-1.0
    apink pinkish awhite, 1, 0, 0, 1
        out apink * 30000
------------------------------------------------------------------------

        outx    a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af
        out32   a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af, \
                ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au
        outc    a1[, a2,....]
        outch   k1, a1, k2, a2, ....
        outz    k1

outx and out32 output 16 and 32 channels of audio.
outc outputs as many channels as provided.  Any channels greater than
nchnls are ignores, and zeros are added as necessary
outch outputs a1 on channel k1, a2 on channel k2 and so on.
outz outputs from a ZAK array, for nchnls of audio

------------------------------------------------------------------------
a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af inx
a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af, \
ag, ah, ai, aj, ak, al, am, an, ao, ap, aq, ar, as, at, au in32
a1  inch  k1
    inz   k1

inx and in32 read 16 and 32 channel inputs
inch reads from a numbered channel k1 into a1
inz reads audio samples in nchnls into a ZA array starting at k1

------------------------------------------------------------------------

vbaplsinit, vbap4, vbap8, vbap16
vbap4move, vbap8move, vbap16move

                   vbaplsinit  idim, ils_amount, idir1, idir2,... 
 a1, a2, a3, a4    vbap4       asig, iazi,iele, ispread
 a1, a2, a3, a4, a5, a6, a7, a8   vbap8      asig, iazi,iele, ispread
 a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 \
                   vbap16      asig, iazi,iele, ispread

 a1, a2, a3, a4    vbap4move  asig, ispread, ifld_amount, ifld1, ifld2, ...
 a1, a2, a3, a4, a5, a6, a7, a8   \
                   vbap8move  asig, ispread, ifld_amount, ifld1, ifld2, ...
 a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16
                   vbap16move  asig, ispread, ifld_amount, ifld1, ifld2, ...


Distribute an audio signal amongst 2 to 16 channels with localization control.

INITIALIZATION

idim - dimensionality, 2 or 3.
 
ils_amount - number of loudspeakers. In two dimensions the number can
vary between two to 16. In three dimensions the number can vary
between three and 16.
 
idirn - directions of loudspeakers, number of directions must be less
or equal than 16. In two-dimensional loudspeaker positioning idirn is
the azimuth angle respective to nth channel.  In three-dimensional
loudspeaker positioning fields are the azimuth and elevation angles of
each loudspeaker consequently (azi1, ele1, azi2, ele2,...).
 
asig - audio signal to be panned.
 
iazi - azimuth angle of the virtual source.
 
iele  - elevation angle of the virtual source
 
ispread - spreading of the virtual source (range 0 - 100).  If value
is zero, conventional amplitude panning is used. When value is
increased, the amount of loudspeakers used in panning gets larger. If
value is 100, the sound is applied to all loudspeakers.
  

ifld_amount - number of fields (absolute value must be 2 or larger).
If ifld_amount is positive, the virtual source movement is a polyline
specified by given directions, each transition is performed in an
equal time interval. If ifld_amount is negative, specified angular
velocities are applied to the virtual source during specified relative
time intervals (see below).

 
ifldn - Azimuth angles or angular velocities, and relative durations
of movement phases (see below).
 

PERFORMANCE

vbap4, vbap8 and vbap16 take an input signal asig and distribute it
amongst at two to 16 outputs according to the controls iazi and iele
and configured loudspeaker placement.  If idim = 2, iele is set to
zero. The distribution is performed using Vector Base Amplitude
Panning (VBAP) [1].  VBAP distributes the signal using loudspeaker
data configured with vbaplsinit. The signal is applied at most to two
loudspeakers in 2-D loudspeaker configurations and to three
loudspeakers in 3-D loudspeaker configurations. If the virtual source
is panned outside the region spanned by loudspeakers, nearmost
loudspeakers are used in panning.


vbap4move, vbap8move and vbap16move allow moving virtual sources to be
applied. If ifld_amount is positive, the fields represent directions
of virtual sources and equal times, iazi1, [iele1,] iazi2, [iele2,]
....  The position of the virtual source is interpolated between
directions starting from first direction and ending to last. Each
interval is interpolated in time that is fraction total_time /
number_of_intervals of the duration of the sound event.


If ifld_amount is negative, the fields represent angular velocities
and equal times. The first field is however the starting direction,
iazi1, [iele1,] iazi_vel1, [iele_vel1,] iazi_vel2, [iele_vel2,]
.... Each velocity is applied to the note that is fraction total_time
/ number_of_velocities of the duration of the sound event.  If the
elevation of the virtual source becomes greater than 90 degrees or
less than 0 degrees, the polarity of angular velocity is changed. Thus
the elevational angular velocity produces a virtual source that moves
up and down between 0 and 90 degrees.

EXAMPLE

2-D panning example with stationary virtual sources
         sr = 44100
         kr = 441
         ksmps = 100
         nchnls = 4
         vbaplsinit 2, 6,  0, 45, 90, 135, 200, 315, 
         instr     1	                             ;parameter
	 asig oscil 20000, 440, 1                    ; p4 = azimuth 
a1, a2, a3, a4, a5, a6, a7, a8	vbap8	asig, p4, 0, 20 
	 outq     a1,a2,a3,a4
;        outq     a5,a6,a7,a8
         endin

References
[1] Ville Pulkki: Virtual Sound Source Positioning Using 
Vector Base Amplitude Panning.
Journal of the Audio Engineering Society,
1997 June, Vol. 45/6, p. 456. 

Implementation by Ville Pulkki
Sibelius Academy Computer Music Studio
Laboratory of Acoustics and Audio Signal Processing 
Helsinki University of Technology
May 2000
------------------------------------------------------------------------

The opcode vbapz and vbabzmove are the multiple channel analogs of the
above opcodes, working an nchnls and using a ZAK array for output.
The limit on the number of channels is 256.

(Coded by JPff from material of Ville Pulkii)
------------------------------------------------------------------------
Sequence-related opcodes (seqtime  and trigseq )

ktrig_out seqtime ktime_unit, kstart, kloop, initndx, kfn_times 
          trigseq  ktrig_in,  kstart,  kloop, initndx,  kfn_values, kout1 [,
                   kout2, kout3, ....,  koutN] 


DESCRIPTION 

Handle timed-sequences of groups of values stored into tables. 

INITIALIZATION 

initndx - initial index 

PERFORMANCE 

ktrig_out - output trigger signal
ktime_unit  - unit of measure of time, related to seconds.
kstart - start index of looped section
kloop - end index of looped section 
kfn_times - number of table containing a sequence of times
kfn_values - numer of a table containing a sequence of groups of values
ktrig_in - input tirgger signal 
kout1 [, kout2, kout3, ....,  koutN] - output values 

These opcodes handle timed-sequences of groups of values stored into
tables. 

seqtime generates a trigger signal (a sequence of impulses, see also
trigger opcode), according to the values stored in kfn_times
table. This table should contain a series of delta-times (i.e. times
beetween to adiacent events). The time units stored into table are
expressed in seconds, but can be rescaled by means of ktime_unit
argument. The table can be filled with GEN02 or by means of an
external text-file containing numbers, with GEN23. It is possible to
start the sequence from a value different than the first, by assigning
to initndx an index different than zero (which corresponds to the
first value of the table). Normally the sequence is looped, and the
start and end of loop can be adjusted by modifying kstart and kloop
arguments. User must be sure that values of these arguments (as well
as initndx) correspond to valid table numbers, otherwise Csound will
crash (because no range-checking is implementeted). It is possible to
disable loop (one-shot mode) by assigning the same value both to
kstart and kloop arguments. In this case, the last read element will
be the one corresponding to the value of such arguments.  Table can be
read backward by assigning a negative kloop value.  It is possible to
trigger two events almost at the same time (actually separated by a
k-cycle) by giving a zero value to the corresponding delta-time.
First element contained in the table should be zero, if the user
intend to send a trigger impulse it immediately after the orchestra
instrument containing seqtime opcode

trigseq accepts a trigger signal (ktrig_in) as input and outputs group
of values (contained into kfn_values table) each time ktrig_in assumes
a non-zero value. Each time a group of values is triggered, table
pointer is advanced of a number of positions corresponding to the
number of group-elements, in order to point to the next group of
values. The number of elements of groups is determined by the number
of koutX arguments. It is possible to start the sequence from a value
different than the first, by assigning to initndx an index different
than zero (which corresponds to the first value of the
table). Normally the sequence is looped, and the start and end of loop
can be adjusted by modifying kstart and kloop arguments. User must be
sure that values of these arguments (as well as initndx) correspond to
valid table numbers, otherwise Csound will crash (because no
range-checking is implementeted). It is possible to disable loop
(one-shot mode) by assigning the same value both to kstart and kloop
arguments. In this case, the last read element will be the one
corresponding to the value of such arguments. Table can be read
backward by assigning a negative kloop value.

trigseq is designed to be used together with seqtime or trigger opcodes. 

Example: 

	instr	1
icps	cpsmidi
iamp	ampmidi	5000
ktrig	seqtime	1,       1,          10,      0,   1
trigseq	ktrig, 0, 10, 0, 2, kdur, kampratio, kfreqratio
	schedkwhen	ktrig, -1, -1, 2, 0, kdur, kampratio*iamp, kfreqratio*icps
	endin


	instr  2
**** put here your intrument code *******
	out	a1
	endin
------------------------------------------------------------------------
