(in-package :stella) (defparameter *totaldur* 0)(defparameter i 0)(defparameter du 0)(defparameter idx 0)(defparameter idur 0) (defparameter idxdur 0) (defparameter overalltempo 0) ; (defobject soundin (csound-note)   ((instr :initform "i1") inst dur idx pan dist pct pitch amp)   (:parameters instr time dur idx pan dist pct pitch amp))(defobject soundwarp (csound-note)  ((instr :initform "i2") dur amp pitch pan dist pct istr iendx indx iatck)  (:parameters instr time dur amp pitch pan dist pct istr iendx indx iatck))(defobject revnote (csound-note)  ((name :initform "i99") mystart dur revtime)  (:parameters name mystart dur revtime));;  (:parameters instr time dur amp pitch pan dist pct istr iendx indx iatck));(defun pitchalg1 (st len pn tem am rot)  (algorithm nil soundwarp (start st length len)    (setf pitch (item (items                        (pitches c3 cs (d weight 1) ds e f fs g gs a as b   in random for 50)                        (pitches c1 cs (d weight 1) ds e f fs g gs a as b c3 cs (d weight 1) ds e f fs g gs a as b in random for 50)                        (pitches c1 cs (d weight 1) ds e f fs g gs a as b c2 cs (d weight 1) ds e f fs g gs a as b c3 cs (d weight 1) ds e f fs g gs a as b in random for 50))))    (setf rhythm (item	          (items                    (items (rhythms q e e. s s. 32 64 in random tempo (tempo tem) for 100))	            (items (rhythms q e e e e s s s e. e. in heap tempo (tempo tem)) for 3)	            (items (rhythms q q s e s s e s q e. e q e s in rotation		                    change (changes start '(0 1) step rot) tempo (tempo tem)) for 3)	            (items (rhythms (12 weight 5) (6 weight 3) (32 weight 2) in random tempo (tempo tem)) for 10)	            )))    (setf dur (* rhythm (between 1 2)))    (if (= pn 100)      (setf pan (between 50 70))      (setf pan pn))    (setf dist 10)    (setf pct .01)    (setf amp (between .5 1))    (setf indx 0)    (setf iendx .3);19.882 for guitara, .37 for gnawa    (setf iatck .03)    (setf istr 1)    (setf *totaldur* (max (+ time dur) *totaldur*))));;(defun mrn (&key (revtime 20.))  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)	     (setf mystart 0)	     (setf dur (+ revtime *totaldur* 1))	     )) ; (defun ms (&key (start-time 1.)(my-scorefile "gtrnote1.sco"))   (let* ((myheader (header ""                     "f 1 0 262144 1 \"gnawa.aif\" 0 0 0"                    "f 8 0 32768 9 .5 1 0"			   )))    (fheader my-scorefile myheader)     (merge all () ;;function proto:;(defun loop1/2 (st len pn tem am rot);      (pitchalg1 1 150 1 40 1 5)      (pitchalg1 1 150 45 40 1 5)      (pitchalg1 1 150 89 40 1 5)      (mrn)            )    (open-cmd my-scorefile) 	(mix-cmd "all")))