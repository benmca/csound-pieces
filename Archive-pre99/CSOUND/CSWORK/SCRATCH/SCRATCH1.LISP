(in-package :stella) (defparameter *totaldur* 0)(defparameter i 0)(defparameter du 0)(defparameter idur 0) (defparameter idxdur 0) (defparameter overalltempo 0) ; (defobject quick (csound-note)   ((instr :initform "i1") inst dur idx pan dist pct pitch amp)   (:parameters instr time dur idx pan dist pct pitch amp))(defobject revnote (csound-note)  ((name :initform "i99") mystart dur revtime)  (:parameters name mystart dur revtime));(defun loop1 (st len pn tem am rot)  (algorithm nil quick (start st length len)    (setf idxdur '((0.029 e) (.284 e) (.598 e.) (1.016 e)(1.267 s) (1.411 e)(1.718 q)                   (2.228 e)(2.505 e)(2.769 e.)(3.21 e)(3.47 s)(3.573 s)(3.741 s)(3.855 s)(3.995 s)(4.151 s)(4.255 s)))    ;18 items, for 'scratch.aif'    (setf i (item (items 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)))    (setf idur (nth i idxdur))	;pick i'th pair out of idxdur    (setf idx (nth 0 idur))		;set idx to 1st element    (setf du (nth 1 idur))		;set dur to 2nd element    (setf dur (rhythm du tem))    (setf rhythm (rhythm du tem));    (setf rhythm (item;	          (items;	            (items (rhythms q e e e e s s s e. e. in heap tempo (tempo tem)) for 3);	            (items (rhythms q q s e s s e s q e. e q e s in rotation;		                    change (changes start '(0 1) step rot) tempo (tempo tem)) for 3);	            (items (rhythms (12 weight 5) (6 weight 3) (32 weight 2) in random tempo (tempo tem)) for 10);	            )));    (setf rhythm (item (rhythms e e e. e e q;                                e e e. e s s s s s s s in heap)))        (setf pitch (* tem .0091));to get pitch adjustment: x times tem = pitch scalar. ;I use .5/half of orig. tem to get scalar    (if (= pn 100)      (setf pan (between 50 70))      (setf pan pn))    (setf dist 10)    (setf pct .01)    (setf amp am)    (setf *totaldur* (max (+ time dur) *totaldur*))));;(defun mrn (&key (revtime 20.))  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)	     (setf mystart 0)	     (setf dur (+ revtime *totaldur* 1))	     )) ; (defun ms (&key (start-time 1.)(my-scorefile "scratch1.sco"))   (let* ((myheader (header "" 			   )))    (fheader my-scorefile myheader)     (merge all () ;;function proto:;(defun loop1 (st len pn tem am rot);      (loop1 1 50 100 110 10 5)      (mrn)            )    (open-cmd my-scorefile) 	(mix-cmd "all")))