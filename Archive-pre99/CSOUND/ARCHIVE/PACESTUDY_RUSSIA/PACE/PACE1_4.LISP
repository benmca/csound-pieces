(in-package :stella)(defobject i1 (csound-note)	((instr :initform "i1") dur amp pitch partial)	(:parameters instr time dur amp pitch partial))(defobject i2 (csound-note)	((instr :initform "i") inst dur amp pitch angle index )	(:parameters instr inst time dur amp pitch angle index ))(defobject inter (csound-note)	((instr :initform "i") inst dur amp pitch angle)	(:parameters instr inst time dur amp pitch angle))(defobject i22 (csound-note)	((instr :initform "i") inst mytime dur amp pitch angle index )	(:parameters instr inst mytime dur amp pitch angle index ))(defun alpha (start-time len ctr)	(algorithm nil i1 (start start-time length len)		(vars (half (* len .5)) )		(setf rhythm (item (rhythms s q e s s q ts tq te in random tempo 1000)))		(setf dur (* rhythm 3))		(setf amp (interpl count 0 0 half 2000 len 0))		(setf pitch (item (items #e(drunk ctr (* ctr .04)) #e(drunk (* 2 ctr) (* (* 2 ctr) .04)) in palindrome) ))		(setf partial (interpl count 0 0.0 len 7.0))		))(defun gong (start-time)	(algorithm nil i2 (start start-time length 6)		(setf rhythm 0)		(setf time start-time)		(setf dur 6)		(setf amp (item (items 5000 5000 3500 3500 3500 3000)))		(setf pitch (item (items 57 112 55 110 165 220)))		(setf inst (item (items 2 2 3 3 3 3)))		(setf index (item (items 6 6 5 5 5 5)))		(setf angle (between 0 90))			))(defun d (start-time len freq dyn)	(algorithm nil i22 (start start-time length (* 6 (+ len 1)))		(setf inst (item (items 2 2 3 3 3 3)))		(setf index (item (items 6 6 5 5 5 5)))			(setf rhythm (item (rhythms q tempo 30)))		(setf dur  (* (* rhythm (between .98 1.02)) 1.8))		(if (>= count (* 6 len))			(setf pitch 0)			(progn				(setf pitch (item (items 57 112 55 110 165 220)))				(setf pitch (* (* pitch (between .99 1.01)) freq))			))		(setf amp (item (items 5 5 3.5 3.5 3.500 3.000)))		(setf amp (* amp (* dyn 90)))		(setf angle (between 0 90))		(if (> 6 count)				(setf mytime start-time))		(if ( or (= (/ count 6) 1) (= (/ count 6) 2) (= (/ count 6) 3) (= (/ count 6) 4) (= (/ count 6) 5) (= (/ count 6) 6) (= (/ count 6) 7) (= (/ count 6) 8)) 			(progn			 	(setf mytime (+ mytime rhythm))				(setf freq (between 1.00 2.00)) 			))		))(defun ms (&key (start-time 1.)(my-scorefile "pace1_4.sco"))	(let* ((myheader (header "f 1 0 16384 10 1"					"f2 0 16385 5 1 16384 .0001"					"f3 0 8193 5 1 8192 .0001")))	(fheader my-scorefile myheader)	(merge all ()		(alpha 1 500 1760) 	)	(open-cmd my-scorefile)	(mix-cmd "all")))