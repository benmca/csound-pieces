MODIFICATIONS OF CSOUND SOURCES FOR CSOUND VST
Michael Gogins
20 January 2002

INTRODUCTION

The following is a guide to the modifications that I have made to the Bath Csound sources in order to build CsoundVST. It does not cover CsoundVST itself.

These modifications apply to version 4.17.

All modifications are designed so they can be included in the canonical sources without changing existing functionality in any way. It is my hope that these modifications will be merged into the Bath sources and become a part of "canonical Csound."

The purpose of these modifications is to provide a Csound application programming interface (API) with a C language binding that can be used to build other software.

The Csound API is declared in csound.h, and implemented in csound.c and with some changes throughout the code.

It is my hope that  all other versions of Csound will base themselves on this API, thus improving the chances for continued life of the Csound code base and reducing the amount of work that Csound developers (such as myself, Gabriel Maldonado, Matt Ingalls, and the unofficial Linux build) must do to use Csound in their projects. The effects of the modifications are as follows:

The API uses exclusively Matt Ingalls' host-driven playevents function. I recommend that the old playevents function be removed from the code so that future development ensures that the one playevents function will meet all needs.

The API always implements and uses the RESET capabilities introduced by Richard Dobson and further improved by me in this build. I recommend that the #ifdefs for RESET be removed and that the reset functionality becomes a permanent feature of Csound, again to ensure the future maintenance of this code, which is becoming more frequently used.

The API implements the automatic detection and loading of plugin opcodes. This has been implemented and tested on Windows, and the code is written to facilitate implementations on other operating systems.

The API provides hooks for plugging in user-defined message and exception handling functions.

The API provides hooks for user-defined external MIDI input (this is used by CsoundVST).

The API provides for moving playback in a score to its beginning or to a specified point in time.

The API introduces a new SUBR dopadr member to the OENTRY and OPDS structures. This is a pointer to a function that, if not null, is called by orcompact during cleanup on all allocated opcode instances. This function enables opcode programmers to use their
own memory management and to free allocated memory when this function is called. I use this function when I write opcode implementations in C++, to delete the opcode implementation objects during cleanup.

THE ACTUAL CHANGES

All changes to existing sources are #ifdef'd as follows:

#ifdef SSOUND
// the modifications (if any) made for CsoundVST
#else
// the exact code (if any) that existed before modification.
#endif

Changes can thus be located by grepping for SSOUND. The previous state of the code can be recovered exactly by deleting the #ifdef directives and the SSOUND modifications.

A detailed explanation of each change can be found in the comments to the code. Most new or changed files are in the Modifications subdirectory.

The following existing files have been modified:

cs.h
Modifications/argdecode.c
Modifications/cscorfns.c
Modifications/fgens.c
Modifications/filopen.c
Modifications/getstring.c
Modifications/load_opcodes.c
Modifications/main.c
Modifications/memalloc.c
Modifications/midirecv.c
Modifications/musmon.c
Modifications/one_file.c
Modifications/sfont.c
Modifications/window.c


The following new files have been added:

csound.h
csound.c
Modifications/load_opcodes.c


