/**
* S I L E N C E
* 
* An auto-extensible system for making music on computers by means of software alone.
* Copyright (c) 2001 by Michael Gogins. All rights reserved.
*
* L I C E N S E
*
* This software is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This software is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this software; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
* P U R P O S E
*
* Implements functions whose declarations were generated by mprep from csound.ml in csound_mprep.c.
*/
#include <CsoundVST/CsoundVST.h>
#include <CsoundvST/CsoundView.h>
#include <mathlink.h>

CsoundVST *csoundVST;
CsoundView *csoundView;

/**
* Attaches the Csound GUI to the MathLink window.
*/
extern "C" void fillParentWindowWithCsoundView(HWND parentWindow)
{
	//	Create the CsoundVST object.
	csoundVST = CreateCsoundVST();
	//	Get the editor.
	csoundView = (CsoundView *)csoundVST->getEditor();
	//	Find the size the editor wants to be.
	ERect *childRect;
	csoundView->getRect(&childRect);
	//	Create the CsoundVST editor as a child window that fills the parent window.
	csoundView->open((void *)parentWindow);
	RECT parentRect;
	GetWindowRect(parentWindow, &parentRect);
	MoveWindow(parentWindow, parentRect.left, parentRect.top, childRect->right + 8, childRect->bottom + 30, true);
}

extern "C" void loadCommandLine(char *commandLine)
{
	// Load any Cound files specified on the command line or via shell open.
	int argc;
	char **argv;
	scatterArgs(commandLine, &argc, &argv);
	for(int arg = 0; arg < argc; arg++)
	{

		std::string argument = argv[arg];
		if(argument.find(".csd") != -1 || argument.find(".orc") != -1 || argument.find(".sco") != -1 || argument.find(".mid") != -1
		   || argument.find(".CSD") != -1 || argument.find(".ORC") != -1 || argument.find(".SCO") != -1 || argument.find(".MID") != -1)
		{
			trimQuotes(argument);
			if(argument.find(".csd") != -1)
			{
				csoundVST->load(argument);
			}
			else
			{
				csoundVST->import(argument);
			}
			csoundView->updateView();
		}
	}
	deleteArgs(argc, argv);
};	

extern "C" HWND getCsoundViewWindowHandle(void)
{
	return ((CsoundView *) csoundVST->getEditor())->getWindowHandle();
}

extern "C" int csoundMathLinkNew(void)
{
	csoundVST->removeAll();
	csoundVST->getView()->updateView();
	return 1;
}

extern "C" int csoundMathLinkNewScore(void)
{
	csoundVST->removeScore();
	csoundVST->getView()->updateView();
	return 1;
}

extern "C" int csoundMathLinkOpen (const char *filename_)
{
	std::string filename = filename_;
	csoundVST->removeAll();
	int returnValue = csoundVST->load(filename);
	csoundVST->getView()->updateView();
	return returnValue;
}

extern "C" int csoundMathLinkImport(const char *filename_)
{
	std::string filename = filename_;
	int returnValue = csoundVST->import(filename);
	csoundVST->getView()->updateView();
	return returnValue;
}

extern "C" int csoundMathLinkSave(void)
{
	int returnValue = csoundVST->save(csoundVST->getFilename());
	return returnValue;
}

extern "C" int csoundMathLinkSaveAs(const char *filename_)
{
	std::string filename = filename_;
	int returnValue = csoundVST->save(filename);
	return returnValue;
}

extern "C" int csoundMathLinkPerform(void)
{
	int returnValue = csoundVST->exportForPerformance();
	csoundVST->csoundPerform();
	return returnValue;
}

extern "C" int csoundMathLinkStop(void)
{
	csoundVST->stop();
	return 1;
}

extern "C" int csoundMathLinkPlay(void)
{
	csoundVST->shellPlaySoundfile();
	return 1;
}

extern "C" int csoundMathLinkEdit(void)
{
	csoundVST->shellEditSoundfile();
	return 1;
}

extern "C" char *csoundMathLinkGetText(void)
{
	std::string text = csoundVST->getXML();
	return strdup(text.c_str());
}

extern "C" void csoundMathLinkSetText(const char *text_)
{
	std::string text = text_;
	csoundVST->setXML(text);
	csoundVST->getView()->updateView();
}

extern "C" char* csoundMathLinkGetCommand(void)
{
	std::string text = csoundVST->getCommand();
	return strdup(text.c_str());
}

extern "C" int csoundMathLinkSetCommand(const char * text_)
{
	std::string text = text_;
	csoundVST->setCommand(text);
	csoundVST->getView()->updateView();
	return text.length();
}

extern "C" char* csoundMathLinkGetOrchestra(void)
{
	std::string text = csoundVST->getOrchestra();
	return strdup(text.c_str());
}

extern "C" int csoundMathLinkSetOrchestra(const char *text_)
{
	std::string text = text_;
	csoundVST->setOrchestra(text);
	csoundVST->getView()->updateView();
	return text.length();
}

extern "C" char* csoundMathLinkGetScore(void)
{
	std::string text = csoundVST->getScore();
	return strdup(text.c_str());
}

extern "C" int csoundMathLinkSetScore(const char *text_)
{
	std::string text = text_;
	csoundVST->setScore(text);
	csoundVST->getView()->updateView();
	return text.length();
}

extern "C" int csoundMathLinkAddScoreLine(const char *line_)
{
	std::string line = line_;
	csoundVST->addScoreLine(line);
	return line.length();
}

static char staticBuffer[0x200];

extern "C" int csoundMathLinkAddNote(double* _tp1, long _tpl1)
{
	std::string note = "i";
	for(long i = 0; i < _tpl1; i++)
	{
		_gcvt(_tp1[i], 10, staticBuffer);
		note += " ";
		note += staticBuffer;
	}
	csoundVST->addScoreLine(note);
	return note.length();
}


