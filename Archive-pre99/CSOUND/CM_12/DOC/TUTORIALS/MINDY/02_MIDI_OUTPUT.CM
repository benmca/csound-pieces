
(let ((.save-external-forms. t)
      node34
      node33
      node32
      node31
      node30
      node29
      node28
      node27
      node26)
  (make-object 'network
               :id
               'midi-output
               :extent
               (xy 221 359)
               :terminal-size
               (xy 4 4)
               :browser-size
               (xy 0 0)
               :node-font
               '("Monaco" 9 :plain :srcor)
               :activation-mode
               ':forward
               :active?
               nil
               :inputs
               (make-link-array 0)
               :outputs
               (make-link-array 0)
               :view-position
               (xy 0 35)
               :view-size
               (xy 221 359))
  (setf node34
        (make-object 'comment
                     :comment
                     "Activate Network, then click timer to start; command-click timer to stop."
                     :font
                     '("Times" 10 :plain :srcor)
                     :inputs
                     (make-link-array 0)
                     :outputs
                     (make-link-array 0)
                     :view-position
                     (xy 12 111)
                     :view-size
                     (xy 209 31)))
  (setf node33
        (make-object 'midiout
                     :inputs
                     (make-link-array 12)
                     :outputs
                     (make-link-array 12)
                     :view-position
                     (xy 60 338)
                     :view-size
                     (xy 61 21)))
  (setf node32
        (make-object 'delay-line
                     :wait
                     62
                     :inputs
                     (make-link-array 13)
                     :outputs
                     (make-link-array 13)
                     :view-position
                     (xy 95 231)
                     :view-size
                     (xy 68 21)))
  (setf node31
        (make-object 'operator
                     :operator
                     (op (key) (make-note-on 0 key 64))
                     :args
                     '(~)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)
                     :view-position
                     (xy 40 266)
                     :view-size
                     (xy 56 21)))
  (setf node30
        (make-object 'operator
                     :operator
                     (op (key) (make-note-off 0 key 127))
                     :args
                     '(~)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)
                     :view-position
                     (xy 105 269)
                     :view-size
                     (xy 56 21)))
  (setf node29
        (make-object 'pattern
                     :pattern
                     (make-instance
                       'cyclic-degree-stream
                       :items
                       (list 'c4 'd4 'ds4 'f4 'g4 'gs4 'as4 'c5)
                       :for
                       8)
                     :inputs
                     (make-link-array 9)
                     :outputs
                     (make-link-array 9)
                     :view-position
                     (xy 55 196)
                     :view-size
                     (xy 50 21)))
  (setf node28
        (make-object 'timer
                     :rate
                     90
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)
                     :view-position
                     (xy 55 153)
                     :view-size
                     (xy 41 21)))
  (setf node27
        (make-object 'operator
                     :operator
                     (op (val) (floor (* val 0.7)))
                     :args
                     '(~)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)
                     :view-position
                     (xy 110 195)
                     :view-size
                     (xy 56 21)))
  (setf node26
        (make-object 'comment
                     :comment
                     "A Timer activares a cyclic Pattern to continually play a C-minor scale. The Pattern propagates its current note to two forward nodes: the left side operator creates a note on and sends it to the MidiOut; the delay-line delays the note value for a specifed duration and then sends a noteOff to the MidiOut.   The delay duration is calculated as .7 the rate of the timer."
                     :font
                     '("Times" 10 :plain :srcor)
                     :inputs
                     (make-link-array 0)
                     :outputs
                     (make-link-array 0)
                     :view-position
                     (xy 11 7)
                     :view-size
                     (xy 210 99)))
  (link-nodes 'propagate
              node32
              node30
              :from-index
              4
              :to-index
              2
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node31
              node33
              :from-index
              4
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node30
              node33
              :from-index
              1
              :to-index
              10
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node29
              node32
              :from-index
              8
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node29
              node31
              :from-index
              0
              :to-index
              3
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'activate node28 node29 :from-index 3 :to-index 3)
  (link-nodes 'propagate
              node28
              node27
              :from-index
              0
              :to-index
              3
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'delta)
  (link-nodes 'update
              node27
              node32
              :from-index
              3
              :to-index
              6
              :to-slot
              'delta
              :from-slot
              'value)
  (add-objects (list node34
                     node33
                     node32
                     node31
                     node30
                     node29
                     node28
                     node27
                     node26)
               (find-object 'midi-output)
               nil
               :copy-first
               nil)
  (find-object 'midi-output))