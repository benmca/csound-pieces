<blueData version='2.5.14'>
  <projectProperties>
    <title></title>
    <author>author</author>
    <notes> csound -d -b1024 -B2048 -+rtaudio=jack -odac:alsa_pcm:playback_ </notes>
    <sampleRate>44100</sampleRate>
    <ksmps>2</ksmps>
    <channels>2</channels>
    <useZeroDbFS>false</useZeroDbFS>
    <zeroDbFS>1</zeroDbFS>
    <diskSampleRate>44100</diskSampleRate>
    <diskKsmps>2</diskKsmps>
    <diskChannels>2</diskChannels>
    <diskUseZeroDbFS>false</diskUseZeroDbFS>
    <diskZeroDbFS>1</diskZeroDbFS>
    <useAudioOut>true</useAudioOut>
    <useAudioIn>false</useAudioIn>
    <useMidiIn>false</useMidiIn>
    <useMidiOut>false</useMidiOut>
    <noteAmpsEnabled>true</noteAmpsEnabled>
    <outOfRangeEnabled>true</outOfRangeEnabled>
    <warningsEnabled>true</warningsEnabled>
    <benchmarkEnabled>true</benchmarkEnabled>
    <advancedSettings> csound -d -odac1</advancedSettings>
    <completeOverride>true</completeOverride>
    <fileName></fileName>
    <askOnRender>false</askOnRender>
    <diskNoteAmpsEnabled>true</diskNoteAmpsEnabled>
    <diskOutOfRangeEnabled>true</diskOutOfRangeEnabled>
    <diskWarningsEnabled>true</diskWarningsEnabled>
    <diskBenchmarkEnabled>true</diskBenchmarkEnabled>
    <diskAdvancedSettings>-o c:\\Progra~1\\Csound\\snd\\2.wav</diskAdvancedSettings>
    <diskCompleteOverride>true</diskCompleteOverride>
    <diskAlwaysRenderEntireProject>false</diskAlwaysRenderEntireProject>
  </projectProperties>
  <arrangement>
    <instrumentAssignment arrangementId='1' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Clean Click</name>
        <comment>TimeSignal1.wav:

	</comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig    soundin &quot;Z:\Portfolio\snd\ShortwaveSounds\TimeSignals\CleanClick1.wav&quot;

a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='2' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Click with Swell</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig    soundin &quot;Z:\Portfolio\snd\ShortwaveSounds\TimeSignals\Click2_Swell.wav&quot;

a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='3' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>On the hour sample</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>
idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig    diskin &quot;Z:\Portfolio\snd\ShortwaveSounds\TimeSignals\OnTheHour_Distorted.wav&quot;, ipitch

a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='4' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>On the hour stretch</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 32768
ipitch = p5
ipan = p6
idist = p7
ipct = p8

ifn1 = 4
ifn2 = 5
ibeg = 0
iwsize = 4410
irandw = 882
ioverlap = 15
itimemode = 1

kamp 	linen 	iamp, .001, idur, .001
ktime 	linseg	0, idur, .848

asig    sndwarp	 kamp, ktime, ipitch, ifn1, ibeg, iwsize,  irandw, ioverlap, ifn2, itimemode


a1, a2	locsig  asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='199' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>reverb</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>a1	reverb	ga1, 5
a2	reverb	ga2, 5
	outs	a1,a2

ga1 = 0
ga2 = 0</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
  </arrangement>
  <mixer>
    <enabled>false</enabled>
    <extraRenderTime>0.0</extraRenderTime>
    <channelList list='channels'>
      <channel>
        <name>1</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072753' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>2</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='680597751' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>3</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='680597757' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>4</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='776543176' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>199</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072739' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
    </channelList>
    <channelList list='subChannels'/>
    <channel>
      <name>Master</name>
      <outChannel>Master</outChannel>
      <level>0.0</level>
      <muted>false</muted>
      <solo>false</solo>
      <effectsChain bin='pre'/>
      <effectsChain bin='post'/>
      <parameter uniqueId='-1855072737' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false' value='0.0'>
        <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
          <linePoint x='0.0' y='0.0'/>
        </line>
      </parameter>
    </channel>
  </mixer>
  <tables>;sine
f 1 0 16384 10 1

;saw
f 2 0 256 7 0 128 1 0 -1 128 0
;pulse?
f 3 0 256 7 1 128 1 0 -1 128 -1

f4 0 131072 1 &quot;Z:\Portfolio\snd\ShortwaveSounds\TimeSignals\OnTheHour_Distorted.wav&quot; 0 0 0 

;half sine
f5 0 16384 9 .5 1 0</tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc>ga1 init 0
ga2 init 0
			</globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <opcodeList/>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
    <commandLineEnabled>true</commandLineEnabled>
    <commandLineOverride>true</commandLineOverride>
    <liveObjectBins columns='1' rows='8'>
      <bin>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
        <null/>
      </bin>
    </liveObjectBins>
    <liveObjectSetList/>
    <repeat>4</repeat>
    <tempo>60</tempo>
  </liveData>
  <score>
    <tempo>
      <enabled>false</enabled>
      <visible>false</visible>
      <line name='' version='2' max='240.0' min='30.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
        <linePoint x='0.0' y='60.0'/>
      </line>
    </tempo>
    <timeState>
      <pixelSecond>16</pixelSecond>
      <snapEnabled>true</snapEnabled>
      <snapValue>1.0</snapValue>
      <timeDisplay>1</timeDisplay>
      <timeUnit>1</timeUnit>
    </timeState>
    <noteProcessorChain/>
    <soundObject type='blue.soundObject.PolyObject'>
      <subjectiveDuration>2.0</subjectiveDuration>
      <startTime>0.0</startTime>
      <name>root</name>
      <backgroundColor>-10066279</backgroundColor>
      <timeBehavior>0</timeBehavior>
      <noteProcessorChain/>
      <isRoot>true</isRoot>
      <defaultHeightIndex>2</defaultHeightIndex>
      <timeState>
        <pixelSecond>64</pixelSecond>
        <snapEnabled>false</snapEnabled>
        <snapValue>1.0</snapValue>
        <timeDisplay>0</timeDisplay>
        <timeUnit>5</timeUnit>
      </timeState>
      <soundLayer name='Basic' muted='false' solo='false' heightIndex='2'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.External'>
          <subjectiveDuration>14.0</subjectiveDuration>
          <startTime>0.0</startTime>
          <name>External</name>
          <backgroundColor>-12566464</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <text>;**************************************************************
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))


(defun 1stLine(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
              (items
		(rhythms e s s s s     s s s    s q e  tempo(tempo tem))
		(rhythms s e s s s     s s s    s q e  tempo(tempo tem))
              )
	))
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur  rhythm )
	(setf inst (item (items 3 3 1 3 3 1 2 1   1 1 1 )))
	(setf inst (item (items 3 3 1 3 3 1 2 1   1 1 1 )))
	(if (= inst 3)
		(setf pitch .25)
		(setf pitch 1)
	)
	(setf amp 
		(item (items 
			(items (items 1 for 8)	(items 0 for 3))	
	)))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 1)
	(setf pct .05)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)



;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
	   	(1stLine 0 60 0 (* 32 5) 1)
	   	(1stLine 0 60 90 (* 32 5) 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
          <commandLine>C:\Users\ben\cm\clisp\lisp.exe  -M C:\Users\ben\cm\clisp\cm.mem </commandLine>
          <syntaxType>Python</syntaxType>
        </soundObject>
      </soundLayer>
      <soundLayer name='2nd line' muted='false' solo='false' heightIndex='2'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.External'>
          <subjectiveDuration>2.0</subjectiveDuration>
          <startTime>16.0</startTime>
          <name>External</name>
          <backgroundColor>-12566464</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <text>;**************************************************************
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))






(defun 2ndLine(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
              (items
		(rhythms s e e. in random tempo(tempo tem))
              )
	))
	(setf dur  rhythm )
	(setf inst (item (items 1 2 3 in random)))
	(if (= inst 3)
		(setf pitch (item (items .25 .5 1  1.5  in random)))
		(setf pitch 1)
	)
	(setf amp 
		(item (items 
			(items 1)	
	)))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist (between 5.0 10.0))
	(setf pct .05)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)


;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
	   	(2ndLine 0 180 30 (* 32 15) 1)
	   	(2ndLine 0 180 60 (* 32 15) 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
          <commandLine>C:\Users\ben\cm\clisp\lisp.exe  -M C:\Users\ben\cm\clisp\cm.mem </commandLine>
          <syntaxType>Python</syntaxType>
        </soundObject>
      </soundLayer>
      <soundLayer name='' muted='false' solo='false' heightIndex='2'>
        <noteProcessorChain/>
        <soundObject type='blue.soundObject.External'>
          <subjectiveDuration>2.0</subjectiveDuration>
          <startTime>24.0</startTime>
          <name>External</name>
          <backgroundColor>-12566464</backgroundColor>
          <timeBehavior>2</timeBehavior>
          <noteProcessorChain/>
          <text>;**************************************************************
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))






(defun melody(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
              (items
		(rhythms s e e. in random tempo(tempo tem))
              )
	))
	(setf dur  rhythm )
	(setf inst 4)
	(setf pitch (item (items 1 .25 .5 .75 2)))
	(setf amp 
		(item (items 
			(items 1)	
	)))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist (between 5.0 10.0))
	(setf pct .05)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)


;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
	   	(melody 0 60 30 (* 32 15) 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
          <commandLine>C:\Users\ben\cm\clisp\lisp.exe  -M C:\Users\ben\cm\clisp\cm.mem </commandLine>
          <syntaxType>Python</syntaxType>
        </soundObject>
      </soundLayer>
      <soundLayer name='' muted='false' solo='false' heightIndex='2'>
        <noteProcessorChain/>
      </soundLayer>
    </soundObject>
  </score>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
  <renderEndTime>-1.0</renderEndTime>
  <markersList/>
  <loopRendering>false</loopRendering>
  <midiInputProcessor>
    <keyMapping>PCH</keyMapping>
    <velMapping>MIDI</velMapping>
    <pitchConstant></pitchConstant>
    <ampConstant></ampConstant>
    <scale>
      <scaleName>12TET</scaleName>
      <baseFrequency>261.62558</baseFrequency>
      <octave>2.0</octave>
      <ratios>
        <ratio>1.0</ratio>
        <ratio>1.0594631</ratio>
        <ratio>1.122462</ratio>
        <ratio>1.1892071</ratio>
        <ratio>1.2599211</ratio>
        <ratio>1.3348398</ratio>
        <ratio>1.4142135</ratio>
        <ratio>1.4983071</ratio>
        <ratio>1.587401</ratio>
        <ratio>1.6817929</ratio>
        <ratio>1.7817974</ratio>
        <ratio>1.8877486</ratio>
      </ratios>
    </scale>
  </midiInputProcessor>
</blueData>