(in-package :stella)(defparameter *totaldur* 0);(defobject quick (csound-note)  ((instr :initform "i") inst dur amp)  (:parameters instr inst time dur amp));;(defobject revnote (csound-note);  ((name :initform "i99") mystart dur revtime);  (:parameters name mystart dur revtime));(defun bassnare (st len);length 16  (algorithm nil quick (start st length len)	(setf inst (item (items 4 3 3 3 4 3 3 3 5 5 6 6 5 6 6 7)))	(setf rhythm (item (rhythms s tempo (tempo 100))))	(setf dur rhythm)	(setf amp (item (items 5 4 4 4 5 4 4 4 0 6 0 3 0 3 3 4 )))));;(defun hat (st len)  (algorithm nil quick (start st length len)	(setf inst 1)	(setf rhythm (item (rhythms s tempo (tempo 100))))	(setf dur rhythm)	(setf amp 2)));;;;(defun mrn (&key (revtime 10.));  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0);	     (setf mystart 0);	     (setf dur (+ revtime *totaldur* 1));	     ));(defun ms (&key (start-time 1.)(my-scorefile "c:/Ben/loop3.sco"))  (let* ((myheader (header "f 1 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)    (merge all ()            )    (open-cmd my-scorefile)	(mix-cmd "all")))