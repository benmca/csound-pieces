Features and bug fixes from CM 1.2 (27.3.98)

o New version of Mi_D support.
  1 *midi-preferences* is superceded by *midi-default-connections*
  2 see the new MIDI documentation, in particular the entries on
    - *midi-default-channel-map* and *midi-default-route-map*
    - *midi-default-max-logical-channels*, *midi-default-max-routes*, 
      *midi-default-max-connections*, *midi-default-max-mappings* and
      *midi-default-queue-size*
o Dictionary has been completely reorganized and is now frame based.
o New macro DEFMULTI supports sending packets of MIDI program changes.
o New option :NOTE-OFF-STACK to midifile-import. If true (the default)
  then multiple note offs are paired to note ons with the same
  channel using a FIFO scheme, otherwise FILO.
o New *midifile-player* var, can be used to play midifiles in ports
  of CM that do not support a direct connection to the MIDI driver.

Bug fixes:


_____________________________________________________________________

Features and bug fixes from 1.1.0 (18.11.97)

Features:
o Low level MIDI completely reimplemented to use Tobias Kunze's
  portable MIDI library.
o MIDI Meta Messages can now be imported.
o Introducing Mindy, a graphic front end (MCL) to designing networks
  of CLOS objects. To learn more about Mindy,
  load doc/tutorials/mindy/*.cm
o New document doc/contrib/loop.html discusses iteration and loop.
o New help facility: HELP command and "Help..." menu item now try to
  use Netscape to display text.  Help also supports topic searching.
  The CM Dictionary has been reworked to hold all documentation for
  the system including stella command documentation,  midi message
  documentaton (formerly midi.html) and the api (formally api.text).
o MIX and SEQ now allow the optional specification of an output
  stream, which defaults to the the currently open stream.
  mix 1,2 0 play nil              ; mix to currently open stream.
  mix 1,2 0 test.midi play nil    ; mix to test.midi
o New ! command  for history execution. ! repeats a previous input line.
  use ! ? to print the current history. type DOC ! for more information.
o defobject now creates CLM objects without definstrument definitions.
o New containers INFILE and MIDI-INFILE produce output events from 
  a file.
o new MUTE and UNMUTE commands for making objects silent or sounding.
  muted objects dont produce output but still increment time.
o OPEN {thread} creates a "copy stream" that caches all output to {thread}.
o #! (find-object) now works with streams as well as objects. to ensure
  case sensitivity put the file name inside "" , ie #!"test.midi"
o Commands REHASH, LISTEN, SYNTAX, SLISTEN, SWRITE and WRITE have
  been removed.
o parse-rhythm now takes optional errorp argument. default is t.

Bug fixes:
o CENTS now coerces to float to avoid fixnum overflow
o Added RHYTHM method to return item streams unparsed.
o CLM streams now post-process specified options correctly.
o MIDI real-time scheduling now handles time incrementing correctly
o undefined excl::variable-globally-special-p fixed.
o timeing bug on midi-messages to files fixed.
o fixed print-object bug that omitted spaces before pointer display.
o fixed load-cm to not load clm or cmn if directory set but
  not on the syntax list.

_____________________________________________________________________

Features and bug fixes from 1.0.0  (15.7.96)
The main focus for this release has been in adding real time support
to Common Music. Most of this effort has been in optimizing
the scheduler and eliminating all non-explicit memory allocation
in the run time system.  

This work has necessitated the addition of several major new features
and the reworking many of existing primitives:

o New "Working with Algorithms in Real-time" chapter in Stella Tutorial. 
o The scheduler has been optimized and rewritten to use resources and
  now runs conless. See build/benchmarks.text for more information.
o Two system clock modes are now supported: :SECONDS and :MILLISECONDS.
  When the clock mode is :seconds (the default), values for rhythm,
  start, duration, etc. may be expressed as rational or floating
  point time values. If the clock mode is :milliseconds, 
  time value must be expressed in integer milliseconds.
 :Millisecond time mode is consles" and may result in much faster
  system time calculation.
o The new function CLOCK-MODE returns or resets the system clock mode.
  The clock mode defaults to :SECONDS.
o New CLOCK and SCHEDULING options to the OPEN command in stella.
o Rhythm streams now produce integer millisecond values if the clock mode
  is :milliseconds. If clock mode is :seconds, the values returned are 
  now dependant on the tempo factor: an integer tempo produces rational
  rhythmic values, a floating point tempo produces floating point values.
o *standard-tempo* now defaults to 60.0 not 60, so by default the
  system still produces floating point seconds.
0 :return-type made more general and now applies to many functions:
   interp, rescale, expl, explseg, explsegs, tendency, fit.
  If :return-type is not specified, the value returned depends on the
  type of value produced by the calculation iteself so if all X and Y
  values are rational than rational values will be returned. If X or Y
  values are floating point then floating point values are returned.
  :return-type '(float n) rounds the value to n digits.
o New functions EXPLSEG and EXPLSEGS
o *random-range* variable controls how the random pattern calculates
  probabilities.  Set to most-positive-fixnum to enable conless
  probability calculation.

Other new features:

o 32 logical channels of MIDI now supported. Each logical channel
  can be individually routed to 2 ports, 16 channels per port.
o New function MIDI-RECEIVE for MIDI processing. In MCL 3.0 and ACL
  the processing happens asynchronously.  See the RECEIVE command
  in stella or the new "Receive..." window in Capella.
o definstrument supports new :printer argument for specialized
  printing, and :time-parameter for specifying the parameter
  to pass time in.
o New features for midi-note objects:
  1) Duratation is optional, if unset it defaults to rhythm.
  2) Amplitude and Release values have been made consistent:
       Amplitudes >1 are assumed to be integer midi velocities <128
       Releases <1 are assumed to be logical amplitudes.
  3) Amplitude default to 64.
o New rhythm characters: M=Maximum (w*8), L=Long (w*4), B=Breve (w*2)
  The rhythm character D=Double has been removed.
o New macro MESSAGE-CASE for message type conditionalization.
o New function SHUFFLE
o New function SCALE-MEMBER for testing scale reference membership.
o New output syntax M4C (Music 4C).
o New initializer and finalizer slots for event streams. if specified
  they are invoked just before/after streams are opened/closed.
o Removed *compile-algorithms* added compile-algorithm
o DEFMODE now allows modes to be specified by note names.
o Funtions MODE-NOTE, MODE-DEGREE and MODE-PITCH documented.
o TENDENCY allows alternative random generators to be specified.

Bug Fixes:

o Fixed command parser to read strings inside of lists.
o Fixed interval streams to allow rests.
o Fixed real time scheduling to not ignore rests.
o Added fheader back in the system.
o Sprout fixed in Clisp.
o notes default to the middle octave for each substream steam
o unbounded number streams no longer break and have a period of 1.
o MIDI-NOTEs now signal error for out of bounds keynums.
o *standard-chromatic-scale* now defined to 131 notes.
o *rest-pitch* now most-negative-single-float.
 
_____________________________________________________________________

Features and bug fixes from 2.2.96

o Added Timesig and Tempo slots to midi-file streams.
  Default Timesig is 4/4, 24 clocks, 8 32nds
  Default Tempo is 120, as specified by MIDI spec.
o Added Scaled-to slot for clm-sound-file streams.

Bug Fixes:

o Fixed various pathname problems in CLISP DOS port.
o fixed retrograde to handle :chording states
o fixed transpose to handle rests,

_____________________________________________________________________

Features and bug fixes from 26.1.96
o dictionary.html and stella.html split into smaller files for
  easier web browsing. all docs now pass HTML error checks.
o Added OS/2 and WIN32 as features for CLISP. File extensions are 
  currently still handled like dos -- LSP and FSL.
o moved cm.el from examples/ directory to site/ directory.

Bug Fixes:

o Rewrote clm.lisp to not use a class allocated par slot.
  clm-note now uses normal object parameters.
o If bin-directory and cm-directory are the same, the fasl files
  are now stored with the sources instead of in the main directory.
o Fixed build bug in mcl 2.0.1 that didnt require :resources properly
o Fixed CLISP port to load cminit.lisp
o Fixed mk2stella.m to handle score files without info tags (Leigh Smith)

_____________________________________________________________________

Features and bug fixes from 11-1-96.
o All documentation converted to html format. doc/cm.html is
  the Common Music home page.
o make-cm prompts for a site directory for locally customized files.
  If you specify anything other than cm/site, you must move any
  of the scripts you use from cm/site to your site directory.
o transpose and invert now work on lists of notes. if the inversion
  point is NIL then the list is inverted such that it occupies the
  same range as the prime.
o new functions scale-max and scale-min return the highest
  and lowest note referneces in specified notes.
o New slot chanmap for Midi streams allows channel maps to
  be specified. A channel map is a 16 element vector
  that is indexed by midi-note channel to return the
  actual channel for the midi data. A :chanmap argument
  may also be specified to midifile-play.
o new note-type option to import command with midi files. Value
  can be note, pitch, or degree. defaults to degree.
o Midi Play window now uses streams menu.
o CSound Improvements (Tobias Kunze)
  1) added variables *csound-command-string* and
     *soundfile-play-command-string*.  this seems much more useful,
     since people can customize what to use. I reinitialize them to
     "/usr/local/bin/csound" and "/usr/sbin/sfplay -nice", respectively
  2) added "args" slot to the csound-score-file class to be
     able to pass options on the command line, ie:
       Stella [Top-Level]: mix foo 0 args "-o newtest.aiff -A -m0 -d"
 3) play-using-syntax is much more powerful in output file handling.
     options in the args slot override the output slot.
  4) print-object and write-event always output ins slots.
     makes much more sense than adding the ins slot everytime.
  BTW: csound ist 500% mehr efficient with the "CYNTHIA" editor von
  Jean Piche at U MOntreal.

Changes:
o Source directory structure has changed.
o Stella and CM packages have been merged.
o .stella extension has been renamed .cm

Bug Fixes:
o print-object for midi notes now tests to see if the channels
  slot has a value before attempting to print it.

_____________________________________________________________________

Features and bug fixes from 23-11-95.

New Ports:
o MCL 3.0.
o CLISP 1995-08-12, including real time midi on NeXTStep.
  (Thank you Leigh Smith)

Capella:
o New main Common Music menu.
o COMMAND-U keystoke sends musical output from any window to the
  current output stream. Streams are made current either by creating
  them or selecting them from the Streams submenu. Holding the
  command key down when selecting a stream brings up an info browser
  on the stream
o New output editor replaces Seq and Mix worksheets. (Tobias Kunze).
o Info browsers now support output stream editing.
o Single clicks now collapse multiple selections in listings.
o Capella tutorial rewritten.

Stella:
o New CSOUND note class Csound-note implements scorefile output
  for all subclasses. If your note objects inherit from Csound-Note
  then you dont have to define any output methods.  See 
  CSOUND entry in dictionary.rtf for more information.
o Importing Csound .sco files implelemented.  Only straight scores
   at the moment -- no dot-pfields, no octcps statements, no nothing,
   just blanco absolute values. (Thank you Anders Vinjar.)
   See Csound entry in dictionary.rtf for more information.
o New Mix and Seq commands replace Listen, Slisten, Write Swrite.
  Avoid using Listen and SListen, they will disappear in a later
  release.
o Open sets the current output stream to the open file or port.
o New Duplicate command does Copy/Paste for you.
o $ notation no longer necessary in command expressions.  
o New streams no longer prompt for modification.
o Stella tutorial updated.

General:
o Streams completely reimplemented
o Documentation and READMEs updated.
o new function EXPL returns exponential values optionally scaled
  and offset.
o new constructor macro PATHNAMES creates item streams of file names.
  Useful for creating complex patterns in sound file mixes 
  (Anders Vinjar). See dictionary.rtf for more information.
o Replaced system's few explict evals with funcalls.
o Music Kit scorefile importing fixed and improved (Leigh Smith).
  Importing now automaticall creates output stream in stella with
  header slot containing the header of the imported score file. Music
  Kit midi objects named MkMidi in Stella, and now have tempo and
  timeSignature slots.
BUG FIXES:
o Code walker package bugs in ACL4.2/SGI fixed.
_____________________________________________________________________

Features and bug fixes from 8-Aug-95.

GENERAL:
o  build.lisp script can now save image on first pass.
o  stella.rtf tutorial updated and revised.
o  contrib/ directory updated.  goodies.lisp holds a number of new
   utility functions. automata.lisp implements 1 and 2D cellular
   autmomata with many examples including Conways's "Life" game and a
   graphic visualizer for MCL.  random.lisp implements various non
   linear random number generators.
o  New macro DEFMODE creates transposable musical scale modes. All
   system functions now work transparently with modes as well as
   scales. see dictionary.rtf.
o  New function RESCALE maps a specified value to a new domain. see
   dictionary.rtf
o  New function FIT returns shifted value lying between an upper and
   lower bounds by either wrapping or reflecting the value mod the
   boundart range. see dictionary.rtf.
o  New macro WITH-VARS-SNAPSHOTTED creates lexical closures
   over loop variable values.  See stella.rtf and dictionary.rtf.
o  New algorithm macro WITH-PAST-VALUES implements variable value
   histories. See dictionary.rtf and chapter 7 in stella.rtf
o  Algorithm slot names may appear as expressions in item streams.
o  New #e read macro expands to (expr ...)
o  The system now warns only if the class of the object changes when
   an object is redefined.
o  Output errors no longer use modal warnings anymore.
o  FUNCTION-VALUE renamed to INTERP but old name continues to work. 
o  New function TENDENCY implements tendency masks. see dictionary.
o  New comment object displays text and may be placed inside
   threads and merges along with musical data.
o  DEFMULTIPLE-ITEM now returns the first non-nil substate encountered
   when :all was specified as the :element-period. this allows useful 
   state information to be returned from the item when it is not at
   end-of-period.
o  Import now accepts Name argument. Importing midi files accepts
   the additional arguments: Channels, Start, End
o  The "named" item stream constructor option now evaluates its value.
o  The "min" and "max" random item options may now be item streams or 
   exprs.

CLM:
o  stella:definstrument automatically defines an object class
   for the clm instument it creates. see dictionary.rtf.
o  New trace option for CLM soundfile streams.  If true, instrument
   begin times are printed as the soundfile is written.

MIDI:
o  MIDI realtime and file output reimplemented, now several time faster.
o  MIDI level 1 files can now be read, most midifile functions support
   new keyword arguments :start, :end and :track.
o  New "release" slot for Midi-notes defines note off velocity.
o  Midi-notes with R as a note value are interpreted as rests.

SGIMIX:
o  revised implementation of sgimix syntax.

CAPELLA:
o  Envelope editor now allows pasted expressions interp, 
   interpolation, list and quote expressions.
o  Time is now optionally displayable in listing browsers 
o  Window positioning code in capella now made smarter.

Bug Fixes:
o  Pick checks length of sequence.
o  Playscore looks under /usr/local/bin for music kit.
o  Importing midi files now preserves all midi information in the file.
o  Importing midi files now can use a preallocated container.
o  Play-file now parses its options correctly.
o  Interval streams now handles gapped scales correctly

_____________________________________________________________________

Features and bug fixes from 24-Mar-95.
1) CM ported to CMU CL/SGI. Should work in any CMU CL port.
1) CM (re)ported to NeXT/Intel/GCL1.1 and suports midi realtime with
   MusicKit 4.1 thanks to Leigh Smith (leigh@psychokiller.dialix.oz.au)
2) New :MIX syntax for Oyvind Hammer's (oyvindha@notam.uio.no) realtime
   mixing program "mix" on the SGI.  Implemented by Anders Vinjar
   (anders.vinjar@notam.uio.no). Get mix from notam.uio.no:/pub/sgi.
3) Capella improvements:
   a) New graphic envelope editor, supports copy/paste and various
      output formats. Look under Utilities in the Stella menu.
   b) Controls, Icons and Listing views completely reimplemented.
      Listing views are now higly optimized and work well with very
      long sequences of data (2000+ subobjects). Controls now work
      better with color and are more dynamiclly responsive.
   c) New "Play..." option in MIDI submenu for playing Midifiles.
   d) New "Move" Worksheet for positional editing: swapping, rotating,
      shuffling and reversing.

Bug Fixes
1) show-documentation in Stella now fixed. Broken by last release.
2) import-file doesnt drop channel messages. NOT FIXED
3) midifile routines no longer insist on .midi extensions.

_____________________________________________________________________
Features and bug fixes from 24-Jan-95.
1) First release of Capella, a graphical interface for Common Music.
   Capella currently runs only on the Macintosh under MCL 2.0 or higher.
   Just build the system as usual; the saved image will contain a Stella
   menu and you can take it from there. See the Help menu under Capella
   for more information.  Select Load Example to load a little tutorial
   on Capella. Capella is jointly implemented by Tobias Kunze
   (tkunze@ccrma.stanford.edu) and myself.
2) MIDI on the Mac now supports QuickTime MIDI, send problems/suggestions
   to tkunze@ccrma.stanford.edu
3) Midi data now prints with one less space and now memory pointer tag.

Bug Fixes:
1) Fixed bug in archive-object that caused error when time slot unbound.

_____________________________________________________________________

Features and bug fixes from 8-Nov-94.
1) The documentation files under doc/ have been completely reworked,
   examples checked, etc. item-streams.rtf has been completely
   rewritten. dictionary.rtf has new format and new entries:
   defmultiple-item, find-item-stream, midi-note, multiple-item-bind,
   mute, rewrite, sprout and standard-chromatic-scale. scales.rtf and
   most of the stuff under doc/contrib have been thrown out.
2) New REWRITE pattern provides a general term rewriting facility.
   Useful for implementing finite automata, l-systems, etc. See
   dictionary.rtf for more information.  See stella/examples/rewrite.lisp
   for example.
3) Most examples under stella/examples have been checked and updated.
4) GRAPH pattern now warns if you supply a list of ids rather than a
   random item stream of ids.
5) Rhythms and note names now work as default node ids.
6) #i has new pattern char W for rewrite pattern.
7) The LINKED-TO option now evaluates its argument. This is an 
   incompatible change.

Bug Fixed

1) *cm-state*, find-item-stream. map-dta exported from common music
   package.
2) number streams now use local random-states.

___________________________________________________________________

Features and bug fixes from 11-Oct-94.
1) Pathnames may be delimited by "" in commands.
2) New Emacs customization file contrib/cm.el defines indentation
   for Common Music forms.
3) MCL printing-random-thing prints hex.
4) note objects can now be placed directly inside merges.
5) find-object and #! automatically append the found object to the
   current container when used as top level forms in the body of a
   thread, merge or heap definition, 
6) The syntax of PICK changed. Pick now works with any type of
   Lisp sequence or subrange of a sequence, and can avoid direct
   reselection of an element. See dictionary for more
   information. The old version of PICK is now called PICKL (for
   pick list)
7) heaps may now be specified to layout

Bug Fixes:

1) fixed contrib/naturalize.lisp to use map-object not mapref.
2) fixed spelling of sequential-amplitude-stream.
3) exprs now allowed in note, rhythm and ampliutude streams.
4) double definition of csound-sound-file fixed.

___________________________________________________________________

Features and bug fixes from 10-Aug-94.

1) CMusic and CMix syntaxes implemented by Charlie Baker
   (baker@polka.ccmrc.ucsb.edu). The file cm/stella/examples/ks.lisp 
   contains an example cmusic object implementation.
2) New RETROGRADE macro returns the reverse of an item stream period.
3) New documetation files: doc/lispintro.rtf provides an overview
   of the most important characteristics of lisp. doc/lispstyle.rtf
   is a compendium of lisp programming tips.
4) The Run command now takes an INTO {thread} option.  If INTO is specified,
   all events produced by Run will be appended to the contents of
   {thread}, which is the name of a preexisting or a new thread.
5) SListen now allows rests to be placed between the repititions of 
   a single object.
6) Formatting-slots has two new directives.
   1) :decimals formats floating point values to some number of places.
       use :decimals 0 to coerce to integers.
   2) :print-if :always causes unbound slots to appear as "-unset-" 
      in the formatting display. this is better than explicitly 
      providing a :default-value of +slot-unset+.
7) New PICK function randomly selects from a series of choices.
8) Absolute time values can now be specified to musical notes. any object
   that inherits from Element can now have its time set absolutely in one
   of two ways:
	1) specify the time via the "start" initialization arg, ie:
	   (object midi-note start 10 rhythm 2)
        2) set the time slot, then IOR the objects flags using the
           the system constant +absolute+,  ie:
           (setf (slot-value x 'time) 23)
	   (setf (slot-value x 'flags) 
             (logior (slot-value x 'flags) +absolute+))
9) Standard scale now has 10 octaves.
10) Algorithm macroexpansion is improved. Walked code now uses
   symbol-macrolet instead of with-slots, item streams definitions can
   now reference slot values in the running algorithm, vars
   declarations can reference algorithm slot values in binding
   expressions, and warnings are printed for local let variables that
   shadow slot names. 

Bug Fixes:

1)  A bug in the Map command that ignored generators has been fixed.
2)  Midifile-play now sends sysex messages.
3)  Midi-message objects now send sysex messages properly.
__________________________________________________________________

Features and bug fixes from 29 April 1994.

1) Same features as last release, but system has been ported to CLISP,
   sans midi real time. See README.CLISP for more info.
2) Build parameters also simplified.  There is no more default-syntax
   to set: the first syntax listed in syntax automatically becomes
   the default syntax when the system boots up.

___________________________________________________________________

Features and bug fixes from 24 April 1994.

1) Full port of CM to Windows/ACLPC, including real time midi
   implemented by Joe Fosco (b38669@anl.gov).

2) New mapping operator Analyze performs statistical analysis on
   a per slot basis.  For each slot, analyze first displays global
   statistics on the number of descrete values, their min, max and
   average, and then prints a breakdown for each value found its 
   count, percentage and positions. The position information shows
   consective values using a ":" delimiter between the positions.

3) New mapping operators Quantize, Quantize! and Round size slot
   values. Round rounds values to n digits. Quantize fits values to
   be a multiple of a certain step size, Quantize! is like Quantize
   but uses log scaling.



Bug fixes:
1) :TL appears on *features* list.
2) midifile-parse no longer signals an error if it cannot find
   a note on for a given note off. Instead, the note off is simply
   ignored.

___________________________________________________________________

Features and bug fixes from 30 March 1994.

1) Item streams have been completely reimplemented to support a 
   number of new features:

  a) Period lengths of 0 now supported. if an embedded stream sets
     its period to 0 it "disappears" in its superior's pattern until
     its reselected and it sets its period greater than 0. 0 length 
     periods permit all sorts of interesting patterns that were formally
     either impossible or exceedingly difficult to describe. here is a
     very simple example of a cycle whose inner 2 elements occur just
     every third cycle:
	(setf x (items A (items B C for (items 2 0 0)) D))
	(read-items x 20)
	(A B C D A D A D A B C D A D A D)  

  b) New pattern type ROTATION rotates its elements according 
     to an optional "change value" supplied via the CHANGE option.
     See dictionary.rtf for more info. The file 
     stella/examples/change-ringing.lisp contains definitions that
     implement various types of change ringing rotations.

  c) New constructor option COUNTING controls whether a period counts
     subperiods or values. If COUNTING is PERIODS (the default) then
     the number of elements returned in a period is the sum of all
     the subperiod lengths encountered in the period.  this has been
     the normal behavior for item streams in the past. if COUNTING is
     VALUE, the number of elements returned in a period is exactly 
     equal to the period length.

  d) New constructor option TRAVERSING controls whether a stream 
     visits its subitems in depth first or breadth first mode. If
     TRAVERSING is DEPTH (the default) then the pattern is only
     incremented when the current element has returned end of period.
     this has been the normal behavior of item streams in the past. if
     TRAVERSING is BREADTH, then the pattern is incremented after each
     value has been read, regardless of whether or not the subelement 
     is at end of period. (another, less efficient way to impleement 
     traversing breadth would be to set the period lengths of all
     substreams to 1.)

  e) All constructor macros now expand directly to make-instance 
     instead of to intermediate constructor functions.
  
  f) ITEM is roughly 25% faster on the NeXT, depending on pattern and
     datatype. Its only about 5% faster on a MAC IIci.

  g) Palindrome and amplitudes are now represented by true classes.

  Incompatible changes:

  a) VOICINGS removed. Instead, both INTERVALS and STEPS will
     increment their offset in parallel with the pattern if the offset
     is specified using a new ON option instead of FROM. In other words:
	(VOICINGS ... FROM ...) = (INTERVALS ... ON ...)

  b) SERIES are implemented as a subclass of cyclic-interval-stream,
     so the offset changes once each period. (form, modulus and multiple
     change each time the series repeats)

  c) FIRST, INITIALLY and REINITIALLY options removed. This affects
     random, heap and graph patterns.

  d) Default period length for graphs are now the number of nodes.

  e) All constructor functions except make-item-stream removed.

  f) DECRESCENDO renamed DIMINUENDO.


2) Defscale now supports the creation of gapped and general scales
   in addition to equal-tempered. See dictionary.rtf for more info.
   Examples of various types of scales can be found in 
   examples/defscales.lisp

3) New output syntax RT writes input files for Paul Lanske's RT
   sound file mixing program (NeXT only).  Stella also provides a
   a PlayNote object to output rt file statements.  See the
   implementation file stella/rt.lisp for more information. The file 
   stella/examples/rt.stella contains an example algorithm.

4) New global variable *compile-algorithms* controls if stella should
   try to compile the code for an algorithm or generator as it is being 
   defined. defaults to nil. see dictionary.rtf for more info.

5) algorithms now have initialzer and finalizer slots to hold
   functions that you want funcalled just before and just after
   the algorithm has been scheduled.

Bug fixes:

1) Mirror and repeat macros now work properly.

2) cmn output method for midi data now coerces midi notenums to 
   frequency.

3) The Load command doesn't automatically try to compile .lisp files
   when it loads them. if you want this use Load with compile t 
   option.

4) defobject only adds :initargs when necessary.

5) importing music kit scorefiles now works properly.

_____________________________________________________________________

Features and bug fixes from 4-Feb-93.

1) Markov selection using graphs now possible via new item stream
   option PREVIOUS and new function IDSEL. See entries in dictionary.rtf;
   the file stella/examples/markov has the Stephen Foster example from 
   Dodge-Jerse chapter 8.

2) defmultiple-item takes new keyword argument :element-state, for
   selecting which element's state to return as the state of the multiple
   item when its not :end-of-period.  this allows tracking the state of 
   chords,etc inside the multiple-item.

3) new #i read macro for shorter item stream definition, see 
   dictionary.rt for more info.
_____________________________________________________________________

Features and bug fixes from 2-Feb-93.

1) New command RUN executes the specified objects and updates their time
   values without producing any output. Current time values may then be
   referenced in editing operations, ie
	run foo,bar
	map foo while (< $time 50) when (> $time 20) transpose note -3
	set bar amp (interpl $time 0 .1 50 .3)

2) clm interface improved:
    a) all sound file attributes now specifiable via Open, ie
		open foo.snd verbose t srate 44100 play nil 
    b) envelope processing for .snd and .clm files now made easier
       by using the new (:format :careful) option in formatting-slots
       and collecting-slots. see dictionary for more info.
3) formatting-slots now handles &rest arguments.
4) defobject now takes an optional :parameters argument for declaring
   certain slots to be "parameters". the system does not yet automatically
   write output methods.

Bug fixes:
    Many clm/stella interface bugs solved.
    catch/throw problems in map fixed
    map operators while and until now print their results.
    formatting-slots no longer prints double seperators between values
_____________________________________________________________________

Features and bug fixes from 2-Nov-93.

1) Command prompting and processing has changed. 

  Main prompting improvements:

  1) All commands are now fully specifiable from the command line. A new
     global variable *command-prompting* controls whether or Stella
     prompts for missing or illegal command arguments. The default value
     of *command-prompting* is T, so by default stella behaves as it has
     in the past. If nil, missing or illegal command line arguments
     result in an error/syntax message and an immediate return to the
     main prompt.  Set to nil if you like a  terser input style.

  2) Help texts completely rewritten. New tutorial sections: 2.4.2, 2.4.3
     New dictionary entries: FHEADER, REPEAT, *command-prompting*,
     *mapping-mode*, *mapping-depth, *listing-length*

  3) Underlying lisp functions cleaned up, renamed and made "public".
     See stella/api.text for a list of these functions and variables.

  4) New type of command argument called "pairs"  is similar to Lisp's
     &keywords args except:
	1) you dont need to precede name with a colon (but you can).
	2) their values are "carefully" evaluated, ie as Map evaluates.
	3) underlying api functions all use pairs not keywords.

  Main Syntax Changes:

  1) Object reference parsing is now stricter: a reference to a series
     of objects ment as a single command argument MUST include commas
     between the individual references, or the entire reference must be
     delimited within []. So "Listen 1 2 3 4" will no longer work but
    "Listen 1,2,3,4" or "Listen [1 2 3 4]" or "Listen 1 , 2 , 3 , 4"
     will work. The main  commands affected by this change are LIST and
     LISTEN, WRITE, SWRITE and SLISTEN.  More than one offsets for LISTEN
     and WRITE can be givin on the command line delimited with comma. 
     See help text.

  2) The specification of container positions has been simplified. To
     append, just give the name or position of the container. Otherwise,
     specify the insertion point as a positional reference:
   	add bar,baz[32] foo	   ; append Bar and Baz[32] to Foo
	add bar,baz[32] foo[4]	   ; insert Bar and Baz[32] at Foo[4]

  3) Pathnames with spaces can now be specified if the entire pathaname
     is delimited within "", 

  Summary of changed commands. See help text for more info:

  ADD                now accepts optional pair arguments.
  ARCHIVE            now accepts optional pair arguments.
  CL                 now accepts line of input to process.
  DELETE             now accepts optional pair arguments.
  LIST               now more compact.
  LISTEN             now accepts optional pair arguments.
  LOAD               now accepts optional pair arguments.
  PASTE              now can paste to range and point, optional name.
  PLAY               now accepts optional pair arguments
  PARAMETERS         removed.
  REHASH             obsolete.
  REMOVE             now works for multiply linked conatiners.
  RETROGRADE         works for subranges as well as containers.
  SHUFFLE            works for subranges as well as containers.
  SLISTEN            now accepts optional pair arguments.
  SWRITE             now accepts optional pair arguments.
  TLIST              now accepts optional pair arguments.
  WRITE              now accepts optional pair arguments.

2) The following are new functions, variables and macros. See the dictionary
   for more information:

   Function FHEADER sets file headers via Lisp. 

   Macro REPEAT repeats the current period of an item stream
   zero or more times. 
   
   User variables: *post-process*, *command-prompting*,
                   *listing-length*, *mapping-mode*, *mapping-depth*


3) New system containers: 
   
   TOC (Table Of Contents), the container of all system containers
   Syntaxes, the container of all currently loaded syntaxes.

4) Functional item streams and read items now optionally pass not only
   the values of the current period, but the states as well.
   see dictionary.

Bug Fixes:

1) Tlist on algorithms now works.
2) midifile-parse now handles tracks without an initial tempo change.
3) datatype integer and voicing exported from common music.
4) functional streams now have "prop" option exported
_____________________________________________________________________

Features and bug fixes from 15-Sep-93.

1) By default, defscorefile and with-part are not built into the cm
   image, and the top level package is set to Stella when Lisp boots up.
   If you still want to use defscorefile, set the defscorefile parameter
   in build.lisp to T.

1) Output streams now have three additional slots: Start, End and
   Timescale.  Only events >= start and <= end  are output. Timescale
   scales values related to time by that amount, but since time scaling
   generally involves slots other than just Time (for example, duration),
   it is left up each method on write-event to perform time scaling or
   not.  All Midi and Music Kit classes support times scaling for start
   and duration values.

2) The Open command now allows slots to be unset by specifying Unset
   or None (or :none or :unset if you are a real lisper) as their
   "value".  Examples:

	open test.midi start 10 end 40 timescale 2.5
        open test.midi timescale none

3) New Map operators List and Show.  Similar to Find, but they list
   or show each referenced object.

4) The $slot notation no longer returns 0 if the slot is unbound or
   does not exist. Instead, it throws out of the current object.
   Throwing allows operators like Minimize or Lowest to avoid calculating
   with bogus 0 values when the currently mapped object does not have a
   value for the specified slot, or is of a completely different class.

5) Thanks to Tobias Kunze, Stella now functions similar to the normal
   lisp listener in MCL:
   1) <return> brings the selected text to the active spot
   2) <backspace> no longer rubs out the prompt
   3) Command-. pops the error stack instead of throwing immediately
      to the top level.

6) New global variable *default-midi-pathname* holds the default midi
   output file pathname. All midi output functions merge the supplied
   pathname with the default pathname to form the fully specified output
   file pathname.  The initial value of *default-midi-pathname* is
   "test.midi" in the user's home directory.

Bug Fixes:

1) Aborting from the file prompt in Write and SWrite now works.

_____________________________________________________________________


Features and bug fixes from 5-Aug-93.

1) New support for CMN syntax:

a) Chapter 12 in tutorial "Manuscripting data using CMN" rewritten to 
   include new sections 12.5.1 "The open command" and 12.7  "Advanced CMN 
   stream customizations"
b) Staffing in CMN may now be by container, midi channel, or user 
   specified. A new staffer slot for CMN streams holds a function reponsible 
   for mapping objects in stella to their proper CMN staves. By default 
   this staffer function is container-staff, which groups objects in staves 
   according to their containers in stella. By setting staffer to the 
   function channel-staff, midi data can be organized in CMN staves 
   according to midi channel. See tutorial for more information.
c) New marker slot in CMN streams may hold a function for adding cmn 
   directives just after each note has been sent to CMN. Use a marker 
   function to progrmatically send marking information to CMN, for example, 
   to add a wedge to each note if the amplitude is above .4, etc.  See 
   tutorial for more information.
d) New staves macro allows staffing information to be easily supplied. 
   See dictionary.rtf for more information.  Removed the old STAFF command 
   from Edit when editing CMN staves. Now just use the staves macro to set 
   the staves slot.
e) If the system is built with MIDI syntax, the CMN object now also 
   receives a channel slot.
f) See also: entry on Open below, newly rewritten CMN chapter in the 
   tutorial; new additions to appendix A in tutorial; dictionary entry on 
   staves; channel.tl script in the stella/scripts directory.

2) new variable *respect-note-spelling* decides if the notes macro should 
   keep note names the same as specified by the user.  If common music is 
   built with CMN, the defult value of *respect-note-spelling*  is true, 
   which makes manuscript output from algorithms, etc much more friendly.  
   If CMN is not built into the system, the default value is nil, which 
   preserves the original behavior of the notes macro

3) the pitches macro no longer quantizes floating point data to fit in 
   a scale.

3) new variable *syntaxes* holds the list of syntaxes currently loaded 
   into Common Music.

4) The directory stella/examples/blee contains new composition examples 
   by Brent Lee.

5) Tutorial may now be used in conjunction with the Music Kit simply 
   by switching syntax. The midi objects will then output to music kit, with 
   midi channel info selecting various preset synthpatches in the MusicKit.  
   Music Kit data may also output to CMN for manuscripting.

6) CSound syntax fully implemented in Stella. See stella/examples/i1.lisp 
   for an example of declaring csound objects and output methods. 

7) New Heap container class and constructor. A heap is a subclass of 
   thread, but shuffles its material each time it is initialized for 
   outputting, which allows score structure to involve random permutation.

8) New macros defobject and formatting-slots simplify defining new 
   classes of objects and new output methods. Chapter 9 in tutorial rewritten 
   and simplified. See tutorial and dictonary.rtf for more information.

9) Show command now prints definition code for algorithms and generators.

10) Reloading material from an archive now warns about redefining objects.

11) New examples files from CCRMA workshop in stella/examples.

12) New Unset command for unbinding slots. Also available as an operator 
   in MAP.

13) New Change command for changing the class of objects. Allows optional
   slot initialization in redefined objects according to a {newslot oldslot}*
   list. Also available as an operator in MAP. 

14) Open now allows files and listeners to be initialized, ie
        open test.score header *header*
   would create or update a music stream for test.score and set its header 
   attribute to the value of *header*.  See appendix ??? in the tutorial for 
   detailed information about streams attributes.

15) new build.lisp parameter "defscorefile" will allow the optional 
   inclusion of the the old runtime system  of common music (defscorefile, 
   with-part, defpart, etc.  For this release only, the default value will 
   be T (in fact, don't set it to nil); thereafter it will default to NIL, 
   which means that the old system will not be loaded into common music and 
   the default package will become stella.

16) cm.tar.Z is now much smaller becuase I remove a ton of old/stale  
   documentation. Ive also removed dictonary entries to defscorefile,  
   with-part, defpart etc. If you want them keep an old dictionary around.

17) To accomodate an upcoming port to DOS, a few file names have been  
   changed to insure unique names within 8 characters.

   stella/tutorial/:
        stella-tutorial.rtf			stella.rtf
   midi/examples/:
        real-time.lisp				rt.lisp
        real-time-examples.lisp		rtexamp.lisp
   doc/:
        item-stream-examples.rtf combined with item-streams.rtf		
   mk/examples/:
        DBWave1vi-1.lisp DBWave1A.lisp
        DBWave1vi-2.lisp DBWave1B.lisp
        DBWave1vi-3.lisp DBWave1C.lisp
        DBWave2vi-1.lisp DBWave2A.lisp
        DBWave2vi-2.lisp DBWave2B.lisp
        DBWave2vi-3.lisp DBWave2C.lisp

Note that untarring the new cm.tar into your old source directory will 
not remove the old files.

18) :MIDI pushed on feature list

Bug fixes:

1) Fixed bug that caused algorithms to not increment themselves after
   the last note. This change may cause existing code to run slightly
   differently!
2) Fixed superfluous warnings in MCL when defining algorithms and generators.
3) Fixed status updating bug that cause an algorithm's status to get 
   improperly updated if the algorithm reads from multiple item streams.
4) Fixed Go bug that caused an error upon moving focus to an algorithm.
_____________________________________________________________________

Features and bug fixes from 14-Jun-93:

1) New SCRIPT command in Stella reads editor input from a specified file, 
   which may contain both lisp and command expressions.  Script files have 
   a default extention of ".tl" to distinguish them from normal lisp files, 
   which cannot contain command expressions.  Scripts are handy for 
   storing complicated editing sequences, or commands that you issue 
   repeatedly.  In addition, I am building up a library of scripts that 
   place Stella in "automatic pilot mode" to demonstrate various simple 
   command sequences. These demos can be found in the directory 
   stella/scripts. Be sure to read README in that directory before 
   loading any of these files.  I will continue to update and add to this 
   directory.

2) Tobias Kunze has implemented some really nice editor extensions in MCL 
   to support Stella input and command evaluation from other windows and 
   buffers. See contrib/mcl-stella.lisp for more info.

3) The MAP command operators sum, collect, maximize, minimize, lowest, 
   highest, and count now support an optional "global result variable", 
   which will receive values that the operator produces.  Result variables 
   are updated each time an operator's clause is processed so other 
   clauses may reference the current value in their expressions.  To 
   specify a results variable use the INTO option. For example:
	map * sum $rhythm into timesum and collect timesum into timelist
   would define a global variable timesum to hold the total of all rhythm 
   slots and a variable timelist to hold the list of all summed start times.

4) New MAP operators UNTIL and WHILE allow processing to terminate before 
   all  objects have been mapped. Until terminates mapping as soon as its 
   expr returns true.  While terminates as soon as its expr returns false. 
   For example,
	map * while (< $duration 1.2) increment rhythm .3
   would process the objects in * until a duration >= 1.2 was encountered.

5) Commands may now span more than one line of input if the entire command 
   is delimited by a pair of curly brackets {}, ie:

	{map t2 collect $note into mynotes
	     when (member $note '(c4 c5 c6))
	          transpose note (between 1 11)}

6) New item constructors EXPR and FN. Expr creates an item out of lisp code 
   (variables, expressions, etc). The ITEM function is then used to evaluate 
   and return the value of an EXPR. The FN constructor is like EXPR, but 
   creates an item from a function object.

        <cl> (setf s (let ((x 0)) (items 1 (expr (incf x)) for 20 )))
        #<CYCLIC-ITEM-STREAM 133341111> 

        <cl> (read-items s) ; works even though x no longer exists
        (1 1 1 2 1 3 1 4 1 5 1 6 1 7 1 8 1 9 1 10) 

   see dictonary.rtf for more information.

7) New OPEN command in stella opens a listener for the specified syntax, if 
   possible.

Bug fixes:

1) the :KILL value to item inside with-part or algorithm may now be 
   specified as a variable
2) Numbers macro fixed to supply correct limit value.
3) Numbers documented in dictionary.rtf   
4) mcl-midi.lisp fixed to work with opcode midi tools.
5) doitems item variable now properly bound.

_____________________________________________________________________


Features and bug fixes from 11-May-93:

1) Macintosh mididriver routines and interface reimplemented by Tobias Kunze 
   (tkunze@mvax.kgw.tu-berlin.de).
  a) you no longer need anything from MPW, just debinhex the
     supplied midi/mcl-midi.c.o.hqx file and away you go. 
     Although it has only be tested on a IIci, SE/30, a PowerBook 170, and
     a  Quadra 700, it should run on all Macintoshes with a hard disk and
     at least 6 megabytes of RAM and 8 megabytes of disk storage, 
     running Macintosh System Software 6.0.4 or later (including System
     7) or A/UX 3.0.
  b) "unlimited" midi message writing is supported by managing the mididriver's
     buffers dynamically.  CM now allows about @40000 future unblocked 
     messages; once all buffers are full the system drops into blocking mode so
     you can still send more data.
  c) A handy Midi utility menu is provided.

2) New item stream constructor macro NUMBERS creates number streams for cyclic 
   or random number generation. numbers is similar in spirit to Lisp's loop 
   iteration macro, with the essential difference that numbers is used in 
   conjunction with item to return the next number, and numbers permits any 
   numeric option value to be replaced by an item stream of values, ie:
	(numbers to 10)
	(numbers from 1 below (items 5 10) in random)
	(numbers by (items .1 .2) below 1)
	(numbers from (items 0 1) to (numbers 10 to 20 in random))
   Only the cyclic and random patterns are currently implemented.  See 
   doc/dictonary.rtf for more information.

3) midifile-play reimplemented by Tobias Kunze to use the open midi port 
   rather than an external program. This allows you to play midifiles 
   directly from Lisp without any ancillary program, which avoids blocking 
   on NeXT 3.0 because playmidifile isnt used, and allows midi files to be 
   played on the Mac without leaving lisp.  Play-midifile now supports the 
   optional specification of :start :end times in the file, and a :timescale 
   factor for "zooming" in and out of the sound.  See doc/midi.rtf for more 
   information.

4) Site initialization file. If a file called cminit.lisp or cminit.fasl 
   exists in either *common-music-directory* or the directory containing 
   the booted common music image, then it is loaded when common music boots 
   up.  This can be used to automatically load patch files and system 
   extensions, or to reset system variables like *common-music-directory* in 
   the event that the image is run on a filesystem other than the one it was 
   created on. Site initialization does not work in AKCL.


5) The FOR option to item stream constructors now permits the period length 
   to be specified as a function which will be funcalled to return the length 
   of the next period.  This feature can be used, for example, to keep two 
   item streams "in parallel", ie:

   (items (items A for (items 5 6 7 in random) named Foo)
          (items Z for #'(lambda () (period-length #@Foo))))

   would cause the item Z to be generated as many times as the item A, no 
   matter what the current period length of Foo actually is.

Bug Fixes:

1) Staff command for CMN output streams now allows renaming.

2) Midi files written in MCL now have their macintosh file types set to Midi.

3) tl.lisp no longer clobbers ccl:show-documentation in MCL.

_____________________________________________________________________


Features and bug fixes from April 5, 93:

1) New CMN output syntax in Stella for postscript output via CMN. Chapter 12 
   "Manuscripting data using CMN" in stella-tutorial.rtf has documentation 
   and examples.

2) New LAYOUT macro for organizing musical material. See chapter 13 
   "Describing musical layout" for documentation and examples.

3) Mutes and algorithm sprouting implemented. See section 7.10 "About 
   Algorithms"  and new section 7.11 "Creating structure dynamically" for 
   documentation and examples.

4) Much work finishing/debugging Macintosh port, which now functions as well 
   as the NeXT port.

5) New VARS declaration for algorithms and generators declares variables 
   that are local to the object and reinitialized every time the object 
   begins output processing. See section 7.10.2 for more details.

6) The DOITEMS iteration varible may now be either a single variable, or a 
   list of two varibles, (var1 var2), where the var1 is the iteration varible 
   and var2 is the state variable. Supplying a state variable allows forms in 
   the body of doitems to access the current state of the stream.  For example:

   (doitems ((i s) (notes [c3 e g]  [c3 e g]  [c3 e g] 
                          [c3 e g]  [c3 e g]  [c3 e g]))
     (element midi-note note i amplitude .5 duration .15 
              rhythm (if (eq s ':chording) 0.0 .5)))

7) SListen now prompts for the number of times to sequence if just one 
   selection is specified to the command. Note that a single selection can 
   itself be a subrange, ie:

    Stella [Top-level]: Slisten foo
    Stella [Top-level]: Slisten foo[1:5]

8) The initially option to random, heap and graph streams now accept the 
   value ANY, which causes the stream to randomly select its initial datum.

9) Variable *pprint-archive* controls whether or not objects are pretty 
   printed when archived. Pretty printing takes slightly longer than normal 
   printing, put produces a more legible result.  Pretty printing is only 
   important if you want  to list or edit a .stella file.

Bug Fixes:

1) Fixed pathname problem in MCL that caused file extensions to appear twice.

1) Read macro #@ in MCL now handles both ccl's and cm's meaning.

1) Fixed referencing bug that didn't parse names starting with a number.

2) Fixed bug that still added containers with id NIL to table.

3) All known problems with symbol export/import between the common-music 
   and stella packages are fixed.

5) Fixed even more timing bugs fixed with respect to merges. 

6) New bug: In NeXTStep 3.0, midi output sometimes dies during output 
   processing when using Listen. Try again after issuing the Close command, 
   or simply use the Write command to generate a midi file. The system 
   will automatically prompt for a midi file to be played after it is written.

_____________________________________________________________________


Features and bug fixes from Feb 15, 93:

1) Port of Common Music to SGI Iris under Franz Allegro 4.1. (Midi real time
   not yet completed)
2) Fixed Stella run in MCL. Editor now supports copy/paste and buffer 
   evaluation via Command-E. Command-. now aborts back to the Editor, rather 
   than the Lisp Listener.

_____________________________________________________________________


Features and bug fixes from Jan 1, 93:

1) New referencing scheme in Stella makes it possible to reference groups 
   of objects in parallel. This allows comparative querying to be supported. 
   For example the command:
	map :::2 find (eq $note[1] $note[2])
   would map pairwise over all the objects in the current focus container 
   and return the starting positions of each pair of object that had identical 
   values in their note slots.  For more information, see the tutorial 
   section 2.5, or the 'help referencing' topic in the editor.

2) New output syntax CMN allows postscript output using Bill Schottstaedts 
   Common Music Notation package to be produced. Stella must be built with 
   CMN loaded for this to work. Once syntax is set to cmn, either postscript 
   or a cmn input file can be generated bu specifying the appropriate file 
   extension to the write command.

3) Many new mapping operators added: find, count, delete, undelete, insert, 
   append, append-at insert-at.  For more information, see the tutorial 
   section 9.1 or the 'help map' topic in the editor

4) New system container called Io-Streams holds all currently defined output 
   streams. To change the characteristics of stream that already exsts, 
   list the contents of io-streams to find the stream in question, then used 
   the edit command. For example:
	edit io-streams[2]
   would edit the 2nd stream object in io-streams.

5) New :element-period options for defmultiple-item have been implemented by 
   Fernando Lopez Lezcano:
   :ANY --> any element that reaches end of period returns end of period
   :ALL --> only returns end of period when all elements agree on end of 
            period at the same time. 
   :ANY C1 ... CN --> any followed by some component streams, same as any but 
            only taking into account  the C1...CN components
   :ALL C1 ... CN --> :all followed by some component streams, same as :all 
	    but only taking into account the C1...CN components. 
   C1 ... CN --> component streams: same as :ALL C1...CN

6) Fixed bug in common music's restp function that caused it to fail with 
   floating point argument.

_____________________________________________________________________


Features and bug fixes from Sept 30, 92.

Much work in implementing and debugging Stella. There is a brand new tutorial 
about composing in Stella in stella/tutorial/stella-tutorial.rtf

new option "initially-from" for interval streams. The initially-from option 
is similar to the from option, except that it supplies the offset for the 
initial period of the interval stream only. Subsequent periods use the last 
computed value from the stream as the offset value for the current period, 
causing the new period to start wherever the last period left off. from, 
initially-from and linked-to are mutually exclusive options.

new option "linked-to" for interval streams.  The linked-to option may be 
used in conjuntion with a named item steam to link the offset of the current 
period to the last value that the named stream returned.  The name of the 
stream to  link to should not be quoted.   from, initially-from and linked-to 
are mutually exclusive options.

new scale reference predicates: scale=, scale<, scale>.  the new functions 
provide predicate testing for scale degree references. references may be 
note, pitch or degree.

new :play command for Franz Lisp.  the :play command plays .snd, .score, 
.midi or .clm files using the appropriate methods.  default file to play is 
the last generated score file.

new iteration macro: doitems.  The doitems macro is like Lisp's dotimes and 
dolist interation macros, but provides iteration over items read from a 
suppied item stream.

____________________________________________________________________

Features and bug fixes from July 19, 92.

Change to defscorefile

by default, the item function used inside with-part  will notice rests and 
chords in any type of item stream, not just in note streams.

Change to the in-tempo function:

in-tempo (and the tempo macro) now support an optional second argument, beat, 
that specifies a pulse value for the tempo.  If no beat is specified the 
default value of quarter note is used:

Example: 	(in-tempo 60 'q.)

Fix to the decrescedo macro

Fixed the bug that caused only crescendos to be made...

Change to the intervals and steps macro
rests inserted in either the interval specification or the offset stream 
will have their intended effect, but remember that the offset is reread just 
once every period. 

Change to the graph pattern type
The to id descriptions for each graph node may now be item streams of id's.  
This is a simple way of implementing some pattern type other than the default 
random selection.
Example: 	(items (a to (items b c))
				   (b to (a))
				   (c to (items a b c in palindrome))
				 in graph)		

Change to the palindrome pattern type
The elided option to the palindrome pattern type now supports a variety
of elision values:
	nil, no		no elision at end points of palidrome
	t, yes		elision at both start and end of palinrome
	start		elision at just the start of the palidrome
	end			elision at just the end of the palindrome
Example:		(items a b c in palindrome elided start)

Tempo scaling in nested rhythm streams now works. The system returns an inner 
stream's rhythm without rescaling it by the outer streams own tempo factor.  
another way to look at this is that, for a given stream, its tempo factor is 
only applied to elements in the stream that are actually rhythmic data. 
elements that came from embedded streams remain in the embedded stream's own 
tempo, whatever that might happen to be:
