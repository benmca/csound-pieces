
(let (node116 node115 node114 node113 node112 node111 node110 node109 node108
      node107 node106 node105 node104 node103 node102 node101 node100 node99
      node98 node97 node96 node95 node94 node93 node92 node91 node90 node89
      node88 node87 node86 node85 node84 node83 node82 node81 node80 node79
      node78)
  (make-object 'network
               :id
               '01-nodes-and-links
               :extent
               (xy 407 1561)
               :terminal-size
               (xy 4 4)
               :browser-size
               (xy 422 343)
               :node-font
               '("Monaco" 9 :plain :srcor)
               :active?
               nil
               :activation-mode
               :forward
               :view-position
               (xy 0 35)
               :view-size
               (xy 407 293)
               :inputs
               (make-link-array 0)
               :outputs
               (make-link-array 0))
  (setf node116
        (make-object 'comment
                     :comment
                     "This last example is slightly more complex version of one of the earlier examples...you figure it out!"
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 13 1307)
                     :view-size
                     (xy 379 30)))
  (setf node115
        (make-object 'operator
                     :operator
                     #'pick
                     :view-position
                     (xy 87 1425)
                     :view-size
                     (xy 56 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node114
        (make-object 'value
                     :value
                     '(hits bites slaps bonks)
                     :view-position
                     (xy 27 1391)
                     :view-size
                     (xy 152 21)
                     :inputs
                     (make-link-array 30)
                     :outputs
                     (make-link-array 30)))
  (setf node113
        (make-object 'comment
                     :comment
                     "<- they don't hit themselves!"
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 222 1469)
                     :view-size
                     (xy 129 18)))
  (setf node112
        (make-object 'operator
                     :operator
                     #'pick
                     :view-position
                     (xy 195 1425)
                     :view-size
                     (xy 56 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node111
        (make-object 'value
                     :value
                     '(nyuk-nyuk rrrrr-ruff woo-woo)
                     :view-position
                     (xy 190 1391)
                     :view-size
                     (xy 189 21)
                     :inputs
                     (make-link-array 37)
                     :outputs
                     (make-link-array 37)))
  (setf node110
        (make-object 'operator
                     :operator
                     #'list
                     :view-position
                     (xy 72 1505)
                     :view-size
                     (xy 92 21)
                     :inputs
                     (make-link-array 18)
                     :outputs
                     (make-link-array 18)))
  (setf node109
        (make-object 'operator
                     :operator
                     #'pick
                     :args
                     '(~ :avoid ~)
                     :view-position
                     (xy 102 1469)
                     :view-size
                     (xy 110 21)
                     :inputs
                     (make-link-array 21)
                     :outputs
                     (make-link-array 21)))
  (setf node108
        (make-object 'operator
                     :operator
                     #'pick
                     :view-position
                     (xy 17 1425)
                     :view-size
                     (xy 56 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node107
        (make-object 'value
                     :value
                     '(moe larry curley)
                     :view-position
                     (xy 12 1352)
                     :view-size
                     (xy 116 21)
                     :inputs
                     (make-link-array 23)
                     :outputs
                     (make-link-array 23)))
  (setf node106
        (make-object 'portal
                     :value
                     '(moe bites larry nyuk-nyuk)
                     :view-position
                     (xy 22 1540)
                     :view-size
                     (xy 205 21)
                     :inputs
                     (make-link-array 40)
                     :outputs
                     (make-link-array 40)))
  (setf node105
        (make-object 'comment
                     :comment
                     "Notice that three of the operators in this example do not have normal function names in their labels.  If an operator holds an unmaned function -- a lambda expression or a lexical closure -- then the function simply appears as \"op\" in the label.  Double-click any of the op nodes to see that their functions were specified using a macro also called op.  The op macro allows an unnamed function to be \"decompiled\" if the network is saved in a lisp file.  Anonymous functions can of course be specified using the normal lisp (fuction ...) or #'  special forms, but these specifications cannot be saved to a source files.  Of couse, if the function has a name it does not matter how it is specified.  

The If node in this example is a bit more conplicated than in the earlier example. Double-click the node to see that its predicate (operator) actually returns two values. Predicates normally return one value -- true or false.  But if a predicate returns two values then the first value is the predicate's truth value (which determines if the Then or Else slot links are triggered) and the second value becomes the value of the chosen slot.  Passing the test value to the Then or Else slot is necessary if If nodes are chained together, or if a Then or Ese link needs to pass the value to a successor node.  In the example above, the Then link is a Propagate and two of the Else links are Updates -- both types of link expect to push a value to the forward node."
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 13 1078)
                     :view-size
                     (xy 378 210)))
  (setf node104
        (make-object 'comment
                     :comment
                     "This next example shows the If node and more use of Activatoin links. "
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 9 520)
                     :view-size
                     (xy 388 20)))
  (setf node103
        (make-object 'portal
                     :value
                     '(a 10 bar)
                     :view-position
                     (xy 105 727)
                     :view-size
                     (xy 91 24)
                     :inputs
                     (make-link-array 18)
                     :outputs
                     (make-link-array 18)))
  (setf node102
        (make-object 'value
                     :value
                     'bar
                     :view-position
                     (xy 175 644)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node101
        (make-object 'value
                     :value
                     'foo
                     :view-position
                     (xy 125 643)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node100
        (make-object 'operator
                     :operator
                     #'list
                     :view-position
                     (xy 75 684)
                     :view-size
                     (xy 77 21)
                     :inputs
                     (make-link-array 15)
                     :outputs
                     (make-link-array 15)))
  (setf node99
        (make-object 'operator
                     :operator
                     #'pickl
                     :args
                     '(a b c)
                     :view-position
                     (xy 10 579)
                     :view-size
                     (xy 88 22)
                     :inputs
                     (make-link-array 17)
                     :outputs
                     (make-link-array 17)))
  (setf node98
        (make-object 'if
                     :operator
                     #'eql
                     :args
                     '(~ b)
                     :view-position
                     (xy 135 610)
                     :view-size
                     (xy 77 21)
                     :inputs
                     (make-link-array 15)
                     :outputs
                     (make-link-array 15)))
  (setf node97
        (make-object 'value
                     :value
                     10
                     :view-position
                     (xy 90 547)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node96
        (make-object 'operator
                     :operator
                     (op (x y)
                         (format t
                                 "~%Number ~d is odd, your jackpot is: $~d!"
                                 x
                                 y))
                     :view-position
                     (xy 101 1049)
                     :view-size
                     (xy 64 21)
                     :inputs
                     (make-link-array 12)
                     :outputs
                     (make-link-array 12)))
  (setf node95
        (make-object 'operator
                     :operator
                     #'+
                     :view-position
                     (xy 111 1014)
                     :view-size
                     (xy 56 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node94
        (make-object 'operator
                     :operator
                     #'pickl
                     :args
                     '(1000 2000)
                     :view-position
                     (xy 121 983)
                     :view-size
                     (xy 110 21)
                     :inputs
                     (make-link-array 21)
                     :outputs
                     (make-link-array 21)))
  (setf node93
        (make-object 'if
                     :operator
                     (op (x) (values (evenp x) x))
                     :view-position
                     (xy 56 950)
                     :view-size
                     (xy 66 21)
                     :inputs
                     (make-link-array 13)
                     :outputs
                     (make-link-array 13)))
  (setf node92
        (make-object 'operator
                     :operator
                     (op (x) (format t "~%Number ~d is even, go to jail!" x))
                     :args
                     '(0)
                     :view-position
                     (xy 36 984)
                     :view-size
                     (xy 56 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node91
        (make-object 'comment
                     :comment
                     "The next example demonstrates the use of unnamed funtions (lambda expressions) in Operators, and a slightly more complex use of the If node."
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 17 874)
                     :view-size
                     (xy 380 31)))
  (setf node90
        (make-object 'operator
                     :operator
                     #'random
                     :args
                     '(10)
                     :view-position
                     (xy 61 916)
                     :view-size
                     (xy 73 21)
                     :inputs
                     (make-link-array 14)
                     :outputs
                     (make-link-array 14)))
  (setf node89
        (make-object 'comment
                     :comment
                     "o Activate the network and then click on 10
o Deactivate and then Double-click the between node to
  see how its args are specified.
o Command-Click between's input terminals to see how
  links are attached to specific function arguments."
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 142 423)
                     :view-size
                     (xy 254 66)))
  (setf node88
        (make-object 'comment
                     :comment
                     "The Activate link (green) that conencts 10 with pickl causes pickl to activate whenever the 10 node is activated.  Notice that the terminals for this link are hollow.  A hollow terminal means that the link is not attached to a alot at that point.  Even though Activate links do not set slot values they can still be attached to slots in an antecendent node.  The activation links attached to the If node demonstrate this. Command-Click these output termianls to see that the first link is attached to the Then slot and the second link is attached to the Else slot.  The result is that when the If node's operator (called a predicate) returns true then the Then link activates the Foo node, otherwise the Else link activates the Bar noded.  In either case, Foo or Bar propagates to the 3rd argument of the list node.
"
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 15 759)
                     :view-size
                     (xy 383 108)))
  (setf node87
        (make-object 'comment
                     :comment
                     "There are three other types of links in addtion to Propagate; each type of link has a unique color to make the network more readable.  An Update link sets a slot value in the forward node but does not activate it so no further propagation is triggered along that link. An Activate link does the inverse: it activates the forward node but does not transmit a slot value.  A deactivate link deactivates the forward node. Like Activate links, the Deactivate link does not transmit slot values.
To see how Propagate and Update links work, consider the next example, which uses an Update link to avoid direct reselection when a random value is generated (the third argument to between is an \"avoid\" value.)"
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 7 291)
                     :view-size
                     (xy 390 109)))
  (setf node86
        (make-object 'comment
                     :comment
                     "o Click the lightbulb icon to activate the network.
o Click the value 10 to initiate progpagation. 
o Click any of the nodes to see what happens.
o Click the lightbulb to stop.
o Double-click a node to open its Info browser.
o Command-Click a terminal (the little squares)
  to see which slot it is attached to.
o Double-click a link to open its Info browser.
o Mouse-drag a node to move it.
o Mouse-drag a terminal to move it.
o Mouse-drag the lower right corner of a node to reshape it."
                     :font
                     '("times" 10 :plain :srcor)
                     :view-position
                     (xy 142 143)
                     :view-size
                     (xy 254 138)))
  (setf node85
        (make-object 'comment
                     :comment
                     "A network is a collection of nodes and links. In the first example below, a Value node holds the integer 10, an Operator node holds the Lisp function random with a linked function argument (denoted by ~ in the node's label), and the Portal node (a graphic value) is allocaterd to display changing values while the network is active. The three nodes are linked together by Propagate links.  A Link is simply a typed connection between two nodes.  A Propagate link \"pushes\" slot values in an antecedent node to attached slots in a forward node and then activates the forward node so that propagation can continue.  Antecedent nodes are nomrally placed above their successors in the network graph but the xy position of a node has no impact on its order of evaluation. Mindy always evaluates links in depth-first, left-to-right order according to the order of terimianls (the little squares) in a node's output (bottom) shelf."
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 9 6)
                     :view-size
                     (xy 390 124)))
  (setf node84
        (make-object 'portal
                     :value
                     0
                     :view-position
                     (xy 44 233)
                     :view-size
                     (xy 44 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node83
        (make-object 'operator
                     :operator
                     #'random
                     :view-position
                     (xy 44 196)
                     :view-size
                     (xy 68 21)
                     :inputs
                     (make-link-array 13)
                     :outputs
                     (make-link-array 13)))
  (setf node82
        (make-object 'value
                     :value
                     10
                     :view-position
                     (xy 44 159)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node81
        (make-object 'portal
                     :value
                     9
                     :view-position
                     (xy 56 490)
                     :view-size
                     (xy 44 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node80
        (make-object 'operator
                     :operator
                     #'between
                     :args
                     '(5 ~ nil)
                     :view-position
                     (xy 21 455)
                     :view-size
                     (xy 110 21)
                     :inputs
                     (make-link-array 21)
                     :outputs
                     (make-link-array 21)))
  (setf node79
        (make-object 'value
                     :value
                     10
                     :view-position
                     (xy 56 422)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node78
        (make-object 'comment
                     :comment
                     "output appears in Lisp window!"
                     :font
                     '("Times" 10 :plain :srcor)
                     :view-position
                     (xy 198 1032)
                     :view-size
                     (xy 140 20)))
  (link-nodes 'update
              node115
              node110
              :from-index
              0
              :to-index
              3
              :to-slot
              (list 'args '@ 1)
              :from-slot
              'value)
  (link-nodes 'propagate
              node114
              node115
              :from-index
              12
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node112
              node110
              :from-index
              0
              :to-index
              10
              :to-slot
              (list 'args '@ 3)
              :from-slot
              'value)
  (link-nodes 'propagate
              node111
              node112
              :from-index
              1
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node110
              node106
              :from-index
              6
              :to-index
              16
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'update
              node109
              node110
              :from-index
              1
              :to-index
              7
              :to-slot
              (list 'args '@ 2)
              :from-slot
              'value)
  (link-nodes 'update
              node108
              node109
              :from-index
              8
              :to-index
              19
              :to-slot
              (list 'args '@ 2)
              :from-slot
              'value)
  (link-nodes 'update
              node108
              node110
              :from-index
              1
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'activate node107 node111 :from-index 21 :to-index 2)
  (link-nodes 'propagate
              node107
              node109
              :from-index
              19
              :to-index
              1
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'activate node107 node114 :from-index 9 :to-index 6)
  (link-nodes 'propagate
              node107
              node108
              :from-index
              1
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node102
              node100
              :from-index
              2
              :to-index
              13
              :to-slot
              (list 'args '@ 2)
              :from-slot
              'value)
  (link-nodes 'propagate
              node101
              node100
              :from-index
              1
              :to-index
              11
              :to-slot
              (list 'args '@ 2)
              :from-slot
              'value)
  (link-nodes 'propagate
              node100
              node103
              :from-index
              9
              :to-index
              3
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node99
              node98
              :from-index
              16
              :to-index
              1
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'update
              node99
              node100
              :from-index
              13
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'activate
              node98
              node102
              :from-index
              12
              :to-index
              4
              :from-slot
              'else)
  (link-nodes 'activate
              node98
              node101
              :from-index
              1
              :to-index
              3
              :from-slot
              'then)
  (link-nodes 'update
              node97
              node100
              :from-index
              3
              :to-index
              6
              :to-slot
              (list 'args '@ 1)
              :from-slot
              'value)
  (link-nodes 'activate node97 node99 :from-index 0 :to-index 16)
  (link-nodes 'propagate
              node95
              node96
              :from-index
              0
              :to-index
              2
              :to-slot
              (list 'args '@ 1)
              :from-slot
              'value)
  (link-nodes 'propagate
              node94
              node95
              :from-index
              3
              :to-index
              5
              :to-slot
              (list 'args '@ 1)
              :from-slot
              'value)
  (link-nodes 'activate
              node93
              node94
              :from-index
              12
              :to-index
              1
              :from-slot
              'else)
  (link-nodes 'update
              node93
              node95
              :from-index
              11
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'else)
  (link-nodes 'update
              node93
              node96
              :from-index
              9
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'else)
  (link-nodes 'propagate
              node93
              node92
              :from-index
              1
              :to-index
              5
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'then)
  (link-nodes 'propagate
              node90
              node93
              :from-index
              0
              :to-index
              1
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node83
              node84
              :from-index
              0
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node82
              node83
              :from-index
              0
              :to-index
              0
              :to-slot
              (list 'args '@ 0)
              :from-slot
              'value)
  (link-nodes 'update
              node81
              node80
              :from-index
              7
              :to-index
              19
              :to-slot
              (list 'args '@ 2)
              :from-slot
              'value)
  (link-nodes 'propagate
              node80
              node81
              :from-index
              0
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node79
              node80
              :from-index
              3
              :to-index
              10
              :to-slot
              (list 'args '@ 1)
              :from-slot
              'value)
  (add-objects (list node116
                     node115
                     node114
                     node113
                     node112
                     node111
                     node110
                     node109
                     node108
                     node107
                     node106
                     node105
                     node104
                     node103
                     node102
                     node101
                     node100
                     node99
                     node98
                     node97
                     node96
                     node95
                     node94
                     node93
                     node92
                     node91
                     node90
                     node89
                     node88
                     node87
                     node86
                     node85
                     node84
                     node83
                     node82
                     node81
                     node80
                     node79
                     node78)
               (find-object '01-nodes-and-links)
               nil
               :copy-first
               nil)
  (find-object '01-nodes-and-links))