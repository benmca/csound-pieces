
(let (node28 node27 node26 node25 node24 node23 node22 node21 node20 node19
      node18 node17 node16 node15 node14 node13 node12 node11 node10 node9
      node8 node7 node6 node5 node4 node3 node2 node1 node0)
  (make-object 'network
               :id
               'automaton
               :extent
               (xy 539 610)
               :terminal-size
               (xy 4 4)
               :node-font
               '("Times" 9)
               :view-position
               (xy 0 35)
               :view-size
               (xy 387 507)
               :inputs
               (make-link-array 0)
               :outputs
               (make-link-array 0))
  (setf node28
        (make-object 'delay-line
                     :wait
                     90
                     :view-position
                     (xy 121 551)
                     :view-size
                     (xy 71 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node27
        (make-object 'midiout
                     :view-position
                     (xy 19 591)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node26
        (make-object 'timer
                     :rate
                     100
                     :view-position
                     (xy 13 62)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node25
        (make-object 'operator
                     :operator
                     #'make-note-off
                     :args
                     '(0 ~ 127)
                     :view-position
                     (xy 121 522)
                     :view-size
                     (xy 99 21)
                     :inputs
                     (make-link-array 19)
                     :outputs
                     (make-link-array 19)))
  (setf node24
        (make-object 'operator
                     :operator
                     #'make-note-on
                     :args
                     '(0 ~ 60)
                     :view-position
                     (xy 19 522)
                     :view-size
                     (xy 93 21)
                     :inputs
                     (make-link-array 18)
                     :outputs
                     (make-link-array 18)))
  (setf node23
        (make-object 'operator
                     :operator
                     #'+
                     :view-position
                     (xy 13 265)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node22
        (make-object 'value
                     :value
                     12
                     :view-position
                     (xy 88 232)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node21
        (make-object 'value
                     :value
                     -12
                     :view-position
                     (xy 38 232)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node20
        (make-object 'operator
                     :operator
                     #'-
                     :view-position
                     (xy 28 142)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node19
        (make-object 'operator
                     :operator
                     #'-
                     :view-position
                     (xy 28 174)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node18
        (make-object 'if
                     :operator
                     #'>=
                     :args
                     '(~ 0)
                     :view-position
                     (xy 53 203)
                     :view-size
                     (xy 46 21)
                     :inputs
                     (make-link-array 9)
                     :outputs
                     (make-link-array 9)))
  (setf node17
        (make-object 'value
                     :value
                     '(60 60 60)
                     :view-position
                     (xy 13 110)
                     :view-size
                     (xy 49 21)
                     :inputs
                     (make-link-array 9)
                     :outputs
                     (make-link-array 9)))
  (setf node16
        (make-object 'operator
                     :operator
                     #'between
                     :args
                     '(1 6)
                     :view-position
                     (xy 13 330)
                     :view-size
                     (xy 59 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node15
        (make-object 'operator
                     :operator
                     #'*
                     :args
                     '(12 ~)
                     :view-position
                     (xy 13 362)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node14
        (make-object 'operator
                     :operator
                     #'-
                     :args
                     '(~ ~ -2)
                     :view-position
                     (xy 96 429)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node13
        (make-object 'if
                     :operator
                     (op (x y) (values (< x y) x))
                     :args
                     '(~ 36)
                     :view-position
                     (xy 13 297)
                     :view-size
                     (xy 51 21)
                     :inputs
                     (make-link-array 10)
                     :outputs
                     (make-link-array 10)))
  (setf node12
        (make-object 'if
                     :operator
                     (op (x y) (values (> x y) x))
                     :args
                     '(~ 98)
                     :view-position
                     (xy 91 330)
                     :view-size
                     (xy 51 21)
                     :inputs
                     (make-link-array 10)
                     :outputs
                     (make-link-array 10)))
  (setf node11
        (make-object 'comment
                     :comment
                     "Chained If's perform tests and  pass the tested value to the Then or  Else slot links."
                     :font
                     '("Times" 9 :plain :srcor)
                     :view-position
                     (xy 85 278)
                     :view-size
                     (xy 177 27)))
  (setf node10
        (make-object 'operator
                     :operator
                     #'+
                     :args
                     '(~ ~ 2)
                     :view-position
                     (xy 13 429)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node9
        (make-object 'operator
                     :operator
                     #'1+
                     :view-position
                     (xy 181 430)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node8
        (make-object 'portal
                     :value
                     81
                     :view-position
                     (xy 250 476)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node7
        (make-object 'comment
                     :comment
                     "next note   -->"
                     :font
                     '("Times" 9 :plain :srcor)
                     :view-position
                     (xy 163 476)
                     :view-size
                     (xy 69 18)))
  (setf node6
        (make-object 'comment
                     :comment
                     "(defun automaton (p1 p2 p3)
  (let* ((w (- (- p3 p2))))
    (incf w (if (>= w 0) -12 12))
    (incf w p1)
    (cond ((< w 36) 
           (+ w (* 12 (between 1 6)) 2))  
          ((> w 98) 
           (- w (* 12 (between 1 6)) -2)) 
          (t (1+ w)))))"
                     :font
                     '("Monaco" 9 :plain :srcor)
                     :view-position
                     (xy 112 48)
                     :view-size
                     (xy 259 110)))
  (setf node5
        (make-object 'comment
                     :comment
                     "Tobias Kunze's 3rd-order automaton"
                     :font
                     '("Times" 14 :bold :srcor)
                     :view-position
                     (xy 113 13)
                     :view-size
                     (xy 259 20)))
  (setf node4
        (make-object 'operator
                     :operator
                     #'between
                     :args
                     '(1 6)
                     :view-position
                     (xy 91 362)
                     :view-size
                     (xy 59 21)
                     :inputs
                     (make-link-array 11)
                     :outputs
                     (make-link-array 11)))
  (setf node3
        (make-object 'operator
                     :operator
                     #'*
                     :args
                     '(12 ~)
                     :view-position
                     (xy 106 394)
                     :view-size
                     (xy 41 21)
                     :inputs
                     (make-link-array 8)
                     :outputs
                     (make-link-array 8)))
  (setf node2
        (make-object 'comment
                     :comment
                     "p1 p2 p3"
                     :font
                     '("Times" 9 :plain :srcor)
                     :view-position
                     (xy 36 85)
                     :view-size
                     (xy 52 18)))
  (setf node1
        (make-object 'comment
                     :comment
                     "Links:
red = propagate
green = activate
blue = update"
                     :font
                     '("Times" 9 :plain :srcor)
                     :view-position
                     (xy 168 195)
                     :view-size
                     (xy 99 53)))
  (setf node0
        (make-object 'comment
                     :comment
                     "Click to start
Coammd-Click
to stop."
                     :font
                     '("Times" 9 :plain :srcor)
                     :view-position
                     (xy 9 14)
                     :view-size
                     (xy 80 39)))
  (link-nodes 'propagate
              node28
              node27
              :from-index
              0
              :to-index
              1
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'activate node26 node17 :from-index 0 :to-index 0)
  (link-nodes 'propagate
              node25
              node28
              :from-index
              0
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node24
              node27
              :from-index
              0
              :to-index
              0
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node23
              node13
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node22
              node23
              :from-index
              0
              :to-index
              6
              :to-slot
              '(args at 2)
              :from-slot
              'value)
  (link-nodes 'propagate
              node21
              node23
              :from-index
              0
              :to-index
              5
              :to-slot
              '(args at 2)
              :from-slot
              'value)
  (link-nodes 'propagate
              node20
              node19
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node19
              node18
              :from-index
              5
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'value)
  (link-nodes 'update
              node19
              node23
              :from-index
              0
              :to-index
              3
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (link-nodes 'activate
              node18
              node22
              :from-index
              7
              :to-index
              0
              :from-slot
              'else)
  (link-nodes 'activate
              node18
              node21
              :from-index
              0
              :to-index
              3
              :from-slot
              'then)
  (link-nodes 'propagate
              node17
              node20
              :from-index
              5
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              '(value at 2))
  (link-nodes 'update
              node17
              node20
              :from-index
              3
              :to-index
              2
              :to-slot
              '(args at 1)
              :from-slot
              '(value at 1))
  (link-nodes 'update
              node17
              node23
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              '(value at 0))
  (link-nodes 'propagate
              node16
              node15
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (link-nodes 'update
              node15
              node10
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'value)
  (link-nodes 'propagate
              node14
              node8
              :from-index
              3
              :to-index
              3
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node13
              node12
              :from-index
              9
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'else)
  (link-nodes 'propagate
              node13
              node10
              :from-index
              1
              :to-index
              1
              :to-slot
              '(args at 1)
              :from-slot
              'then)
  (link-nodes 'activate
              node13
              node16
              :from-index
              0
              :to-index
              0
              :from-slot
              'then)
  (link-nodes 'propagate
              node12
              node9
              :from-index
              9
              :to-index
              3
              :to-slot
              '(args at 0)
              :from-slot
              'else)
  (link-nodes 'propagate
              node12
              node14
              :from-index
              1
              :to-index
              0
              :to-slot
              '(args at 0)
              :from-slot
              'then)
  (link-nodes 'activate
              node12
              node4
              :from-index
              0
              :to-index
              0
              :from-slot
              'then)
  (link-nodes 'propagate
              node10
              node8
              :from-index
              0
              :to-index
              2
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'propagate
              node9
              node8
              :from-index
              0
              :to-index
              4
              :to-slot
              'value
              :from-slot
              'value)
  (link-nodes 'update
              node8
              node17
              :from-index
              7
              :to-index
              nil
              :to-slot
              (list 'value 'by #'(lambda (new hist &aux (len 3))            
                                   ;; circular history list. *print-circle* better be t!
                                   (let ((cell (nthcdr (1- len) hist)))
                                     (setf (car cell) new (cdr cell) hist)
                                     cell)))
              :from-slot
              'value)
  (link-nodes 'propagate
              node8
              node25
              :from-index
              1
              :to-index
              0
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (link-nodes 'propagate
              node8
              node24
              :from-index
              0
              :to-index
              0
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (link-nodes 'propagate
              node4
              node3
              :from-index
              3
              :to-index
              0
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (link-nodes 'update
              node3
              node14
              :from-index
              0
              :to-index
              2
              :to-slot
              '(args at 1)
              :from-slot
              'value)
  (add-objects (list node28
                     node27
                     node26
                     node25
                     node24
                     node23
                     node22
                     node21
                     node20
                     node19
                     node18
                     node17
                     node16
                     node15
                     node14
                     node13
                     node12
                     node11
                     node10
                     node9
                     node8
                     node7
                     node6
                     node5
                     node4
                     node3
                     node2
                     node1
                     node0)
               (find-object 'automaton)
               nil
               :copy-first
               nil)
  (find-object 'automaton))