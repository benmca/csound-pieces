(in-package :stella) (defparameter *totaldur* 0); (defobject soundin (csound-note)   ((instr :initform "i1") inst mytime dur amp pitch pan dist pct)   (:parameters instr mytime dur dur amp pitch pan dist pct))(defobject revnote (csound-note)  ((name :initform "i99") mystart dur revtime)  (:parameters name mystart dur revtime));(defun fragment1 (st len pn)  (algorithm nil soundin (start st length len)    (setf rhythm (item                  (rhythms e e h.                         24 24 24 s s 12 24+s e q e s+w+s                         s 24 6 6 12 6 6 6                         24+s s+q. q.+w                         e e h.                         24 24 24 s s+6 s+12 e s 24 12 12 24+s q.+h. tempo (tempo 120))))    (setf mytime (+ time (between (* time 1.01 .99))))    (setf dur rhythm)    (setf amp 10000)    (setf pitch (item                 (pitches fs5 e c                        e4 fs g [g4 g5] [g4 g5] g4 g a a b                        g3 d5 d b4 d5 as g4 b                        g a3 g                        g                        fs5 e c                        e4 fs g g g b b g3 d5 d d b4                        g3)))  ;41 items    (setf pan (between 40 50)) ;    (setf dist 10)             ; L*O*C*S*I*G Arguments    (setf pct .1)              ;    (setf *totaldur* (max (+ mytime dur) *totaldur*))));;;(defun mrn (&key (revtime 20.))  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)	     (setf mystart 0)	     (setf dur (+ revtime *totaldur* 1))	     )) ; (defun ms (&key (start-time 1.)(my-scorefile "HD:CsWork:mel1.sco"))   (let* ((myheader (header ""                     "f 1 0 1048576 1 \"polvoish.aif\" 0 0 0"                    "f 8 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)     (merge all () ;;function proto:;(st len pan);     (fragment 0 41 100)      (fragment 20 41 100)      (mrn)            )    (open-cmd my-scorefile) 	(mix-cmd "all")))