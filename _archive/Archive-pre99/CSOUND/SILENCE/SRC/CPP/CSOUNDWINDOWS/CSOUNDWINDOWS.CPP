/**
* S I L E N C E
* 
* An auto-extensible system for making music on computers by means of software alone.
* Copyright (c) 2001 by Michael Gogins. All rights reserved.
*
* L I C E N S E
*
* This software is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This software is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this software; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*
* P U R P O S E
*
* Provides a Windows stand-alone executable version of CsoundVST.
* Illustrates how to use CsoundVST as a "control" in Windows programs.
*
* This file was generated by the Visual C++ version 6.0 project wizard as a Win32 "Hello World" application,
* and modified as little as possible to host CsoundVST. Added code is prefixed and suffixed by
* // BEGIN ADDITION FOR CSOUNDVST
* // END ADDITION FOR CSOUNDVST
*/
#include "stdafx.h"
#include "resource.h"

// BEGIN ADDITION FOR CSOUNDVST
#include <CsoundVST/CsoundVST.h>
#include <CsoundVST/CsoundView.h>
static CsoundVST *csoundVST;
static CsoundView *csoundView;
// END ADDITION FOR CSOUNDVST


#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;								// current instance
TCHAR szTitle[MAX_LOADSTRING];								// The title bar text
TCHAR szWindowClass[MAX_LOADSTRING];								// The title bar text

// Foward declarations of functions included in this code module:
ATOM				MyRegisterClass(HINSTANCE hInstance);
BOOL				InitInstance(HINSTANCE, int);
LRESULT CALLBACK	WndProc(HWND, UINT, WPARAM, LPARAM);
LRESULT CALLBACK	About(HWND, UINT, WPARAM, LPARAM);

int APIENTRY WinMain(HINSTANCE hInstance,
                     HINSTANCE hPrevInstance,
                     LPSTR     lpCmdLine,
                     int       nCmdShow)
{
	MSG msg;
	HACCEL hAccelTable;
	// Initialize global strings.
	LoadString(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
	LoadString(hInstance, IDC_CSOUNDWINDOWS, szWindowClass, MAX_LOADSTRING);
	MyRegisterClass(hInstance);
	// Perform application initialization.
	if (!InitInstance (hInstance, nCmdShow)) 
	{
		return FALSE;
	}
	// Load any Cound files specified on the command line or via shell open.
	int argc;
	char **argv;
	scatterArgs(lpCmdLine, &argc, &argv);
	for(int arg = 0; arg < argc; arg++)
	{

		std::string argument = argv[arg];
		if(argument.find(".csd") != -1 || argument.find(".orc") != -1 || argument.find(".sco") != -1 || argument.find(".mid") != -1
		   || argument.find(".CSD") != -1 || argument.find(".ORC") != -1 || argument.find(".SCO") != -1 || argument.find(".MID") != -1)
		{
			trimQuotes(argument);
			if(argument.find(".csd") != -1)
			{
				csoundVST->load(argument);
			}
			else
			{
				csoundVST->import(argument);
			}
			csoundView->updateView();
		}
	}
	deleteArgs(argc, argv);
	hAccelTable = LoadAccelerators(hInstance, (LPCTSTR)IDC_CSOUNDWINDOWS);
	// Main message loop.
	while (GetMessage(&msg, 0, 0, 0)) 
	{
		if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg)) 
		{
			TranslateMessage(&msg);
			DispatchMessage(&msg);
		}
	}	
	return msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
//  COMMENTS:
//
//    This function and its usage is only necessary if you want this code
//    to be compatible with Win32 systems prior to the 'RegisterClassEx'
//    function that was added to Windows 95. It is important to call this function
//    so that the application will get 'well formed' small icons associated
//    with it.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;	
	wcex.cbSize = sizeof(WNDCLASSEX); 	
	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= (WNDPROC)WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon(hInstance, (LPCTSTR)IDI_CSOUNDWINDOWS);
	wcex.hCursor		= LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= (LPCSTR)IDC_CSOUNDWINDOWS;
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon(wcex.hInstance, (LPCTSTR)IDI_SMALL);	
	return RegisterClassEx(&wcex);
}

//
//   FUNCTION: InitInstance(HANDLE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	HWND hWnd;
	hInst = hInstance; // Store instance handle in our global variable
	hWnd = CreateWindow(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT, 0, CW_USEDEFAULT, 0, NULL, NULL, hInstance, NULL);
	if (!hWnd)
	{
		return FALSE;
	}
	
	//	BEGIN ADDITION FOR CSOUNDVST
	//	Create the CsoundVST object.
	csoundVST = CreateCsoundVST();
	//	Get the editor.
	csoundView = (CsoundView *)csoundVST->getEditor();
	//	Find the size the editor wants to be.
	ERect *childRect;
	csoundView->getRect(&childRect);
	//	Create the CsoundVST editor as a child window that fills the parent window.
	csoundView->open((void *)hWnd);
	RECT parentRect;
	GetWindowRect(hWnd, &parentRect);
	MoveWindow(hWnd, 50, 50, childRect->right + 6, childRect->bottom + 50, true);	
	//	END ADDITION FOR CSOUNDVST
	
	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);
	return TRUE;
}

//
//  FUNCTION: WndProc(HWND, unsigned, WORD, LONG)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND	- process the application menu
//  WM_PAINT	- Paint the main window
//  WM_DESTROY	- post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	int wmId;
	int wmEvent;
	switch (message) 
	{
		// BEGIN ADDITION FOR CSOUNDVST
	case WM_SIZE:
		{
			RECT clientRect;
			GetClientRect(hWnd, &clientRect);
			HWND childWindow = ((CsoundView *) csoundVST->getEditor())->getWindowHandle();
			MoveWindow(childWindow, 0, 0, clientRect.right, clientRect.bottom, false);
		}
		break;
		// END ADDITION FOR CSOUNDVST
	case WM_COMMAND:
		wmId    = LOWORD(wParam); 
		wmEvent = HIWORD(wParam); 
		// Parse the menu selections:
		switch (wmId)
		{
		case IDM_ABOUT:
			DialogBox(hInst, (LPCTSTR)IDD_ABOUTBOX, hWnd, (DLGPROC)About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
		case WM_DESTROY:
			PostQuitMessage(0);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
	}
	return 0;
}

// Mesage handler for about box.
LRESULT CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{
	case WM_INITDIALOG:
		return TRUE;
		
	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL) 
		{
			EndDialog(hDlg, LOWORD(wParam));
			return TRUE;
		}
		break;
	}
    return FALSE;
}
