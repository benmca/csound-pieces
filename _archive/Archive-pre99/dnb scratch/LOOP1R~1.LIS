(in-package :stella)(defparameter *totaldur* 0);(defobject quick (csound-note)  ((instr :initform "i") inst dur amp)  (:parameters instr inst time dur amp));;(defobject revnote (csound-note);  ((name :initform "i99") mystart dur revtime);  (:parameters name mystart dur revtime));(defun bassnare1 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 3 3 3 3 4 3 1 3 3 4 3 3 in rotation					change (changes start '(0 1) step 5))))	(setf rhythm (item (rhythms s s s s s e. e s s s e s in rotation					change (changes start '(0 1) step 5) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 7 7 0 0 10 4 7 0 in rotation					change (changes start '(0 1) step 3))))));;(defun hat1 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 1 1 1 2 1 in rotation					change (changes start '(0 1) step 4))))	(setf rhythm (item (rhythms q q s e s q in rotation					change (changes start '(0 1) step 4) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 5 5 6 8 7 in rotation					change (changes start '(0 1) step 4))))));;;;;;(defun bassnare2 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 3 3 3 3 4 4 1 4 3 4 4 3 in rotation					change (changes start '(0 1) step 5))))	(setf rhythm (item (rhythms s s s s s e. e s s s e s in rotation					change (changes start '(0 1) step 5) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 7 7 0 0 0 7 0 in rotation					change (changes start '(0 1) step 3))))));;(defun hat2 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 1 1 1 2 1 in rotation					change (changes start '(0 1) step 4))))	(setf rhythm (item (rhythms q s s e s e s q in rotation					change (changes start '(0 1) step 4) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 5 5 6 8 0 0 7 in rotation					change (changes start '(0 1) step 4))))));;;;;;(defun bassnare3 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 4 4 3 3 4 3 4 3 4 4 3 4 in rotation					change (changes start '(0 1) step 5))))	(setf rhythm (item (rhythms s s s s s e. e s s s e s in rotation					change (changes start '(0 1) step 5) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 7 0 7 0 0 10 0 4 7 0 in rotation					change (changes start '(0 1) step 3))))));;(defun hat3 (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 1 1 1 2 1 in rotation					change (changes start '(0 1) step 4))))	(setf rhythm (item (rhythms q q s e s q in rotation					change (changes start '(0 1) step 4) tempo (tempo 140))))	(setf dur rhythm)	(setf amp (item (items 5 0 5 8 0 7 in rotation					change (changes start '(0 1) step 4))))));;;;;;(defun bassnare (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 3 3 3 3 4 3 1 3 3 4 3 3)))	(setf rhythm (item (rhythms s s s s s e. e s s s e s tempo (tempo 100))))	(setf dur rhythm)	(setf amp (item (items 7 7 0 7 7 7 0 7 7 0 7 7)))));;(defun hat (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 1 1 1 2 1)))	(setf rhythm (item (rhythms q q e e q tempo (tempo 100))))	(setf dur rhythm)	(setf amp (item (items 5 5 5 7 9)))));;(defun mrn (&key (revtime 10.));  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0);	     (setf mystart 0);	     (setf dur (+ revtime *totaldur* 1));	     ));(defun ms (&key (start-time 1.)(my-scorefile "Desktop Folder:Csound:loop1rot.sco"))  (let* ((myheader (header "f 1 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)    (merge all ()		(bassnare1 1 480)		(hat1 1 200)		(bassnare2 1 480)		(hat2 1 200)		(bassnare3 1 480)		(hat3 1 200)		(bassnare 69 96)		(hat 69 40)            )    (open-cmd my-scorefile)	(mix-cmd "all")))