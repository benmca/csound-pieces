
sr=22050
kr=2205
ksmps=10
nchnls=2

ga1 init 0
ga2 init 0

; Various instruments for reading in, and processing already 
; existing soundfiles.

instr 1 ; The simplest way of reading a sound into CSound
	; This is for reading a mono soundfile.
	; Does stereo output with controls over gain for
	; each channel.

a1  	soundin p4, p5
	outs	(a1 * p6),  (a1 * p7)

endin


instr 2	; The same as instr 1, but this one reads stereo file
	; and applies an amplitude envelope. Note that
	; both channels are scaled by the same envelope.

a1, a2  soundin "ob-smooth.snd", p5

kenv	oscil1i	0, p8, p3, p7

	outs	a1*kenv, a2*kenv
endin


instr 3 ; This instrument uses oscili to read a sample that has
	; been stored in a function table using GEN01.

ifn = p6
ilength = ftlen(ifn)
isampfreq = p4 * (sr/ilength) ; calculates the frequency (the speed or rate)
			      ; for the oscili so that
		              ; p4 is a scalar on the frequency
	                      ; of the sample. When p4 is 1
			      ; there will be no change from the
			      ; samples original frequency.
			      ; P4=.5 will cause it to sound one octave
                              ; lower, p4=2 will be an octavce higher, etc...
			       
iamp = p5 * 16000

kenv		oscil1i	0,iamp, p3, p9
asig 		oscili	kenv, isampfreq, ifn

asig1 = asig * (1 - p7)
asig2 = asig * p7

ga1 = ga1 + (asig1 * p8)
ga2 = ga2 + (asig2 * p8)
outs asig1, asig2

endin

instr 4 ; Essentially the same as instr 3. This one uses tablei and phasor
	; instead of oscili to read the sample. Using table allows arbitrary
        ; point access into the stored sound (you can start reading anywhere and
        ; read forwards and backwards.

ifn = p6
ilength = ftlen(ifn)
isampfreq = p4 * (sr/ilength)
iamp = p5 * 16000

kenv	oscil1	0,iamp, p3, p9

aphs	phasor  	-isampfreq
atbl	tablei  	aphs,  ifn,  1

asig = atbl * kenv

asig1 = asig * (1 - p7)
asig2 = asig * p7

ga1 = ga1 + (asig1 * p8)
ga2 = ga2 + (asig2 * p8)
outs asig1, asig2

endin


instr 5 ; This instrument is for use with "pre-smoothed" samples.
	; Those samples have been pre-processed with an
	; amplitude envelope, such as half sine using GEN09.
	; The samples are then read in loop fashion in order
	; to extend the duration of the sound being sampled.
	; Two overlapping tables, offset by half of the sample
	; size are combined to create the sense of a continuous
	; sound.

ifn = p6
ilength = ftlen(ifn)
isampfreq = p4 * (sr/ilength)
iamp = p5 * 16000

arandvib randi .01, 15
avib	oscili arandvib, 7.5, 1
; The vibrato is used to make the loop speed change
; slightly over time.

aphs	phasor  -isampfreq * (1 + avib)
atbl1	tablei  aphs,  ifn, 1

aphs2	phasor 	-isampfreq * (1 + avib),.5 ; this phasor starts at phase .5
atbl2	tablei 	aphs2, ifn, 1

kenv	oscil1i	0, iamp, p3, p9
asig = (atbl1 + atbl2) * kenv

asig1 = asig * (1 - p7)
asig2 = asig * p7

ga1 = ga1 + (asig1 * p8)
ga2 = ga2 + (asig2 * p8)
outs asig1, asig2
endin


instr 6 ; Same as instr 5, with added bank of filters
	
ifn = p6
ilength = ftlen(ifn)
isampfreq = p4 * (sr/ilength)
iamp = p5 * 16000
icf1 = p4 * 750
icf2 = p4 * 2200
icf3 = p4 * 3400

arandvib randi .01, 15
avib	oscili arandvib, 7.5, 1

aphs	phasor  -isampfreq * (1 + avib)
atbl1	tablei  aphs,  ifn, 1

aphs2	phasor 	-isampfreq * (1 + avib),.5 ; this phasor starts at phase .5
atbl2	tablei 	aphs2, ifn, 1

kenv	oscil1i	0, iamp, p3, p9
asig = (atbl1 + atbl2)

ares0	reson	asig, 0, 5000
ares1	reson	asig, icf1, 2
ares2	reson	asig, icf2, 2
ares3	reson	asig, icf3, 2

asigx = (ares0+ares1+ares2+ares3)
abal	balance	asigx, asig
asig = abal * kenv

asig1 = asig * (1 - p7)
asig2 = asig * p7

ga1 = ga1 + (asig1 * p8)
ga2 = ga2 + (asig2 * p8)
outs asig1, asig2
endin
