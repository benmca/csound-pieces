;;; -*- syntax: Lisp; font-size: 16; line-numbers: no; -*-
;;; -*- syntax: Lisp; font-size: 16; line-numbers: no; -*-
;;; -*- syntax: Lisp; font-size: 16; line-numbers: no; -*-

; given the dur of a quarter, return tempo
(define (quarterDur->tempo quarterdur)
  (* 60 (/ 1.0 quarterdur)) 
  )



(define (quartetlet-1 pan totaldur pitches)
  (let* (
   (rhythms (make-cycle '(s s s s s s s s+q q)))
   (amps (make-cycle '(0 1 0 1 0 1 0 1 0)))
   )
  (process with curtime = 0
             for t = (elapsed #t) ; get true score time
             for dist = 5
             for pct = .025
             for origdur = 1
             for tem = 72
             for rhy = (rhythm (next rhythms) tem)
             for dur = rhy
             for amp = (next amps)
             for pitch = 0
; faster tempo, the quieter
            until (> curtime totaldur)
            do
              (if (> amp 0)
                (mp:midi :key (keynum (next pitches)))
                )
              (set! curtime t)
              (wait rhy)
            )
      )
)


(define (quartetlet-2 pan totaldur pitches)
  (let* (
   (rhythms (make-cycle '(e e e e+q q)))
   (amps (make-cycle '(1 1 1 1 0)))
   )
  (process with curtime = 0
             for t = (elapsed #t) ; get true score time
             for dist = 5
             for pct = .025
             for origdur = 1
             for tem = 72
             for rhy = (rhythm (next rhythms) tem)
             for dur = rhy
             for amp = (next amps)
             for pitch = 0
; faster tempo, the quieter
            until (> curtime totaldur)
            do
              (if (> amp 0)
                (mp:midi :key (keynum (next pitches)))
                )
              (set! curtime t)
              (wait rhy)
            )
      )
)

(define (quartetlet-3 pan totaldur pitches)
  (let* (
   (rhythms (make-cycle '(s q e.+q q)))
   (amps (make-cycle '(1 1 1 0)))
   )
  (process with curtime = 0
             for t = (elapsed #t) ; get true score time
             for dist = 5
             for pct = .025
             for origdur = 1
             for tem = 72
             for rhy = (rhythm (next rhythms) tem)
             for dur = rhy
             for amp = (next amps)
             for pitch = 0
; faster tempo, the quieter
            until (> curtime totaldur)
            do
              (if (> amp 0)
                (mp:midi :key (keynum (next pitches)))
                )
              (set! curtime t)
              (wait rhy)
            )
      )
)

(define (quartetlet-4 pan totaldur pitches)
  (let* (
   (rhythms (make-cycle '(e s s s s s s+q q)))
   (amps (make-cycle '(1 1 1 1 1 1 1 0)))
   )
  (process with curtime = 0
             for t = (elapsed #t) ; get true score time
             for dist = 5
             for pct = .025
             for origdur = 1
             for tem = 72
             for rhy = (rhythm (next rhythms) tem)
             for dur = rhy
             for amp = (next amps)
             for pitch = 0
; faster tempo, the quieter
            until (> curtime totaldur)
            do
              (if (> amp 0)
                (mp:midi :key (keynum (next pitches)))
                )
              (set! curtime t)
              (wait rhy)
            )
      )
)

(sprout (list 
         (quartetlet-1 10 10 (make-heap '(gs4 b4 a4 fs4)))
         (quartetlet-2 30 10 (make-heap '(gs4 b4 a4 fs4)))
         (quartetlet-3 60 10 (make-heap '(e5 fs5)))
         (quartetlet-4 45 10 (make-heap '(fs3)))
         ))

(define (launch num)
  (let*  (
   (rhythms (make-cycle '(e s s s s s s+q q)))
)
  (process 
           for r = (rhythm (next rhythms) 120)
           for iternum from 0 to num
           do
           (sprout (list
         (quartetlet-1 10 10 (make-heap '(gs4 b4 a4 fs4)))
         (quartetlet-2 30 10 (make-heap '(gs4 b4 a4 fs4)))
         (quartetlet-3 60 10 (make-heap '(e5 fs5)))
         (quartetlet-4 45 10 (make-heap '(fs3)))
                    ))
           (wait r)
           )
  )
)
           (sprout 
            (quartetlet-1 10 10 (make-heap '(gs4 b4 a4 fs4)))
                    "test.sco" :write #f)

(string-append "13-2-" (number->string iternum) ".sco")
(sprout (launch 25))

(string-append "hi" (number->string 1) ".sco")

(for-each (lambda (x) 
            (display (hertz x))) pitches)

(for-each (lambda (x)
            (let ( (y (hertz x)) )
              (set! calls (append calls (list (gtr 120 (between 120 60) (between 0 90) 1.0 y 10))))
              )
            )
            pitches
)


(sprout (quartetlet-1 10 10 (make-heap '(gs4 b4 as4 fs4))) "13-2.sco" :play #t :orchestra "13-1.orc")



;
; make-reverb-note
;   Turn instrument on for duration of score
;
(define (make-reverb-note dur)
  (process repeat 1 do
  (cs:i 99 0.0 dur 5))
)
