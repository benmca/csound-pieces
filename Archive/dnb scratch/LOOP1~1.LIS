(in-package :stella)(defparameter *totaldur* 0);(defobject quick (csound-note)  ((instr :initform "i") inst dur amp)  (:parameters instr inst time dur amp));;(defobject revnote (csound-note);  ((name :initform "i99") mystart dur revtime);  (:parameters name mystart dur revtime));(defun bassnare (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 3 3 4 )))	(setf rhythm (item (rhythms e e h. tempo (tempo 100))))	(setf dur rhythm)	(setf amp (item (items 7 7 7 )))));;(defun hat (st len)  (algorithm nil quick (start st length len)	(setf inst (item (items 1 1 1 2 1 1 1 1)))	(setf rhythm (item (rhythms e tempo (tempo 100))))	(setf dur rhythm)	(setf amp (item (items 5 5 6 7)))));;(defun mrn (&key (revtime 10.));  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0);	     (setf mystart 0);	     (setf dur (+ revtime *totaldur* 1));	     ));(defun ms (&key (start-time 1.)(my-scorefile "c:/Ben/slow1.sco"))  (let* ((myheader (header "f 1 0 16384 9 .5 1 0"			   )))    (fheader my-scorefile myheader)    (merge all ()	    (bassnare 1 2)		(hat 1 2)            )    (open-cmd my-scorefile)	(mix-cmd "all")))