(in-package :stella)(defparameter *totaldur* 0);; ;    4     5    flags:    6                7                                             8         9             10;   amp   pitch       all attack?  phrase:0=beg, 1=mid, 2=end, 3=allatck, 4=1note    glisswait  2ndpitch(glis) randstart;(defobject quick (csound-note)  ((instr :initform "i1") dur amp pitch)  (:parameters instr time dur amp pitch));(defun test1 (start-time len)  (algorithm nil quick (start start-time length len)    (setf rhythm (item (rhythms q q q e e e. tempo (tempo 5))))    (setf dur rhythm)    (setf pitch (item (pitches e2 b e3 a in heap)))    (setf amp (between 1000 5000))));don't forget: p10 can't be 0!!!;(defun mrn (&key (revtime 10.))  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)	     (setf mystart 0)	     (setf dur (+ revtime *totaldur* 1))	     ));(defun ms (&key (start-time 1.)(my-scorefile "Retard:Audio:Csound:Time:Time1.sco"))  (let* ((myheader (header "f 1 0 16384 10 1"			   )))    (fheader my-scorefile myheader)    (merge all ()	   (test1 1 1)           (test1 3 12)           (mrn))    (open-cmd my-scorefile)	(mix-cmd "all")))