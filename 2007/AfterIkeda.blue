<blueData version='0.116.1'>
  <projectProperties>
    <title></title>
    <author>author</author>
    <notes> -W -o D:\Nuendo\Urban\mel1.wav

consound -W -oD:\Nuendo\Urban\bass_1_ctof.wav

csound -o c:\\Progra~1\\Csound\\snd\\2.wav</notes>
    <sampleRate>44100</sampleRate>
    <ksmps>2</ksmps>
    <channels>2</channels>
    <diskSampleRate>44100</diskSampleRate>
    <diskKsmps>2</diskKsmps>
    <diskChannels>2</diskChannels>
    <useAudioOut>true</useAudioOut>
    <useAudioIn>false</useAudioIn>
    <useMidiIn>false</useMidiIn>
    <useMidiOut>false</useMidiOut>
    <noteAmpsEnabled>true</noteAmpsEnabled>
    <outOfRangeEnabled>true</outOfRangeEnabled>
    <warningsEnabled>true</warningsEnabled>
    <benchmarkEnabled>true</benchmarkEnabled>
    <advancedSettings>csound -d -odac1</advancedSettings>
    <completeOverride>true</completeOverride>
    <fileName></fileName>
    <askOnRender>false</askOnRender>
    <diskNoteAmpsEnabled>true</diskNoteAmpsEnabled>
    <diskOutOfRangeEnabled>true</diskOutOfRangeEnabled>
    <diskWarningsEnabled>true</diskWarningsEnabled>
    <diskBenchmarkEnabled>true</diskBenchmarkEnabled>
    <diskAdvancedSettings>csound -o c:\\Progra~1\\Csound\\snd\\2.wav</diskAdvancedSettings>
    <diskCompleteOverride>true</diskCompleteOverride>
  </projectProperties>
  <arrangement>
    <instrumentAssignment arrangementId='1' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>sine</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 16000
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp  	linen 	iamp, .001, idur, .001
knoiseamp  	linen 	iamp, .001, idur*.001, .001
;kamp    linen   iamp, .02, idur, idur*.5
;amod    oscili  1000, ipitch, 1
;acar    oscili  kamp, ipitch+amod, 1
;acar    oscili  kamp, ipitch+amod, 1
acar	oscili  kamp, ipitch, 1
ano 	noise	 knoiseamp*.01,.75

a1, a2	locsig  acar+ano, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2

</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='2' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>saw</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 32768
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .02, idur, idur*.5
asig    oscili  kamp, ipitch, 2

a1, a2	locsig  asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='4' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>kick</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig, asig2 soundin &quot;/media/hda1/Program Files/Csound/snd/bd.aif&quot;

a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='5' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>hh</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 *.5
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig, asig2 soundin &quot;/media/hda1/Program Files/Csound/snd/hh.aif&quot;

a1, a2	locsig  kamp * asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='100' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Little Guy trans</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

;kamp    linen   iamp, .001, idur, .001
;C:\Program Files\Csound\snd\Shortwave
asig  soundin &quot;/media/hda1/Program Files/Csound/snd/Shortwave/LittleGuyDataTrans1_clip.wav&quot;
a1, a2	locsig  asig * iamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='101' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>Digi pulse</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
;C:\Program Files\Csound\snd\Shortwave
asig  soundin &quot;/media/hda1/Program Files/Csound/snd/Shortwave/DigitalPulse3_Clean_Clip.wav&quot;
a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='102' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>kick - placeholder</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 2
ipitch = p5
ipan = p6
idist = p7
ipct = p8

kamp    linen   iamp, .001, idur, .001
asig  diskin &quot;/media/hda1/Program Files/Csound/snd/Shortwave/IdMusic1_Clip1.wav&quot;, ipitch

a1, a2	locsig  asig * kamp, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2
</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='199' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>reverb</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>a1	reverb	ga1, 5
a2	reverb	ga2, 5
	outs	a1,a2

ga1 = 0
ga2 = 0</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
  </arrangement>
  <mixer>
    <enabled>false</enabled>
    <extraRenderTime>0.0</extraRenderTime>
    <channelList list='channels'>
      <channel>
        <name>1</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072753' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>2</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072751' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>4</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072749' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>5</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072747' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>100</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072745' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>101</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072743' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>102</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072741' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>199</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-1855072739' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
    </channelList>
    <channelList list='subChannels'/>
    <channel>
      <name>Master</name>
      <outChannel>Master</outChannel>
      <level>0.0</level>
      <muted>false</muted>
      <solo>false</solo>
      <effectsChain bin='pre'/>
      <effectsChain bin='post'/>
      <parameter uniqueId='-1855072737' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
        <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false'>
          <linePoint x='0.0' y='0.0'/>
        </line>
      </parameter>
    </channel>
  </mixer>
  <tables>;sine
f 1 0 16384 10 1

;saw
f 2 0 256 7 0 128 1 0 -1 128 0
;pulse?
f 3 0 256 7 1 128 1 0 -1 128 -1
</tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc>ga1 init 0
ga2 init 0
			</globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <opcodeList/>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
    <commandLineEnabled>true</commandLineEnabled>
    <commandLineOverride>true</commandLineOverride>
  </liveData>
  <soundObject type='blue.soundObject.PolyObject'>
    <subjectiveDuration>2.0</subjectiveDuration>
    <startTime>0.0</startTime>
    <name>root</name>
    <backgroundColor>-10066279</backgroundColor>
    <timeBehavior>0</timeBehavior>
    <noteProcessorChain/>
    <isRoot>true</isRoot>
    <pixelSecond>38</pixelSecond>
    <defaultHeightIndex>1</defaultHeightIndex>
    <snapEnabled>true</snapEnabled>
    <snapValue>1.0</snapValue>
    <timeDisplay>0</timeDisplay>
    <timeUnit>1</timeUnit>
    <soundLayer name='Sine Pulse ' muted='false' solo='false' heightIndex='1'>
      <noteProcessorChain/>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>14.0</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>External</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>;**************************************************************
; Continuum.blue
;
;	Simple Common Music program to demonstrate use of 
;		print-stream function in conjunction with blue.
;
;	Note: This was built on Win2k.  The command line used 
;		above implies that the directory containing lisp.exe 
;		(or correlate lisp executable for mac/linux) 
;		is accessible by the shell running blue. -M param 
;		points to compiled common music binary.
;	
;	Questions/comments - Ben McAllister, benmca_at_listenfaster.com
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))





(defun sinepulse(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
              (items
		(rhythms s tempo(tempo tem))
              )
	))
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur (* rhythm .1))
	(setf inst 1)

	(setf pitch 15000)

	(setf amp 
		(item (items 
		 	(items 0)
			(items 1 for (* 32 10))	
	)))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 1)
	(setf pct 0)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)




(defun sinepulse_offbeats(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
              (items
		(rhythms 32 tempo(tempo tem))
		(rhythms s q s s e s. q. in heap for 24 tempo(tempo tem))
              )
	))
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur (* rhythm .1))
	(setf inst 1)

	(setf pitch 9000)

	(setf amp 
		(item (items 
		 	(items 0)
			(items 1 for (* 32 10))	
	)))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 1)
	(setf pct 0)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)


;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
	   	(sinepulse 32 120 0 (* 32 10) 101)
	   	(sinepulse_offbeats 48 120 20 (+ 1 (* 32 10)) 101)
	   	(sinepulse 32 120 70 (* 32 10) 101)
	   	(sinepulse_offbeats 48 120 90 (+ 1 (* 32 10)) 101)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>/usr/local/bin/cm-1.2/lisp.run -M /usr/local/bin/cm-1.2/cm.mem </commandLine>
        <syntaxType>Python</syntaxType>
      </soundObject>
    </soundLayer>
    <soundLayer name='Hi Pulse' muted='false' solo='false' heightIndex='1'>
      <noteProcessorChain/>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>14.0</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>External</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>;**************************************************************
; Continuum.blue
;
;	Simple Common Music program to demonstrate use of 
;		print-stream function in conjunction with blue.
;
;	Note: This was built on Win2k.  The command line used 
;		above implies that the directory containing lisp.exe 
;		(or correlate lisp executable for mac/linux) 
;		is accessible by the shell running blue. -M param 
;		points to compiled common music binary.
;	
;	Questions/comments - Ben McAllister, benmca_at_listenfaster.com
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))

;radio pulse
(defun pulse1(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
(items
		(rhythms e for 8 tempo(tempo tem))
		(rhythms s e e e e e e e s tempo(tempo tem))
		(rhythms e for 8 tempo(tempo tem))
		(rhythms s e e e e e e e s tempo(tempo tem))
		(rhythms e for 8 tempo(tempo tem))
		(rhythms s e e e e e e e s tempo(tempo tem))
		(rhythms s for (-(* 17  16)(* 17 3)) tempo(tempo tem))

 )
	))
	(setf dur (interpl (* (mod count 8) .05) 0 .01 1 rhythm))
	(setf inst instrnum)

	(setf pitch 1)
	(setf amp (item 
		(items .1)	
	))	
;pan, dist and pct are used by locsig in orchestra
	(setf pan (interpl (* (mod count 20) .05)  0 0 1 pn))
	(setf dist 3)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

;sine pulse
(defun pulse2(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf mytime time)
	(setf rhythm (item
(items
		(rhythms e for 8 tempo(tempo tem))
		(rhythms s e e e e e e e s tempo(tempo tem))
		(rhythms e for 8 tempo(tempo tem))
		(rhythms s e e e e e e e s tempo(tempo tem))
		(rhythms s for (-(* 17  16)(* 17 2)) tempo(tempo tem))
)
	))
;	(setf dur (* rhythm (item (items (1 weight 10) (8 weight 1) in random ))))
	(setf dur (interpl (* (mod count 16) .05) 0 .01 1 rhythm))
;	(setf dur (* rhythm .01))
	(setf inst 1)

	(setf pitch (interpl (* (mod count 16) .05) 0 6000 1 12000))

	(setf amp (item 
		(items .1)	
	))	
;pan, dist and pct are used by locsig in orchestra
;	(setf pan pn)
	(setf pan (interpl (* (mod count 20) .05)  0 90 1 pn))
	(setf dist 3)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()

		(pulse1 0 120 45 (* 16 32) 100)
		(pulse1 0 120 90 (* 16 32) 102)
		(pulse2 8 120 60 (* 16 32) 101)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>/usr/local/bin/cm-1.2/lisp.run -M /usr/local/bin/cm-1.2/cm.mem </commandLine>
        <syntaxType>Python</syntaxType>
      </soundObject>
    </soundLayer>
    <soundLayer name='Trans and Bass' muted='false' solo='false' heightIndex='1'>
      <noteProcessorChain/>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>8.0</subjectiveDuration>
        <startTime>32.0</startTime>
        <name>External</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>;**************************************************************
; Continuum.blue
;
;	Simple Common Music program to demonstrate use of 
;		print-stream function in conjunction with blue.
;
;	Note: This was built on Win2k.  The command line used 
;		above implies that the directory containing lisp.exe 
;		(or correlate lisp executable for mac/linux) 
;		is accessible by the shell running blue. -M param 
;		points to compiled common music binary.
;	
;	Questions/comments - Ben McAllister, benmca_at_listenfaster.com
;
;**************************************************************
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst mytime dur amp pitch pan dist pct)
  (:parameters instr inst mytime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i199&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))

(defun beat1(st tem pn instrnum)
  (algorithm nil soundin_indx (start st)
	(setf mytime time)
	(setf rhythm 
		(item (items
			(items (rhythms h q q q h. w+w  tempo(tempo tem)) for 2)
			(items (rhythms h q h h q q h. q h.  tempo(tempo tem)) for 2)
			(items (rhythms q q q q w+w+w tempo(tempo tem)) for 2)
			(items (rhythms e for 32 tempo(tempo tem)) for 2) 
	)))
	
	(setf inst (item (items
 		(items (items 100 100 100 102 102 102)for 2)
		(items (items 100 100 100 100 102 102 102 102 102)for 2)
 		(items (items 102 102 100 100 100)for 2)
 		(items (items 102 100 102 100 102 100 102 100 102 100 102 100 102 100 102 100 100 102 100 102 100 102 100 102 100 102 100 102 100 102 100 102)for 2)
	) :kill t))

	(setf pitch (item (items 1 1.2 1.25 1.5 1.75 2 in random)))
	(setf amp (item (items
		(items(items 0 1 0 1 0 0) for 2)
		(items(items 0 1 0 1 1 1 0 1 0)for 2)	
		(items(items 1 0 1 0 0)for 2)
		(items(items 1 for 32 )for 2)
	)))	

;this mutes upper voice, leaving bass
	(if (= inst 102)
		(setf dur (* rhythm 1.0))
		(setf dur (* rhythm .25))
		(setf amp 0)
	)


	(setf amp (* amp .25)) 

;pan, dist and pct are used by locsig in orchestra
	(setf pan (between 0 90))
	(setf dist 3)
	(setf pct .1)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))
;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
;
;	generate three performances of line1, 
;	 panned hard-left, center, and hard right
;
		(beat1 0 240 30 100)
		(beat1 0 180 60 100)
		(beat1 10 80 0 100)
		(beat1 80 120 0 100)
;		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))
;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>/usr/local/bin/cm-1.2/lisp.run -M /usr/local/bin/cm-1.2/cm.mem </commandLine>
        <syntaxType>Python</syntaxType>
      </soundObject>
    </soundLayer>
  </soundObject>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
  <renderEndTime>-1.0</renderEndTime>
  <markersList/>
  <loopRendering>false</loopRendering>
</blueData>