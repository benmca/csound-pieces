<blueData version='0.122.0'>
  <projectProperties>
    <title></title>
    <author>author</author>
    <notes> -W -o D:\Nuendo\Urban\mel1.wav

consound -W -oD:\Nuendo\Urban\bass_1_ctof.wav</notes>
    <sampleRate>44100</sampleRate>
    <ksmps>2</ksmps>
    <channels>2</channels>
    <diskSampleRate>44100</diskSampleRate>
    <diskKsmps>2</diskKsmps>
    <diskChannels>2</diskChannels>
    <useAudioOut>true</useAudioOut>
    <useAudioIn>false</useAudioIn>
    <useMidiIn>false</useMidiIn>
    <useMidiOut>false</useMidiOut>
    <noteAmpsEnabled>true</noteAmpsEnabled>
    <outOfRangeEnabled>true</outOfRangeEnabled>
    <warningsEnabled>true</warningsEnabled>
    <benchmarkEnabled>true</benchmarkEnabled>
    <advancedSettings>-odac5</advancedSettings>
    <completeOverride>false</completeOverride>
    <fileName></fileName>
    <askOnRender>false</askOnRender>
    <diskNoteAmpsEnabled>true</diskNoteAmpsEnabled>
    <diskOutOfRangeEnabled>true</diskOutOfRangeEnabled>
    <diskWarningsEnabled>true</diskWarningsEnabled>
    <diskBenchmarkEnabled>true</diskBenchmarkEnabled>
    <diskAdvancedSettings></diskAdvancedSettings>
    <diskCompleteOverride>false</diskCompleteOverride>
    <diskAlwaysRenderEntireProject>false</diskAlwaysRenderEntireProject>
    <csladspaSettings>
      <name/>
      <maker/>
      <uniqueId>0</uniqueId>
      <copyright/>
      <portDefinitionList/>
      <enabled>false</enabled>
    </csladspaSettings>
  </projectProperties>
  <arrangement>
    <instrumentAssignment arrangementId='1' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>sine</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>idur = p3
iamp = p4 * 16000
ipitch = p5
ipan = p6
idist = p7
ipct = p8

;  asig pluck p4, ipitch, ipitch*0.81, 1, 3, .5

  ifn = 0
  imeth = 1

asig pluck iamp, ipitch, ipitch, ifn, imeth

a1, a2	locsig  asig, ipan, idist, ipct
ar1, ar2  locsend
outs a1, a2
ga1 = ga1+ar1
ga2 = ga2+ar2

</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
    <instrumentAssignment arrangementId='99' isEnabled='true'>
      <instrument type='blue.orchestra.GenericInstrument'>
        <name>reverb</name>
        <comment></comment>
        <globalOrc></globalOrc>
        <globalSco></globalSco>
        <instrumentText>a1	reverb	ga1, 5
a2	reverb	ga2, 5
	outs	a1,a2

ga1 = 0
ga2 = 0</instrumentText>
        <opcodeList/>
      </instrument>
    </instrumentAssignment>
  </arrangement>
  <mixer>
    <enabled>false</enabled>
    <extraRenderTime>0.0</extraRenderTime>
    <channelList list='channels'>
      <channel>
        <name>1</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-211435452' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
      <channel>
        <name>99</name>
        <outChannel>Master</outChannel>
        <level>0.0</level>
        <muted>false</muted>
        <solo>false</solo>
        <effectsChain bin='pre'/>
        <effectsChain bin='post'/>
        <parameter uniqueId='-211435442' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
          <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
            <linePoint x='0.0' y='0.0'/>
          </line>
        </parameter>
      </channel>
    </channelList>
    <channelList list='subChannels'/>
    <channel>
      <name>Master</name>
      <outChannel>Master</outChannel>
      <level>0.0</level>
      <muted>false</muted>
      <solo>false</solo>
      <effectsChain bin='pre'/>
      <effectsChain bin='post'/>
      <parameter uniqueId='-211435440' name='Volume' label='dB' min='-96.0' max='12.0' resolution='-1.0' automationEnabled='false'>
        <line name='' version='2' max='12.0' min='-96.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
          <linePoint x='0.0' y='0.0'/>
        </line>
      </parameter>
    </channel>
  </mixer>
  <tables>;sine
f 1 0 16384 10 1

;saw
f 2 0 256 7 0 128 1 0 -1 128 0
;pulse?
f 3 0 256 7 1 128 1 0 -1 128 -1
</tables>
  <soundObjectLibrary/>
  <globalOrcSco>
    <globalOrc>ga1 init 0
ga2 init 0
</globalOrc>
    <globalSco></globalSco>
  </globalOrcSco>
  <opcodeList/>
  <liveData>
    <commandLine>csound -Wdo devaudio -L stdin</commandLine>
    <commandLineEnabled>true</commandLineEnabled>
    <commandLineOverride>true</commandLineOverride>
  </liveData>
  <soundObject type='blue.soundObject.PolyObject'>
    <subjectiveDuration>2.0</subjectiveDuration>
    <startTime>0.0</startTime>
    <name>root</name>
    <backgroundColor>-10066279</backgroundColor>
    <timeBehavior>0</timeBehavior>
    <noteProcessorChain/>
    <isRoot>true</isRoot>
    <pixelSecond>64</pixelSecond>
    <defaultHeightIndex>1</defaultHeightIndex>
    <snapEnabled>false</snapEnabled>
    <snapValue>1.0</snapValue>
    <timeDisplay>0</timeDisplay>
    <timeUnit>5</timeUnit>
    <soundLayer name='' muted='true' solo='false' heightIndex='1'>
      <noteProcessorChain/>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>15.296875</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>external</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;
(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst starttime dur amp pitch pan dist pct)
  (:parameters instr inst starttime dur amp pitch pan dist pct))
(defobject revnote (csound-note)
  ((name :initform &quot;i99&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))

;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;




;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))


;**************************************************************************************
;**************************************************************************************
;**************************************************************************************

;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
		(gtr1 0.01 150 0 (* 16 39) 1)
		(gtr2 0.001 150 10 (* 16 39) 1)
		(gtr3 0.002 150 40 (* 16 39) 1)
		(gtr4 0.003 150 45 (* 16 39) 1)
		(gtr5 0.01 150 50 (* 16 39) 1)
		(gtr6 0.011 150 80 (* 16 39) 1)
		(gtr7 0.0111 150 90 (* 16 39) 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))

;**************************************************************************************
;**************************************************************************************
;**************************************************************************************

;*****************************************************
;	gtr1
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr1(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))
	(setf starttime time)

	(setf dur .1)
	(setf pitch (item (items 
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches (pitches e4 for 4) (pitches d4 for 12) )
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
;bar 17
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
;bar 37
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches r for 16)



	)))
	(setf amp (interpl count 
			0 .6 48 .6 49 .3 69 .6 128 .6 ))
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

;*****************************************************
;	gtr2
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr2(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))
	(setf starttime time)

	(setf dur .1)
	(setf pitch (item (items 
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches (pitches e4 for 4) (pitches d4 for 12) )
		(pitches d4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)
;bar 17
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches (pitches c4 for 8) (pitches d4 for 8))
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
;bar 37
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
	)))
	(setf amp (interpl count 
			0 .2 33 .6 48 .6 49 .3 64 .6 128 .6 ))
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)



;*****************************************************
;	gtr3
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr3(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))
	(setf starttime time)

	(setf dur .1)
	(setf pitch (item (items 
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches (pitches e4 for 4) (pitches fs4 for 12) )
		(pitches fs4 for 16)
		(pitches fs4 for 16)
		(pitches fs4 for 16)

		(pitches fs4 for 16)
		(pitches fs4 for 16)
		(pitches fs4 for 16)
		(pitches fs4 for 16)

		(pitches fs4 for 16)
		(pitches fs4 for 16)
		(pitches g4 for 16)
		(pitches g4 for 16)
;bar 17
		(pitches g4 for 16)
		(pitches g4 for 16)
		(pitches g4 for 16)
		(pitches g4 for 16)

		(pitches r for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches d4 for 16)
		(pitches (pitches d4 for 4)(pitches e4 for 12))
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches r for 16)
;bar 37
		(pitches r for 16)
		(pitches r for 16)
		(pitches r for 16)
	)))
	(setf amp (interpl count 
			0 .2 33 .6 48 .6 49 .3 64 .6 128 .6 ))

;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)



;*****************************************************
;	gtr4
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr4(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))

	(setf starttime time)
	(setf dur .1)
	(setf pitch (item (items 
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
;bar 17
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches d4 for 16)
		(pitches (pitches d4 for 4)(pitches e4 for 12))
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches r for 16)
;bar 37
		(pitches r for 16)
		(pitches r for 16)
		(pitches r for 16)
	)))
	(setf amp (interpl count 
			0 .2 33 .6 48 .6 49 .3  128 .75 ))

;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)


;*****************************************************
;	gtr5
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr5(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))
	(setf starttime time)

	(setf dur .1)
	(setf pitch (item (items 
		(pitches (pitches r for 8) (pitches e4 for 8))
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e3 for 16)

		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)

		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)

		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
;bar 17
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches f3 for 16)

		(pitches f3 for 16)
		(pitches f3 for 16)
		(pitches f3 for 16)
		(pitches f3 for 16)

		(pitches e3 for 16)
		(pitches (pitches e3 for 4) (pitches f3 for 12))
		(pitches f3 for 16)
		(pitches f3 for 16)

		(pitches f3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)
		(pitches e3 for 16)

		(pitches f3 for 16)
		(pitches f3 for 16)
		(pitches f3 for 16)
		(pitches r for 16)
;bar 37
		(pitches r for 16)
		(pitches r for 16)
		(pitches r for 16)
	)))
	(setf amp (interpl count 
			0 .2 33 .6 48 .6 49 .3  128 .75 ))
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)






;*****************************************************
;	gtr6
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr6(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))

	(setf starttime time)
	(setf dur .1)
	(setf pitch (item (items 
		(pitches (pitches r for 8) (pitches e4 for 8))
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e3 for 16)

		(pitches (pitches e3 for 4) (pitches d3 for 12))
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
;bar 17
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches e3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
;bar 37
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches r for 16)
	)))
	(setf amp (interpl count 
			0 .3 8 .3 33 .6 48 .6 49 .3 69 .6 128 .6 ))

;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)




;*****************************************************
;	gtr7
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr7(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for (* 16 39) tempo(tempo tem))

	)))

	(setf starttime time)
	(setf dur .1)
	(setf pitch (item (items 
		(pitches r for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e3 for 16)

		(pitches (pitches e3 for 4) (pitches d3 for 12))
		(pitches d3 for 16)
		(pitches (pitches d3 for 8) (pitches c3 for 8))
		(pitches c3 for 16)

		(pitches c3 for 16)
		(pitches (pitches c3 for 12)(pitches bf3 for 4))
		(pitches bf3 for 16)
		(pitches bf3 for 16)

		(pitches bf3 for 16)
		(pitches bf3 for 16)
		(pitches bf3 for 16)
		(pitches bf3 for 16)
;bar 17
		(pitches bf3 for 16)
		(pitches bf3 for 16)
		(pitches bf3 for 16)
		(pitches bf3 for 16)

		(pitches r for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches e3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)
;bar 37
		(pitches d3 for 16)
		(pitches d3 for 16)
		(pitches d3 for 16)

	)))
	(setf amp (interpl count 
			0 .3 17 .3 33 .6 48 .6 49 .3 69 .6 128 .6 ))

;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)




;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>lisp.exe -M c:\progra~1\cm-1.3\clisp\cm.mem</commandLine>
        <syntaxType>Python</syntaxType>
      </soundObject>
    </soundLayer>
    <soundLayer name='' muted='false' solo='false' heightIndex='1'>
      <noteProcessorChain/>
      <soundObject type='blue.soundObject.External'>
        <subjectiveDuration>15.296875</subjectiveDuration>
        <startTime>0.0</startTime>
        <name>with sprout</name>
        <backgroundColor>-12566464</backgroundColor>
        <timeBehavior>2</timeBehavior>
        <noteProcessorChain/>
        <text>
(in-package :stella)
;
; global variables
;
(defparameter *totaldur* 0); used to calculate the duration of reverb note
(defparameter *buflen* 4096); used to store file in print-stream function
;
; object definition for individual score events
;

(defobject soundin_indx (csound-note)
  ((instr :initform &quot;i&quot;) inst starttime dur amp pitch pan dist pct)
  (:parameters instr inst starttime dur amp pitch pan dist pct))

(defobject soundin_indx2 (csound-note)
  ((instr :initform &quot;i&quot;) inst starttime dur amp pitch pan dist pct numperiods)
  (:parameters instr inst starttime dur amp pitch pan dist pct numperiods))

(defobject revnote (csound-note)
  ((name :initform &quot;i99&quot;) mystart dur revtime)
  (:parameters name mystart dur revtime))

;
; Function: print-stream
;	 function to read file and print result to console.
; Note: this is fairly hacky - the entire file is stored in 
;	an array of *buflen* length.  If your score is longer, 
; 	consider increasing the value at the top of this file.
; Args:
; filename - name of file to read.
(defun print-stream (filename)
	(let ((buffer (make-array *buflen*)))
	(with-open-file (f filename :direction :input
                      :if-does-not-exist :error
                      )
	(do ((j 0))((= j (file-length f)))
	(setf myline (read-line f t &quot;eofeof&quot;))
	(if (string-equal myline &quot;eofeof&quot;)(return))
	(princ myline)
	(write-char #\Newline)
	(setf j (+ j ))
	)
   ))
)
;




;
; simple function to generate final reverb note of score.
;
(defun mrn (&amp;key (revtime 5.))
	(algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)
	(setf mystart 0)
	(setf dur (+ revtime *totaldur* 10))
	))


;**************************************************************************************
;**************************************************************************************
;**************************************************************************************

;
; Function: ms
; 	&apos;make-score&apos; function - calls algorithms defined and 
;		writes result to filename provided.
;
(defun ms (&amp;key (start-time 1.)(my-scorefile &quot;test.sco&quot;))
  (let* ((myheader (header &quot;&quot;			   )))	
	(fheader my-scorefile myheader)	
	(merge all ()
		(gtr1 0 120 45 32 1)
		(mrn)
	)	
	(setf mystream (make-string-output-stream))	
	(open-cmd my-scorefile)
	(mix-cmd &quot;all 0 play nil&quot;)
))

;**************************************************************************************
;**************************************************************************************
;**************************************************************************************

;*****************************************************
;	gtr1
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;
(defun gtr1(st tem pn len instrnum)
  (algorithm nil soundin_indx (start st length len)
	(setf inst instrnum )
	(setf mytime time)
	(setf rhythm (item (items
		(rhythms s for 4 tempo(tempo tem))
		(rhythms w tempo(tempo tem))
	)))
	(if(= rhythm (rhythm &apos;w tem))
		(sprout (gtr2 time tem pn 1 (rhythm &apos;w tem)))
	)
	(setf starttime time)

	(setf dur .1)
	(setf pitch (item (items 
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)
		(pitches e4 for 16)

		(pitches (pitches e4 for 4) (pitches d4 for 12) )
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
;bar 17
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches c4 for 16)

		(pitches c4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)

		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches d4 for 16)
;bar 37
		(pitches d4 for 16)
		(pitches d4 for 16)
		(pitches r for 16)



	)))
;	(setf amp (interpl count 
;			0 .6 48 .6 49 .3 69 .6 128 .6 ))
	(setf amp 1)
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
  )
)

;*****************************************************
;	gtr2
;*****************************************************
; Args:
; st - Start time (in seconds)
; tem - tempo
; pn - pan - number between 0 and 90
; len - length - number of notes this alg should produce
; instrnum - number identifying csound instrument to which these
; 	score events play.
;



(defun gtr2(st tem pn instrnum d)
  (algorithm nil soundin_indx2 (start st)
	(setf numperiods (ceiling (/ d (rhythm &apos;64 tem))))


	(setf starttime time)
	(setf inst instrnum )
	(setf mytime time)

	(setf rhythm (item (items
		(rhythms 64 tempo(tempo tem))
	):kill numperiods ))
	(setf dur rhythm)
	(setf pitch (item (items 
		(pitches e4)
	)  ) )
	(setf amp 1)
;pan, dist and pct are used by locsig in orchestra
	(setf pan pn)
	(setf dist 5)
	(setf pct .01)
; accumulate durations here to determine total duration 
;	for reverb note
	(setf *totaldur* (max (+ mytime dur) *totaldur*))
))

;
; call ms
;
(ms)
;
; print result to console.
;
(print-stream  &quot;test.sco&quot;)</text>
        <commandLine>lisp.exe -M c:\progra~1\cm-1.3\clisp\cm.mem</commandLine>
        <syntaxType>Python</syntaxType>
      </soundObject>
    </soundLayer>
  </soundObject>
  <scratchPadData>
    <isWordWrapEnabled>true</isWordWrapEnabled>
    <scratchText/>
  </scratchPadData>
  <noteProcessorChainMap/>
  <renderStartTime>0.0</renderStartTime>
  <renderEndTime>-1.0</renderEndTime>
  <markersList/>
  <loopRendering>false</loopRendering>
  <tempo>
    <enabled>false</enabled>
    <visible>false</visible>
    <line name='' version='2' max='240.0' min='30.0' resolution='-1.0' color='-8355712' rightBound='false' endPointsLinked='false'>
      <linePoint x='0.0' y='60.0'/>
    </line>
  </tempo>
</blueData>