(in-package :stella) (defparameter *totaldur* 0); (defobject sine (csound-note)   ((instr :initform "i1") inst mytime dur amp pitch pan dist pct rat1 ind1 rat2 ind2)   (:parameters instr mytime dur amp pitch pan dist pct rat1 ind1 rat2 ind2))(defobject sinefilt (csound-note)   ((instr :initform "i2") inst mytime dur amp pitch pan dist pct)   (:parameters instr mytime dur amp pitch pan dist pct))(defobject revnote (csound-note)  ((name :initform "i99") mystart dur revtime)  (:parameters name mystart dur revtime));(defun fragment1 (st len)  (algorithm nil sine (start st length len)    (setf rhythm (item                  (rhythms e e h.                          24 24 24 s s s s 12 24+s e q e e+w                         s 24 6 6 12 6 6 6                         24+s s+q. q.+w                         e e h.                         24 24 24 s s+6 s+12 e s 24 12 12 24+s                          q.+h. tempo (tempo 60))))    (setf mytime (* time (between .99 1.01)))    (setf dur rhythm)    (setf amp 10000)    (setf pitch (item                 (pitches fs5 e c                        e4 fs g [g4 g5] [g4 g5] g4 g a a a b                        g3 d5 d b4 d5 as g4 b                        g a3 g                        fs5 e c                        e4 fs g g g b b g3 d5 d d b4                        g3)))  ;41 items    (setf pan (between 40 50)) ;    (setf dist 5)             ; L*O*C*S*I*G Arguments    (setf pct .01)              ;    (setf *totaldur* (max (+ mytime dur) *totaldur*))    (setf rat1 (item (items 1 1 1 1 2 2 2 2)))    (setf rat2 (item (items 1 2 3 4 1 2 3 4)))    (setf ind1 (item (items 1 1 1 1 2 2 2 2)))    (setf ind2 (item (items 1 2 3 4 1 2 3 4)))));;(defun fragment2 (st len)  (algorithm nil sinefilt (start st length len)    (setf rhythm (item                  (rhythms w+w+w+w                           w                           w+e                            h.+e h.+e h.+e h.+e                            h.                            h. h. h. h.                            h tempo (tempo 60))))    (setf mytime time)    (setf dur rhythm)    (setf amp 10000)    (setf pitch (item                 (pitches g2                          r                          g2 [e2 c3 g b] g2 [fs2 d3 g c4] g2 )))  ; 7 items    (setf pan (between 40 50)) ;    (setf dist 5)             ; L*O*C*S*I*G Arguments    (setf pct .01)              ;    (setf *totaldur* (max (+ mytime dur) *totaldur*))));;;(defun mrn (&key (revtime 20.))  (algorithm nil revnote (start 10000 length 1 revtime revtime rhythm 0)	     (setf mystart 0)	     (setf dur (+ revtime *totaldur* 1))	     )) ; (defun ms (&key (start-time 1.)(my-scorefile "HD:CsWork:mel3.sco"))   (let* ((myheader (header ""                     "f 1 0 16384 9 1 1 0"			   )))    (fheader my-scorefile myheader)     (merge all () ;;function proto:;(st len pan);     (fragment1 0 41)      (mrn)            )    (open-cmd my-scorefile) 	(mix-cmd "all")))