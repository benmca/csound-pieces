;;;
;;; Music kit examples.
;;; Load the file or evaluate individual examples, then use Mix to hear.
;;;

(in-package :cm)
(in-syntax :music-kit)

;;;
;;; several of these examples use the same music kit part.
;;;

(defparameter clarinet (make-part :name 'clarinet 
                                  :info "synthPatch:\"Fm1vi\""))
(defparameter bass (make-part :name 'bass 
                              :info "synthPatch:\"DBWave1vi\""))

(defparameter *header*
    (header "envelope ampFn1 = [(0,0)(.02,1)(2.5,.8)(4.0,0.0)];"
            "envelope indFn1 = [(0,0)(.01,1)(1.5,.5)(3.9,0.0)];"
            "envelope ampFn2 = [(0,0)(.2,1)(.3,.7)|(.35,0.0)];"
            "envelope indFn2 = [(0,0)(.1,1)(.2,.7)|(.3,.7)];"
            "envelope legato  = [(0,0)(.2,1)|(.5,0.0)];"
            "envelope marcato = [(0,0)(.2,1)(.3,.1)|(.5,0.0)];"
            "envelope freqFn  = [(0,.9)(.1,1)|(.2,.99)];"
            "envelope ampEnvelope  = [(0,0)(.2,1)(.3 ,.5)|(.4,0.0)];"
            "envelope freqEnvelope = [(0,.98)(.2,1.0)|(.4,.99)];"
            "envelope marcato2 = [(0,0)(.1,1,2)(.2,.1)|(.3,0.0)];"
            "envelope smooth   = [(0,0)(.1,1)|(.3,0.0)];"
            "envelope ampEnvelope2 = [(0,0)(.2,1)(.3 ,.5)|(.4,0.0)];"
            "envelope ramp01 =  [(0,0)(.3,1)];"
            "envelope ramp10 =  [(0,1)(.3,0)];"
            "envelope smooth2  = [(0,0)(.3 ,1.0)|(1.4,0.0)];"
            "envelope wampFn  = [(0,0)(.2,1)|(.35,0.0)];"
            "waveTable wWave = [{1,.4}{2,.2}{3,.3}{4,.4}{5,.3}{6,.2}{7,.1}
                                {8,.2}{9,.25}{10,.2}{11,.1}];"
            "waveTable clarinetWave = [{1,1}{3,.5}{5,.25}{7,.125}{9,.1}
                                      {11,.05}{13,.025}];"
            "waveTable oboeWave = [{1,.1}{2,.2}{3,.3}{4,.4}{5,.3}{6,.2}{7,.1}
                                  {8,.2}{9,.25}{10,.2}{11,.1}];"))

(open-event-stream "~/test.score" nil 'header *header*)
(tell-user "Output file: ~~\\test.score has been initialized for these examples.")

;;;
;;; was examp1.lisp - this guy doesnt even need to be an algorithm in stella.
;;;

(thread examp1 ()
  (loop repeat 12 
        do
     (object Fm1vi freq (pitch 'd2) rhythm (rhythm 'h)  amp .1
              ampEnv "ampFn1" m1Ratio 3.5 cRatio 1.0 m1Ind1 5 m1Ind0 0
              m1IndEnv "indFn1" bearing 0)))

;;;
;;; was examp2.lisp 
;;;

(algorithm examp2 Fm1vi (freq (pitch 'd2) rhythm (rhythm 'q) amp .4 
                         ampEnv "ampFn1" cRatio 1.0 m1Ind0 0 
                         m1IndEnv "indFn1" bearing 0 length 12)	   
  (vars (m1RatioBase 3.5)   
        (m1Ind1Base 3))
  (setf m1Ratio (+ m1RatioBase (* (random 5) .01)))
  (setf m1Ind1 (+ m1Ind1Base (* (random 300) .01))))

;;;
;;; was examp3.lisp - examp3.lisp did not create its parts dynamically
;;; so we can reimplement it simply as a top level merge running 
;;; preallocated algorithms.
;;;

(merge examp3 ()                         

  ;; define a local function called gong-link that sprouts
  ;; a new part each time it is called.

  (flet ((gong-lick (pause base-freq)
	   (let ((m1RatioBase 3.5) 
		 (m1Ind1Base 3))
	     (algorithm nil Fm1vi (start pause 
                               freq base-freq
                               rhythm (rhythm 'q)
                               amp .02           
                               ampEnv "ampFn1"   
                               cRatio 1.0       
                               m1Ind0 0         
                               m1IndEnv "indFn1" 
                               bearing 0        
                               length 12)	  
	       (setf m1Ratio (+ m1RatioBase (* (random 5) .01)))  
	       (setf m1Ind1 (+ m1Ind1Base (* (random 300) .01)))))))
  
    ;; Loop makes repeated calls on function gong-lick.

    (loop for start from 0 to 2 by 0.5 
          as freq1 from 50.0 by 20.0 
          do
      (gong-lick start freq1))))

;;;
;;; was examp4.lisp - we give this algorithm's notes a new part info that lets
;;; us call them part notes in the score file.
;;;

(algorithm examp4 Fm1vi (part clarinet amp .1 ampEnv "ampFn2" ampAtt .3 
                         ampRel .2 m1IndAtt .1 m1IndRel .1 m1Ratio 2.001 
                         cRatio 1.0 m1Ind1 1 m1Ind0 0 m1IndEnv "indFn2" 
                         sVibAmp .009 sVibFreq 4 rVibAmp .005 bearing 0
                         length 25)
    ;; lists will cycle: 7 pitches against 6 rhythms
    (setf freq (item (pitches d4 e f g a b c))
	  rhythm (item (rhythms e e e e e q tempo 120))))

;;;
;;; was examp5.lisp
;;;

(merge examp5 ()
  ;; define a local function called clarinet-lick that
  ;; sprouts a new part each time it is called.
  (flet ((clarinet-lick (pause trans) 
	   (algorithm nil Fm1vi (start pause amp .1 ampEnv "ampFn2"  
                             ampAtt .3 ampRel .2 m1IndAtt .1 m1IndRel .1
                             m1Ratio 2.001 cRatio 1.0 m1Ind1 1 m1Ind0 0
                             m1IndEnv "indFn2" sVibAmp .009 sVibFreq 4
                             rVibAmp .005 rhythm (rhythm 'e 120)
                             bearing 0 length 20)
	     (setf freq (pitch (+ (item (degrees 69 71 72)) trans))          
		   rhythm (* .94 rhythm) ; gets faster
		   m1Ind1 (+ m1Ind1 .1)	; gets brighter
		   amp (+ amp .02)))))	; gets louder
    ;; Loop sprouts clarinet-licks starting at different times.
    (loop for start from 0 to 6 by 1.0  
          as pitch-trans from 0 by 2 
          do
      (clarinet-lick start pitch-trans))))

;;;
;;; was pluck-1.lisp
;;;

(algorithm pluck-1 Pluck (duration .25)
  (setf rhythm (item (rhythms q e q tempo 120)))
  (setf freq (item (notes d3 e f g a in heap) :kill 5)))

;;;
;;; was pluck-2.lisp
;;;

(algorithm pluck-2 pluck (start 0 length 50)
  (setf rhythm (item (rhythms e s e tempo 128))) ; Rhythm is 8th, 16th, 8th    
  (setf freq (item (items (notes c2 d e)  ; Randomly choose between 4 lists
                          (notes c3 e g)
                          (notes e4 d fs)
                          (notes e5 b4 c5)
                          in heap))) 
  (setf bright (interpl time 0 .1 3 .8 6 .2 10 .9 12 .1 15 1.0))
  (setf duration (+ .05 (random 1.5))))

;;;
;;; was fm1vi-1.lisp. no such thing as "print once" in stella, just 
;;; put a noteUpdate object before an algorithm.
;;;

(thread Fm1vi-1 ()
  (object Fm1vi part clarinet type :noteUpdate rhythm 0
           amp .1 ampEnv "ampFn2"
           ampAtt .3 ampRel .2  m1IndAtt .1 m1IndRel .1 m1Ratio 2.001
           cRatio 1.0  m1Ind1 1 m1Ind0 0 m1IndEnv "indFn2" sVibAmp .009
           sVibFreq 4 rVibAmp .005 bearing 0 )
  (algorithm nil Fm1vi (part clarinet)
    (setf freq (item (pitches d4 e f f f e g f e d f e f g a)
              :kill t)          
          rhythm (item (rhythms e e e e q e e e e q e e q q h))
          duration (- rhythm .1))))

;;;
;;; was fm1vi-2.lisp. no such thing as "mono parts" in stella, just surround
;;; a noteOn algorithm with noteUpdate and NoteOff objects.
;;;

(thread Fm1vi-2 ()
  (let ((ptag 1))
     (object Fm1vi part clarinet type :noteUpdate
              rhythm 0 amp 0.1 ampAtt 0.3 ampRel 0.2 freqEnv "freqFn"
              m1IndAtt 0.1 m1IndRel 0.1 m1Ratio 2.001 m1Ind1 1.3
              m1Ind0 0.1 svibAmp 0.009 svibFreq 4 rvibAmp 0.005 bearing 0)

    (algorithm nil Fm1vi (part clarinet type :noteOn tag ptag)
      (setf freq (item (pitches d4 e f f f e g f e d f e f g a)
		     :kill t)   
          rhythm (item (rhythms e e e e q e e e e q e e q q h))
          ;; We vary the envelope to add variety
          ampEnv (item (items (items "legato" for 2) 
                       (items "marcato" for 2)
                       (items "legato" for 3)
                       "marcato"
                       (items "legato" for 2)
                       (items "marcato" for 2)
                       (items "legato" for 3)))
          m1IndEnv ampEnv
	  ;; Portamento applies to the "arrival" note
          portamento (if (= count 14) .5 .1)))
;     ;; need a rest til i fix last-note-incrementing bug for algorithms
;     (object rest rhythm 2) ;
    (object Fm1vi part clarinet type :noteOff tag  ptag rhythm 0)
     ))

;;;
;;; was DBWave1vi-1.lisp. 
;;;

(thread DBWave1vi-1 ()
  (let ((ptag 1))
    (object DBWave1vi type :noteUpdate part bass rhythm 0
             ampEnv "ampEnvelope" svibAmp 0.01 freqEnv "freqEnvelope"
             freqAtt 0.25 rvibAmp 0.008)
    (algorithm nil DBWave1vi (part bass type :noteOn tag ptag
                              freq 'd2 waveform1 (quotify "BA") )
      (setf freq0 freq 
            freq  (item (pitches d2 e f g a bf d3 e) :kill t)
            rhythm (item (rhythms e s e. e))
            svibFreq (+ 4.5 (random 1.0))))
;     ;; need a rest til i fix last-note-incrementing bug for algorithms
;     (object rest rhythm .5)
    (object DBWave1vi part bass type :noteOff tag ptag rhythm 0)))

;;;
;;; was DBWave1vi-2.lisp. 
;;;

(thread DBWave1vi-2 ()
  (let ((ptag 1))
    (object DBWave1vi type :noteUpdate part bass rhythm 0
             ampEnv "ampEnvelope" svibAmp 0.01 freqEnv "freqEnvelope"
             freqAtt 0.25 rvibAmp 0.008  waveform1 (quotify "BA") )
    (algorithm nil DBWave1vi (part bass type :noteOn tag ptag freq 'd2)
      (setf freq0 freq 
            freq  (item (pitches d2 e f g a bf d3 e) :kill t)
            rhythm (item (rhythms e s e. e))
            svibFreq (+ 4.5 (random 1.0))))
;     ;; need a rest til i fix last-note-incrementing bug for algorithms
;     (object rest rhythm .5)
    (object DBWave1vi part bass type :noteOff tag ptag rhythm 0)))

;;;
;;; was DBWave1vi-3.lisp. 
;;;

(merge DBWave1vi-3 ()
  (loop with ampf = (interpolation 0 .1 5 .2 6 .2 10 .1)	
        and attf  = (interpolation 0 .5 5 .05 10 .5)
        and relf  = (interpolation 0 .1 5 1 10 .1)
        for part-name in '(part1 part2 part3)
        for timbre in '("SA" "SI" "SU")
        as i from 0
        do
    (let ((start-time i)
          (part (make-part :name part-name 
                           :info "synthPatch:\"DBWave1vi\"")))
      (thread nil (start i)
         (object DBWave1vi part part type :noteUpdate
                  rhythm 0 bearing (- (* start-time 45) 45) 
                  waveform (quotify timbre) sVibAmp .01 rVibAmp .006)
         (algorithm nil DBWave1vi (part part end 10 duration .25 )
           (setf rhythm (item (items .5 .25 .75 .5))
                 freq (item (notes d4 e f g a bf d5 e))
                 ampEnv (if (> rhythm .3) "marcato2" "smooth")
                 svibFreq (+ 4 (random 1.0)))
           (setf amp (function-value time ampf)
                 ampAtt (function-value time attf)
                 ampRel (function-value time relf)))
         ))))

;;;
;;; was DBWave2vi-1.lisp. 
;;;

(thread DBWave2vi-1 ()
  (object DBWave2vi type :noteUpdate part bass
           ampEnv "ampEnvelope2" svibAmp 0.01 freqEnv "ramp01"
           freqAtt 0.25 rvibAmp 0.008 rhythm 0)
  (algorithm nil DBWave2vi (part bass freq 'd2)
    (setf freq0 freq 
          freq (item (pitches d2 e f g a bf d3 e) :kill t)
          rhythm (item (rhythms e s e. e))
          waveformAtt rhythm
          waveform0 (quotify (item (items "0BA" "BA")))
          waveform1 (quotify (item (items "BA" "0BA")))
          waveformEnv (item (items "ramp01" "ramp10"))
          svibFreq (+ 4.5 (random 1.0)))))

;;;
;;; was DBWave2vi-2.lisp. 
;;;

(thread DBWave2vi-2 ()
  (object DBWave2vi type :noteUpdate part bass
           ampEnv "ampEnvelope2" svibAmp 0.01 freqEnv "ramp01"
           freqAtt 0.25 rvibAmp 0.008 rhythm 0)
  (algorithm nil DBWave2vi (part bass freq 'd2)
    (setf freq0 freq 
          freq  (item (pitches d2 e f g a bf d3 e) :kill t)
          rhythm (item (rhythms e s e. e))
          waveformAtt rhythm
          waveform0 (quotify (item (items "0BE" "BU" "0BU" "BE" "0BE" "BE")))
          waveform1 (quotify (item (items "BA" "0BA" "BO" "0BO" "BA" "0BA")))
          waveformEnv (item (items "ramp01" "ramp10"))
          svibFreq (+ 4.5 (random 1.0)))))

(merge DBWave2vi-3 ()
  (loop with ampf = (interpolation 0 .1 5 .2)
        for part-name in '(basso tenor alto soprano1 soprano2)
        for start-time in '(0 .5 1.0 1.5 1.5)
        for start-pitch in '(d2 f3 d4 g5 e5)
        for pitch-stream in (list (pitches d2 e f g a bf d3 e a bf a)
				    (pitches f3 e a g c4 d f g a)
				    (pitches d4 c e d f a bf a)
				    (pitches g5 a f e c d e a4)
				    (pitches e5 f d c a4 bf g a))
        for rhythm-stream in (list (rhythms e s e. e)
				   (rhythms q s e s)
				   (rhythms e. s e e)
				   (rhythms e s e e.)
				   (rhythms e s e e.))
        for waveform0-stream in (list (items "0BE" "BU" "0BU" "BE" "0BE" "BE")
				      (items "0TE" "TU" "0TU" "TE" "0TE" "TE")
				      (items "0SE" "SU" "0SU" "SE" "0SE" "SE")
				      (items "0SE" "SU" "0SU" "SE" "0SE" "SE")
				      (items "0SE" "SU" "0SU" "SE" "0SE" "SE"))
        for waveform1-stream in (list (items "BA" "0BA" "BO" "0BO" "BA" "0BA")
				      (items "TA" "0TA" "TO" "0TO" "TA" "0TA")
				      (items "SA" "0SA" "SO" "0SO" "SA" "0SA")
				      (items "SA" "0SA" "SO" "0SO" "SA" "0SA")
				      (items "SA" "0SA" "SO" "0SO" "SA" "0SA"))
        for amp-offset in '(0 0 0.1 0 0)
        for bearing-value in '(0 -45 45 -33 33)
        do

    ;;  establish new variable bindings each time through the loop

    (let ((part (make-part :name part-name
                           :info "synthPatch:\"DBWave1vi\""))
          (start-time start-time) 
          (start-pitch start-pitch)
          (pitch-stream pitch-stream)
          (rhythm-stream rhythm-stream)
          (waveform1-stream waveform1-stream)
          (waveform0-stream waveform0-stream)
          (amp-offset amp-offset))

      (thread nil (start start-time)
        (object DBWave2vi type :noteUpdate part part
                 ampEnv "smooth2" svibAmp 0.01 freqEnv "ramp01"
                 freqAtt 0.25 rvibAmp 0.008 rhythm 0 
                 bearing bearing-value) 
        (algorithm nil DBWave2vi (part part freq start-pitch)
          (setf freq0 freq 
                freq  (item pitch-stream :kill t)
                rhythm (if (= count 0) 1.0 (item rhythm-stream))
                waveformAtt rhythm
                ampAtt (if (= count 0) 1.0 .3)
                amp (+ amp-offset (function-value time ampf))
                waveform0 (quotify (item waveform0-stream))
                waveform1 (quotify (item waveform1-stream))
                waveformEnv (item (items "ramp01" "ramp10"))
                svibFreq (+ 4.5 (random 1.0))
                freqAtt (/ rhythm 2.0)))))))

;;;
;;; was Wave1vi-1.lisp
;;;

(thread Wave1vi-1 ()
  (let ((part (make-part :name 'vibDemo :info "synthPatch:\"Wave1vi\"")))
    (object Wave1vi part part type :noteUpdate rhythm 0 amp .1
             ampEnv "wampFn" waveform "wWave")
    (algorithm nil Wave1vi (part part length 15 rhythm 1.25 duration 1.0
                            sVibAmp .009 sVibFreq 4 rVibAmp .005)
      (setf freq1 (item (pitches d4 e fs r)))
      (unless-resting                        
        (setf sVibAmp (item (items (items 0 .0075 .015)    ; increasing sVib
                                   (items 0 for 3)         ; then no sVib
                                   (items .01 for 3))      ; then constant sVib
			  :kill t)
              rVibAmp (item (items (items 0 for 3)        ; no rVib
                                   (items 0 .0075 .015)   ; then increase
                                   (items .0075 for 3)))  ; then constant
              sVibFreq (item (items (items 4.5 for 6)     ; constant sVibFreq
                                   (items 3.4 4.5 5.25))) ; then increase 
	   )))))

;;;
;;; was Wave1i-1.lisp
;;;

(thread Wave1i-1 ()
  (let ((part (make-part :name 'waveDemo :info "synthPatch:\"Wave1i\"")))
    (object Wave1vi part part type :noteUpdate rhythm 0  amp .1 
             ampEnv "wampFn" ampRel .5)
    (algorithm nil Wave1i (part part rhythm .25 length 15 ampEnv "wampFn" 
                           ampAtt .01)
    (setf freq (item (pitches d4 e fs)))
    (setf waveform (item (items "clarinetWave" "oboeWave"))) 
    (setf bearing (item (items -45 -27 0 27 45 in palindrome))) 
    (setf ampAtt (* ampAtt 1.5)))))

;;;
;;; was moving-sound.lisp
;;;

(algorithm moving-sound Pluck (part (make-part :name 'guitar
                                               :info "synthPatch:\"Pluck\"") 
                               bearing -48 type :noteOn tag 99)
    (setf type (item (items :noteOn (items :noteUpdate for 10)) :kill 3)) 
    (when (eq type :noteOn)
      (setf freq (item (notes c4 c3 c4)))) 
    (setf rhythm .1 
          bearing (+ bearing 3)))

#|
syntax mk
open ~/test.score header *header*

X	DBWave1vi-1.lisp
X	DBWave1vi-2.lisp
X	DBWave1vi-3.lisp
X	DBWave2vi-1.lisp
X	DBWave2vi-2.lisp
X	DBWave2vi-3.lisp
X	Fm1vi-1.lisp
X	Fm1vi-2.lisp
Midi-1.lisp
Midi-2.lisp
Midi-3.lisp
Midi-4.lisp
Midi-DSP.lisp
Mixsounds-1.lisp
X	Pluck-1.lisp
X	Pluck-2.lisp
X	Wave1i-1.lisp
X	Wave1vi-1.lisp
X	examp1.lisp
X	examp2.lisp
X	examp3.lisp
X	examp4.lisp
X	examp5.lisp
moving-sound.lisp

|#