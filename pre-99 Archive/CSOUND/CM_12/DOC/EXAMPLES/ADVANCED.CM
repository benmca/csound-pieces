;;;
;;; advanced examples - adapted to be used with the Midi syntax in Stella.
;;; Load the file or evaluate individual examples, then use Mix to hear.
;;;

(in-package :cm)
(in-syntax :midi)

;;;
;;; motives are defined using the named option and retrieved 
;;; using the #@ construct
;;;

(algorithm a1_motive midi-note (length 40 rhythm .2 duration .5 amplitude .5)
  (setf note (item (notes c2 [ef5 b] f
                          (notes fs3 a named 'low)
                          c3 [ef5 b] f #@low
                          c4 [ef5 b] f #@low
                          c5 [ef5 b] f #@low))))


;;;
;;; envelope control
;;;

(algorithm a2_envelope midi-note (length 60 rhythm .075 
                                  duration .25 amplitude .5)
  (vars (env '(0 0 .5 1 1 0))
        (key1 60)
        (key2 84))
  (setf note (interp (/ count length) env :scale (- key2 key1) 
                     :offset key1 :return-type 'integer)))


;;;
;;; Using loop to sprout a gesture
;;;

(merge a3_loop ()
  (loop for beg from 0 to 9 by 1.5
        for n in '(a3i_1 a3i_2 a3i_3 a3i_4 a3i_5 a3i_6 a3i_7) 
        do
    (algorithm (name n) midi-note (start beg 
                                   end 14 
                                   note (degree (+ 100.0 (* 100.0 beg)))
                                   duration .25)
      (setf rhythm (+ .05 (random .15)))
      (setf amplitude (item (amplitudes mp (fff weight .1 max 1) 
                                        in random)))
      (setf note (between (- note 2)
                          (+ note 2))))))


;;;
;;; Constructors may be nested inside other parts
;;;

(mute rain ()
  (setf rhythm (item (rhythms q h h. w in random)
                     :kill 2))
  (let (pitch)
    (setf pitch (note (between 100.00 300.00)))
    (loop for beg from 0 by 1.5
          repeat (+ 1 (random 4))
          do 
          (format t "Sprouting new algorithm at ~A to ~A~&" 
                  (+ time beg) (+ time beg 5))
          (sprout
           (algorithm nil midi-note (start (+ time beg)
                                     end (+ time beg 5)
                                     amplitude .25)
             (setf note (transpose pitch (+ -3 (random 7))))
             (setf rhythm (+ .05 (random .15)))
             (setf duration rhythm))))))

;;;
;;; stella object constructors may be used inside function definitions, and 
;;; called whenever needed
;;;

(defun sprout-gesture (time notes)
  (format t "Sprouting gesture at time ~A~%" time)
  (let ((s (make-item-stream 'notes 'cycle notes
                             :for (length notes))))
    (sprout
     (algorithm nil midi-note (start time rhythm .05 amplitude .5 duration .5 
                                     length (length notes) channel 0)
       (setf note (item s))
       (loop for (n1 n2) on notes
             for beg from time by .05
             while n2
             do
             (let ((s (make-item-stream 'notes 'random (list n1 n2) :for 8)))
               (sprout 
                (algorithm nil midi-note (start beg rhythm .2 duration .5
                                                channel 0)
                  (setf note (item s :kill t))
                  (setf amplitude (interpl (/ count 8) 0 .25 1 .05))))))))))


(mute sprout1 (length 1 rhythm 1) 
  (sprout-gesture 0 '(c4 cs4 ds4 fs4 gs4 a4 b4 cs5)))


(mute sprout2 ()
  (vars (s (steps 2 (1 max 1) (3 weight .5) in random
                  from (notes c3 g d4 a in random)
                  for 8 returning note)))
  (setf rhythm (item (rhythms h. w h in random)
                     :kill 4))
  (sprout-gesture time (read-items s)))


